{"ast":null,"code":"var Lane = function Lane() {};\n\nLane.prototype.Events = function () {\n  return [];\n};\n\nLane.prototype.Spans = function () {\n  return [];\n};\n\nLane.prototype.Threads = function () {\n  return [];\n};\n\nLane.prototype.Processes = function () {\n  return [];\n};\n\nLane.prototype.Tasks = function () {\n  return [];\n};\n\nLane.prototype.Edges = function () {\n  return [];\n};\n\nLane.prototype.GC = function () {\n  return [];\n};\n\nLane.prototype.HDD = function () {\n  return [];\n};\n\nLane.prototype.Network = function () {\n  return [];\n};\n\nLane.prototype.Height = function () {\n  if (!arguments.length) return this.height ? this.height : 10;\n  this.height = null;\n  return this;\n};\n\nLane.prototype.Fill = function () {\n  if (!arguments.length) return this.fill ? this.fill : 0;\n  this.fill = null;\n  return this;\n};\n\nLane.prototype.Offset = function () {\n  if (!arguments.length) return this.offset ? this.offset : 0;\n  this.offset = null;\n  return this;\n};\n\nLane.prototype.Label = function () {\n  if (!arguments.length) return this.label ? this.label : \"\";\n  this.label = null;\n  return this;\n};\n\nLane.Scale = function (scale) {\n  return {\n    Height: function Height(lane) {\n      return scale(lane.Height());\n    },\n    Offset: function Offset(lane) {\n      return scale(lane.Offset());\n    }\n  };\n};\n\nLane.Fill = function (lane) {\n  return lane.Fill();\n};\n\nLane.Label = function (lane) {\n  return lane.Label();\n};\n\nvar ThreadLane = function ThreadLane(group, thread) {\n  // Save the arguments\n  this.group = group;\n  this.thread = thread; // Set the thread label\n\n  this.Label(thread.ShortName()); // Save the lane on the events and spans\n\n  var lane = this;\n  this.Events().forEach(function (evt) {\n    evt.lane = lane;\n  });\n  this.Spans().forEach(function (spn) {\n    spn.lane = lane;\n  });\n  this.Edges().filter(function (edge) {\n    return edge.parent.lane == lane;\n  }).forEach(function (edge) {\n    edge.type = \"lane\";\n  });\n};\n\nThreadLane.prototype = new Lane();\n\nThreadLane.prototype.Events = function () {\n  return this.thread.Events();\n};\n\nThreadLane.prototype.Spans = function () {\n  return this.thread.Spans();\n};\n\nThreadLane.prototype.Edges = function () {\n  return this.thread.Edges();\n};\n\nThreadLane.prototype.HDD = function () {\n  return this.thread.HDDEvents();\n};\n\nThreadLane.prototype.Network = function () {\n  return this.thread.NetworkEvents();\n};\n\nvar TaskLane = function TaskLane(group, task) {\n  this.group = group;\n  this.task = task;\n  this.Label(task.ID()); // Save the lane on the events and spans, in this case just the task\n\n  var lane = this;\n  this.task.lane = lane;\n  this.HDD().forEach(function (evt) {\n    evt.lane = lane;\n  });\n  this.Network().forEach(function (evt) {\n    evt.lane = lane;\n  });\n};\n\nTaskLane.prototype = new Lane();\n\nTaskLane.prototype.Spans = function () {\n  return [this.task];\n};\n\nTaskLane.prototype.HDD = function () {\n  return this.task.HDDEvents();\n};\n\nTaskLane.prototype.Network = function () {\n  return this.task.NetworkEvents();\n};","map":{"version":3,"sources":["/home/stolet/TraViz/traviz_frontend/src/components/Swimlane/data/VizLane.js"],"names":["Lane","prototype","Events","Spans","Threads","Processes","Tasks","Edges","GC","HDD","Network","Height","arguments","length","height","Fill","fill","Offset","offset","Label","label","Scale","scale","lane","ThreadLane","group","thread","ShortName","forEach","evt","spn","filter","edge","parent","type","HDDEvents","NetworkEvents","TaskLane","task","ID"],"mappings":"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","sourcesContent":["var Lane = function () { };\n\nLane.prototype.Events = function () { return []; };\nLane.prototype.Spans = function () { return []; };\nLane.prototype.Threads = function () { return []; };\nLane.prototype.Processes = function () { return []; };\nLane.prototype.Tasks = function () { return []; };\nLane.prototype.Edges = function () { return []; };\nLane.prototype.GC = function () { return []; };\nLane.prototype.HDD = function () { return []; };\nLane.prototype.Network = function () { return []; };\n\nLane.prototype.Height = function () { if (!arguments.length) return this.height ? this.height : 10; this.height = null; return this; };\nLane.prototype.Fill = function () { if (!arguments.length) return this.fill ? this.fill : 0; this.fill = null; return this; };\nLane.prototype.Offset = function () { if (!arguments.length) return this.offset ? this.offset : 0; this.offset = null; return this; };\nLane.prototype.Label = function () { if (!arguments.length) return this.label ? this.label : \"\"; this.label = null; return this; };\n\nLane.Scale = function (scale) {\n  return {\n    Height: function (lane) { return scale(lane.Height()); },\n    Offset: function (lane) { return scale(lane.Offset()); }\n  };\n};\nLane.Fill = function (lane) { return lane.Fill(); };\nLane.Label = function (lane) { return lane.Label(); };\n\nvar ThreadLane = function (group, thread) {\n  // Save the arguments\n  this.group = group;\n  this.thread = thread;\n\n  // Set the thread label\n  this.Label(thread.ShortName());\n\n  // Save the lane on the events and spans\n  var lane = this;\n  this.Events().forEach(function (evt) { evt.lane = lane; });\n  this.Spans().forEach(function (spn) { spn.lane = lane; });\n  this.Edges().filter(function (edge) { return edge.parent.lane == lane; }).forEach(function (edge) { edge.type = \"lane\"; });\n};\nThreadLane.prototype = new Lane();\nThreadLane.prototype.Events = function () { return this.thread.Events(); };\nThreadLane.prototype.Spans = function () { return this.thread.Spans(); };\nThreadLane.prototype.Edges = function () { return this.thread.Edges(); };\nThreadLane.prototype.HDD = function () { return this.thread.HDDEvents(); };\nThreadLane.prototype.Network = function () { return this.thread.NetworkEvents(); };\n\nvar TaskLane = function (group, task) {\n  this.group = group;\n  this.task = task;\n\n  this.Label(task.ID());\n\n  // Save the lane on the events and spans, in this case just the task\n  var lane = this;\n  this.task.lane = lane;\n  this.HDD().forEach(function (evt) { evt.lane = lane; });\n  this.Network().forEach(function (evt) { evt.lane = lane; });\n};\nTaskLane.prototype = new Lane();\nTaskLane.prototype.Spans = function () { return [this.task]; };\nTaskLane.prototype.HDD = function () { return this.task.HDDEvents(); };\nTaskLane.prototype.Network = function () { return this.task.NetworkEvents(); };"]},"metadata":{},"sourceType":"module"}
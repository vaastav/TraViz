{"ast":null,"code":"import * as Utils from \"../xtrace_utils\"; // JSON reports as argument, produce IDs on critical path\n\nfunction critical_path(reports, finalreport) {\n  if (finalreport == null) finalreport = reports[reports.length - 1];\n  var reportmap = {};\n\n  for (var i = 0; i < reports.length; i++) {\n    reportmap[Utils.report_id(reports[i])] = reports[i];\n  }\n\n  var cpath = [];\n  var next = finalreport;\n\n  while (next && next[\"ParentEventID\"]) {\n    cpath.push(next);\n    var parents = next[\"ParentEventID\"];\n    next = reportmap[parents[0]];\n\n    for (var i = 1; next == null && i < parents.length; i++) {\n      next = reportmap[parents[i]];\n    }\n\n    for (var i = 1; i < parents.length; i++) {\n      var candidate = reportmap[parents[i]];\n      if (reportmap[parents[i]] && Number(candidate[\"Timestamp\"]) > Number(next[\"Timestamp\"])) next = candidate;\n    }\n  }\n\n  return cpath;\n}\n\n;\nexport function filter_criticalpath_events(events) {\n  var reports = events.map(function (event) {\n    return event.report;\n  });\n  var finalevent = events[0];\n  events.forEach(function (event) {\n    if (event.Timestamp() > finalevent.Timestamp()) finalevent = event;\n  });\n  var cpath = critical_path(reports, finalevent.report);\n  var oncpath = {};\n\n  for (var i = 0; i < cpath.length; i++) {\n    oncpath[Utils.report_id(cpath[i])] = true;\n  }\n\n  return events.filter(function (event) {\n    return oncpath[event.id];\n  });\n}","map":{"version":3,"sources":["/home/stolet/TraViz/traviz_frontend/src/components/Swimlane/data/criticalpath.js"],"names":["Utils","critical_path","reports","finalreport","length","reportmap","i","report_id","cpath","next","push","parents","candidate","Number","filter_criticalpath_events","events","map","event","report","finalevent","forEach","Timestamp","oncpath","filter","id"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,iBAAvB,C,CAEA;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,WAAhC,EAA6C;AAC5C,MAAIA,WAAW,IAAI,IAAnB,EACCA,WAAW,GAAGD,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAArB;AAED,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACE,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;AACxCD,IAAAA,SAAS,CAACL,KAAK,CAACO,SAAN,CAAgBL,OAAO,CAACI,CAAD,CAAvB,CAAD,CAAT,GAAyCJ,OAAO,CAACI,CAAD,CAAhD;AACA;;AAED,MAAIE,KAAK,GAAG,EAAZ;AACA,MAAIC,IAAI,GAAGN,WAAX;;AACA,SAAOM,IAAI,IAAIA,IAAI,CAAC,eAAD,CAAnB,EAAsC;AACrCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,IAAX;AACA,QAAIE,OAAO,GAAGF,IAAI,CAAC,eAAD,CAAlB;AACAA,IAAAA,IAAI,GAAGJ,SAAS,CAACM,OAAO,CAAC,CAAD,CAAR,CAAhB;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBG,IAAI,IAAI,IAAR,IAAgBH,CAAC,GAAGK,OAAO,CAACP,MAA5C,EAAoDE,CAAC,EAArD,EAAyD;AACxDG,MAAAA,IAAI,GAAGJ,SAAS,CAACM,OAAO,CAACL,CAAD,CAAR,CAAhB;AACA;;AACD,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,OAAO,CAACP,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;AACxC,UAAIM,SAAS,GAAGP,SAAS,CAACM,OAAO,CAACL,CAAD,CAAR,CAAzB;AACA,UAAID,SAAS,CAACM,OAAO,CAACL,CAAD,CAAR,CAAT,IAAyBO,MAAM,CAACD,SAAS,CAAC,WAAD,CAAV,CAAN,GAAiCC,MAAM,CAACJ,IAAI,CAAC,WAAD,CAAL,CAApE,EACCA,IAAI,GAAGG,SAAP;AACD;AACD;;AACD,SAAOJ,KAAP;AACA;;AAAA;AAED,OAAO,SAASM,0BAAT,CAAoCC,MAApC,EAA4C;AAClD,MAAIb,OAAO,GAAGa,MAAM,CAACC,GAAP,CAAW,UAAUC,KAAV,EAAiB;AAAE,WAAOA,KAAK,CAACC,MAAb;AAAsB,GAApD,CAAd;AAEA,MAAIC,UAAU,GAAGJ,MAAM,CAAC,CAAD,CAAvB;AACAA,EAAAA,MAAM,CAACK,OAAP,CAAe,UAAUH,KAAV,EAAiB;AAC/B,QAAIA,KAAK,CAACI,SAAN,KAAoBF,UAAU,CAACE,SAAX,EAAxB,EACCF,UAAU,GAAGF,KAAb;AACD,GAHD;AAKA,MAAIT,KAAK,GAAGP,aAAa,CAACC,OAAD,EAAUiB,UAAU,CAACD,MAArB,CAAzB;AAEA,MAAII,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,KAAK,CAACJ,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACtCgB,IAAAA,OAAO,CAACtB,KAAK,CAACO,SAAN,CAAgBC,KAAK,CAACF,CAAD,CAArB,CAAD,CAAP,GAAqC,IAArC;AACA;;AAED,SAAOS,MAAM,CAACQ,MAAP,CAAc,UAAUN,KAAV,EAAiB;AAAE,WAAOK,OAAO,CAACL,KAAK,CAACO,EAAP,CAAd;AAA2B,GAA5D,CAAP;AACA","sourcesContent":["import * as Utils from \"../xtrace_utils\"\n\n// JSON reports as argument, produce IDs on critical path\nfunction critical_path(reports, finalreport) {\n\tif (finalreport == null)\n\t\tfinalreport = reports[reports.length - 1];\n\n\tvar reportmap = {};\n\tfor (var i = 0; i < reports.length; i++) {\n\t\treportmap[Utils.report_id(reports[i])] = reports[i];\n\t}\n\n\tvar cpath = [];\n\tvar next = finalreport;\n\twhile (next && next[\"ParentEventID\"]) {\n\t\tcpath.push(next);\n\t\tvar parents = next[\"ParentEventID\"];\n\t\tnext = reportmap[parents[0]];\n\t\tfor (var i = 1; next == null && i < parents.length; i++) {\n\t\t\tnext = reportmap[parents[i]];\n\t\t}\n\t\tfor (var i = 1; i < parents.length; i++) {\n\t\t\tvar candidate = reportmap[parents[i]];\n\t\t\tif (reportmap[parents[i]] && Number(candidate[\"Timestamp\"]) > Number(next[\"Timestamp\"]))\n\t\t\t\tnext = candidate;\n\t\t}\n\t}\n\treturn cpath;\n};\n\nexport function filter_criticalpath_events(events) {\n\tvar reports = events.map(function (event) { return event.report; });\n\n\tvar finalevent = events[0];\n\tevents.forEach(function (event) {\n\t\tif (event.Timestamp() > finalevent.Timestamp())\n\t\t\tfinalevent = event;\n\t});\n\n\tvar cpath = critical_path(reports, finalevent.report);\n\n\tvar oncpath = {};\n\tfor (var i = 0; i < cpath.length; i++) {\n\t\toncpath[Utils.report_id(cpath[i])] = true;\n\t}\n\n\treturn events.filter(function (event) { return oncpath[event.id]; });\n}\n"]},"metadata":{},"sourceType":"module"}
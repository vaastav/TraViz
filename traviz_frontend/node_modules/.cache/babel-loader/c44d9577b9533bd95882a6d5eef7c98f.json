{"ast":null,"code":"import _slicedToArray from \"/home/stolet/TraViz/traviz_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/stolet/TraViz/traviz_frontend/src/dc/chartTemplate.js\";\nimport React from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport * as dc from \"dc\";\n\nvar ResetButton = function ResetButton(props) {\n  return React.createElement(\"input\", {\n    class: \"btn\",\n    type: \"button\",\n    value: \"Reset\",\n    onClick: function onClick() {\n      props.chart.filterAll();\n      dc.redrawAll();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  });\n};\n\nexport var ChartTemplate = function ChartTemplate(props) {\n  /*\n  We render the dc chart using an effect. We want to pass the chart as a prop after the dc call,\n  but there is nothing by default to trigger a re-render and the prop, by default would be undefined.\n  To solve this, we hold a state key and increment it after the effect ran. \n  By passing the key to the parent div, we get a rerender once the chart is defined. \n  */\n  var context = React.useContext(CXContext);\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      chart = _React$useState2[0],\n      updateChart = _React$useState2[1];\n\n  var ndx = context.ndx;\n  var div = React.useRef(null);\n  React.useEffect(function () {\n    var newChart = props.chartFunction(div.current, ndx); // chartfunction takes the ref and does something with it\n\n    newChart.render();\n    updateChart(newChart);\n  }, 1);\n  {\n    /*Run this exactly once */\n  }\n  return React.createElement(\"div\", {\n    ref: div,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, props.title), React.createElement(ResetButton, {\n    chart: chart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/home/stolet/TraViz/traviz_frontend/src/dc/chartTemplate.js"],"names":["React","CXContext","dc","ResetButton","props","chart","filterAll","redrawAll","ChartTemplate","context","useContext","useState","updateChart","ndx","div","useRef","useEffect","newChart","chartFunction","current","render","title"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3B,SACE;AAAO,IAAA,KAAK,EAAC,KAAb;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAiC,IAAA,KAAK,EAAC,OAAvC;AACE,IAAA,OAAO,EAAE,mBAAM;AACbA,MAAAA,KAAK,CAACC,KAAN,CAAYC,SAAZ;AACAJ,MAAAA,EAAE,CAACK,SAAH;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CATD;;AAWA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAJ,KAAK,EAAI;AAClC;;;;;;AAMF,MAAMK,OAAO,GAAGT,KAAK,CAACU,UAAN,CAAiBT,SAAjB,CAAhB;;AAPoC,wBAQRD,KAAK,CAACW,QAAN,CAAe,IAAf,CARQ;AAAA;AAAA,MAQ7BN,KAR6B;AAAA,MAQvBO,WARuB;;AASpC,MAAMC,GAAG,GAAGJ,OAAO,CAACI,GAApB;AACA,MAAMC,GAAG,GAAGd,KAAK,CAACe,MAAN,CAAa,IAAb,CAAZ;AACAf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,YAAM;AACpB,QAAMC,QAAQ,GAAGb,KAAK,CAACc,aAAN,CAAoBJ,GAAG,CAACK,OAAxB,EAAiCN,GAAjC,CAAjB,CADoB,CACoC;;AAExDI,IAAAA,QAAQ,CAACG,MAAT;AACAR,IAAAA,WAAW,CAACK,QAAD,CAAX;AACD,GALD,EAKE,CALF;AAKM;AAAC;AAA2B;AAElC,SACE;AACE,IAAA,GAAG,EAAEH,GADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQV,KAAK,CAACiB,KAAd,CAHD,EAIC,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEhB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,CADF;AAQD,CA1BM","sourcesContent":["import React from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport * as dc from \"dc\";\n\nconst ResetButton = props => {\n  return (\n    <input class=\"btn\" type=\"button\" value=\"Reset\"\n      onClick={() => {\n        props.chart.filterAll();\n        dc.redrawAll();\n      }}\n    />\n  );\n};\n\nexport const ChartTemplate = props => {\n    /*\n    We render the dc chart using an effect. We want to pass the chart as a prop after the dc call,\n    but there is nothing by default to trigger a re-render and the prop, by default would be undefined.\n    To solve this, we hold a state key and increment it after the effect ran. \n    By passing the key to the parent div, we get a rerender once the chart is defined. \n    */\n  const context = React.useContext(CXContext);\n  const [chart,updateChart] = React.useState(null);\n  const ndx = context.ndx;\n  const div = React.useRef(null);\n  React.useEffect(() => {\n    const newChart = props.chartFunction(div.current, ndx); // chartfunction takes the ref and does something with it\n\n    newChart.render();\n    updateChart(newChart);\n  },1); {/*Run this exactly once */}\n\n  return (\n    <div\n      ref={div}\n    >\n     <label>{props.title}</label>\n     <ResetButton chart={chart} /> \n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
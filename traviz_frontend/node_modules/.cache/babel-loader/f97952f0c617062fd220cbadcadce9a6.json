{"ast":null,"code":"import _classCallCheck from \"/home/stolet/TraViz/traviz_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/stolet/TraViz/traviz_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/stolet/TraViz/traviz_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/stolet/TraViz/traviz_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/stolet/TraViz/traviz_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/stolet/TraViz/traviz_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/stolet/TraViz/traviz_frontend/src/components/Swimlane/Swimlane.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as d3scale from \"d3-scale\";\nimport * as VizLane from \"./data/VizLane\";\nimport * as VizGroup from \"./data/VizGroup\";\nimport * as Workload from \"./data/Workload\";\nimport * as CritPath from \"./data/criticalpath\";\nimport $ from \"jquery\";\nimport \"./Swimlane.css\";\n\nvar Swimlane =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Swimlane, _Component);\n\n  function Swimlane(props) {\n    var _this;\n\n    _classCallCheck(this, Swimlane);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Swimlane).call(this, props));\n    _this.createSwimlane = _this.createSwimlane.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Swimlane, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createSwimlane();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.createSwimlane();\n    }\n  }, {\n    key: \"createSwimlane\",\n    value: function createSwimlane() {\n      var node = this.node;\n      /* Default values for placement of the swimlane.  User should pass these */\n\n      var x = 0;\n      var y = 0;\n      var width = 500;\n      var height = 100;\n      var margin = 120;\n      /* turns on or off key components of the viz */\n\n      var properties = {\n        \"showevents\": true,\n        \"showedges\": true,\n        \"showgc\": true,\n        \"showspans\": true,\n        \"showcpath\": false\n      };\n      /* event callbacks */\n\n      var callbacks = {\n        \"refresh\": function refresh() {}\n      }; // For internal use\n\n      var sx = d3scale.scaleLinear(); // scale between global / zoomed\n\n      var brush = d3.svg.brush(); // specifies the active draw area\n\n      var axis = d3.svg.axis().orient(\"bottom\").ticks(10).tickSize(6, 0, 0); // time axis at bottom of viz\n      // Tooltips\n      // var ttGravity = $.fn.tipsy.autoBounds(Math.min(window.width(), window.height()) / 3, \"s\");\n      // var EventTooltip = makeEventTooltip(ttGravity);\n      // var GCTooltip = makeGCTooltip(ttGravity);\n      // var HDDTooltip = makeHDDTooltip(ttGravity);\n      // var NetworkTooltip = makeNetworkTooltip(ttGravity);\n      // var ThreadTooltip = makeThreadTooltip($.fn.tipsy.autoWE);\n\n      /* Main rendering function */\n\n      function swimlane(selection) {\n        selection.each(function (layout) {\n          // For spacing out the threads\n          sx.range([0, width]);\n          var sy = d3scale.scaleLinear().domain([0, layout.Height()]).range([0, height]); // Create the clip def\n\n          var defs = d3.select(node).selectAll(\".clipdef\").data([layout]);\n          defs.enter().append(\"defs\").attr(\"class\", \"clipdef\").append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\");\n          defs.select(\"rect\").attr(\"width\", width).attr(\"height\", height);\n          defs.exit().remove(); // Add all of the containers for the viz\n\n          var main = d3.select(node).selectAll(\".main\").data([layout]);\n          var newmain = main.enter().append('g').attr(\"class\", \"main\");\n          var newlanes = newmain.append('g').attr(\"class\", \"lanes\");\n          newlanes.append(\"g\").attr(\"class\", \"lane-background\");\n          newlanes.append(\"g\").attr(\"class\", \"axis\");\n          newlanes.append(\"g\").attr(\"class\", \"spans\");\n          newlanes.append(\"g\").attr(\"class\", \"timeindicator\").append(\"line\");\n          newlanes.append(\"g\").attr(\"class\", \"edges\");\n          newlanes.append(\"g\").attr(\"class\", \"gc\");\n          newlanes.append(\"g\").attr(\"class\", \"hdd\");\n          newlanes.append(\"g\").attr(\"class\", \"network\");\n          newlanes.append(\"g\").attr(\"class\", \"events\");\n          var newmargin = newmain.append('g').attr(\"class\", \"margin\");\n          newmargin.append(\"g\").attr(\"class\", \"lane-labels\");\n          newmargin.append(\"g\").attr(\"class\", \"lane-controls\");\n          main.exit().remove(); // Position the containers\n\n          main.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\").attr(\"width\", width).attr(\"height\", height);\n          main.selectAll(\".lanes\").attr(\"transform\", \"translate(\" + margin + \",0)\"); // Draw the thread backgrounds\n\n          var lanes = main.select(\".lane-background\").selectAll(\"rect\").data(layout.Lanes());\n          lanes.enter().append('rect').attr('fill', VizLane.Lane.Fill);\n          lanes.attr('x', 0).attr('y', VizLane.Lane.Scale(sy).Offset).attr('width', width).attr('height', VizLane.Lane.Scale(sy).Height);\n          lanes.exit().remove(); // Draw the lane labels\n\n          var lanelabels = main.select(\".lane-labels\").selectAll(\"text\").data(layout.Lanes());\n          lanelabels.enter().append(\"text\").attr('text-anchor', 'end').attr('fill', function (d) {\n            return d.Fill().darker(1);\n          }).text(VizLane.Lane.Label); //.call(ThreadTooltip);\n\n          lanelabels.attr('x', margin - 12).attr('y', function (d) {\n            return sy(d.Offset() + d.Height() * 0.5);\n          }).attr(\"dominant-baseline\", \"middle\");\n          lanelabels.exit().remove(); // Add the hit area\n\n          var lanecontrols = main.select(\".lane-controls\").selectAll(\"rect.groupcontrols\").data(layout.Groups());\n          lanecontrols.enter().append(\"rect\").attr(\"class\", \"groupcontrols\");\n          lanecontrols.attr(\"x\", margin - 6).attr(\"y\", VizGroup.Group.Scale(sy).Offset).attr(\"width\", 4).attr(\"height\", VizGroup.Group.Scale(sy).Height).attr(\"fill\", function (d) {\n            return d.Fill().darker(1);\n          });\n          lanecontrols.exit().remove(); // Place the time axis\n\n          main.select(\".axis\").attr(\"transform\", \"translate(0,\" + height + \")\"); // Update the clip paths of the visualization elements\n\n          main.select(\".spans\").attr(\"clip-path\", \"url(#clip)\");\n          main.select(\".timeindicator\").attr(\"clip-path\", \"url(#clip)\");\n          main.select(\".edges\").attr(\"clip-path\", \"url(#clip)\");\n          main.select(\".gc\").attr(\"clip-path\", \"url(#clip)\");\n          main.select(\".hdd\").attr(\"clip-path\", \"url(#clip)\");\n          main.select(\".network\").attr(\"clip-path\", \"url(#clip)\");\n          main.select(\".events\").attr(\"clip-path\", \"url(#clip)\"); // Add a mouse marker\n\n          main.select(\".timeindicator line\").attr('y1', 0).attr('y2', height);\n          main.on(\"mousemove\", function (e) {\n            var mousex = d3.mouse(node)[0] - margin;\n            d3.select(node).select(\".timeindicator line\").attr('x1', mousex).attr('x2', mousex);\n          }); // Attach the zoom behaviour.  A little bit hairy for now\n\n          var moving = false,\n              lastx = null;\n          d3.select(node).on(\"mousedown\", function () {\n            moving = true;\n            lastx = null;\n          });\n          d3.select(node).on(\"mouseup\", function () {\n            moving = false;\n            lastx = null;\n          });\n          var zoom = d3.zoom();\n          zoom.on(\"zoom\", function () {\n            var data = layout.workload;\n            var datalen = data.max - data.min;\n            var rangemin = data.min - datalen / 10.0;\n            var rangemax = data.max + datalen / 10.0;\n            var mousex = sx.invert(d3.mouse(node)[0] - margin);\n            var newx0 = brush.extent()[0];\n            var newx1 = brush.extent()[1]; // Apply any translate\n\n            if (moving) {\n              if (lastx != null) {\n                var deltax = sx.invert(lastx) - sx.invert(d3.event.translate[0]);\n\n                if ((newx0 > rangemin || deltax > 0) && (newx1 < rangemax || deltax < 0)) {\n                  newx0 += deltax;\n                  newx1 += deltax;\n                  mousex += deltax;\n                }\n              }\n\n              lastx = d3.event.translate[0];\n            } // do the zoom in or out, clamping if necessary\n\n\n            newx0 = mousex + (newx0 - mousex) / d3.event.scale;\n            newx1 = mousex + (newx1 - mousex) / d3.event.scale;\n            newx0 = Math.max(newx0, rangemin);\n            newx1 = Math.min(newx1, rangemax);\n\n            if (newx0 > newx1) {\n              console.log(\"inverted\", newx0, newx1, d3.event.scale, brush.extent());\n              var swap = newx0;\n              newx0 = newx1;\n              newx1 = swap;\n            } // apply the extent and refresh\n\n\n            brush.extent([newx0, newx1]);\n            callbacks[\"refresh\"].call(node);\n            zoom.scale(1);\n          });\n          zoom.call(d3.select(node)); // Remove any of the actual viz.  Done here because y co-ords only update on a redraw, so optimization to put here rather than\n          // update y co-ords unnecessarily on each refresh\n\n          main.select(\".spans\").selectAll(\"rect\").remove();\n          main.select(\".events\").selectAll(\"circle\").remove();\n          main.select(\".edges\").selectAll(\"line\").remove();\n          main.select(\".gc\").selectAll(\"rect\").remove();\n          main.select(\".hdd\").selectAll(\"rect\").remove();\n          main.select(\".network\").selectAll(\"rect\").remove();\n        });\n      }\n\n      ;\n\n      swimlane.refresh = function (selection) {\n        selection.each(function (layout) {\n          var main = d3.select(node).select(\".main\"); // Update the x scale from the brush, create a y scale\n\n          sx.domain(brush.extent());\n          var sy = d3scale.scaleLinear().domain([0, layout.Height()]).range([0, height]);\n          var minExtent = sx.domain()[0];\n          var maxExtent = sx.domain()[1];\n          var start = new Date().getTime(); // Figure out which data should be drawn\n\n          var spandata = layout.Spans().filter(function (d) {\n            return d.Start() < maxExtent && d.End() > minExtent;\n          });\n          var gcdata = layout.GC().filter(function (d) {\n            return d.start < maxExtent && d.end > minExtent;\n          });\n          var hdddata = layout.HDD().filter(function (d) {\n            return d.start < maxExtent && d.end > minExtent;\n          });\n          var networkdata = layout.Network().filter(function (d) {\n            return d.start < maxExtent && d.end > minExtent;\n          });\n          var eventdata = layout.Events();\n          if (properties.showcpath == true) eventdata = CritPath.filter_criticalpath_events(eventdata);\n          eventdata = eventdata.filter(function (d) {\n            return d.Timestamp() > minExtent && d.Timestamp() < maxExtent;\n          });\n          var edgedata = layout.Edges();\n          if (properties.showcpath == true) edgedata = edgedata.filter(function (edge) {\n            return $.inArray(edge.parent, eventdata) != -1 && $.inArray(edge.child, eventdata) != -1;\n          });\n          edgedata = edgedata.filter(function (d) {\n            return d.parent.Timestamp() < maxExtent && d.child.Timestamp() > minExtent;\n          });\n          start = new Date().getTime(); // Update the span rects\n\n          if (properties.showspans == true) {\n            var spans = main.select(\".spans\").selectAll(\"rect\").data(spandata, Workload.XSpan.getID);\n            spans.enter().append(\"rect\").classed(\"waiting\", function (d) {\n              return d.waiting;\n            }).attr('y', function (d) {\n              return sy(d.lane.Offset() + 0.1 * d.lane.Height());\n            }).attr('height', function (d) {\n              return sy(0.8 * d.lane.Height());\n            });\n            spans.attr('x', function (d) {\n              return sx(d.Start());\n            }).attr('width', function (d) {\n              return sx(d.End()) - sx(d.Start());\n            });\n            spans.exit().remove();\n          } else {\n            main.select(\".spans\").selectAll(\"rect\").remove();\n          } // Update the event dots\n\n\n          if (properties.showevents == true) {\n            var events = main.select(\".events\").selectAll(\"circle\").data(eventdata, Workload.XEvent.getID);\n            events.enter().append('circle').attr(\"class\", function (d) {\n              return d.type;\n            }).attr('cy', function (d) {\n              return sy(d.lane.Offset() + 0.5 * d.lane.Height());\n            }).attr('r', function (d) {\n              return d.type == \"event\" ? 5 : 2;\n            }).attr('id', function (d) {\n              return d.ID();\n            }); //.call(EventTooltip);\n\n            events.attr('cx', function (d) {\n              return sx(d.Timestamp());\n            });\n            events.exit().remove();\n          } else {\n            main.select(\".events\").selectAll(\"circle\").remove();\n          } // Update the causality edges\n\n\n          if (properties.showedges == true) {\n            var edges = main.select(\".edges\").selectAll(\"line\").data(edgedata, function (d) {\n              return d.id;\n            });\n            edges.enter().append(\"line\").attr('y1', function (d) {\n              return sy(d.parent.lane.Offset() + 0.5 * d.parent.lane.Height());\n            }).attr('y2', function (d) {\n              return sy(d.child.lane.Offset() + 0.5 * d.child.lane.Height());\n            });\n            edges.exit().remove();\n            edges.attr('x1', function (d) {\n              return sx(d.parent.Timestamp());\n            }).attr('x2', function (d) {\n              return sx(d.child.Timestamp());\n            }).attr('class', function (d) {\n              return d.type;\n            });\n          } else {\n            main.select(\".edges\").selectAll(\"line\").remove();\n          } // Update the GC blocks\n\n\n          if (properties.showgc == true) {\n            var gc = main.select(\".gc\").selectAll(\"rect\").data(gcdata, Workload.GCEvent.getID);\n            gc.enter().append(\"rect\").attr('y', function (d) {\n              return sy(d.group.Offset());\n            }).attr('height', function (d) {\n              return sy(d.group.Height());\n            }); //.call(GCTooltip);\n\n            gc.attr('x', function (d) {\n              return sx(d.start);\n            }).attr('width', function (d) {\n              return sx(d.end) - sx(d.start);\n            });\n            gc.exit().remove();\n          } else {\n            main.select(\".gc\").selectAll(\"rect\").remove();\n          } // Update the HDD blocks\n\n\n          var hdd = main.select(\".hdd\").selectAll(\"rect\").data(hdddata, Workload.XEvent.getID);\n          hdd.enter().append('rect').attr('class', function (d) {\n            return d.type;\n          }).attr('y', function (d) {\n            return sy(d.lane.Offset() + d.lane.Height() * 0.25);\n          }).attr('height', function (d) {\n            return sy(d.lane.Height() * 0.5);\n          }); //.call(HDDTooltip);\n\n          hdd.attr('x', function (d) {\n            return sx(d.start);\n          }).attr('width', function (d) {\n            return sx(d.end) - sx(d.start);\n          });\n          hdd.exit().remove(); // Update the network blocks\n\n          var network = main.select(\".network\").selectAll(\"rect\").data(networkdata, Workload.XEvent.getID);\n          network.enter().append('rect').attr('class', function (d) {\n            return d.type;\n          }).attr('y', function (d) {\n            return sy(d.lane.Offset() + d.lane.Height() * 0.25);\n          }).attr('height', function (d) {\n            return sy(d.lane.Height() * 0.5);\n          }); //.call(NetworkTooltip);\n\n          network.attr('x', function (d) {\n            return sx(d.start);\n          }).attr('width', function (d) {\n            return sx(d.end) - sx(d.start);\n          });\n          network.exit().remove(); // Update the axis\n\n          var norm = d3scale.scaleLinear().range([0, width]).domain([brush.extent()[0] - layout.workload.min, brush.extent()[1] - layout.workload.min]);\n          main.select(\".axis\").call(axis.scale(norm));\n        });\n      };\n\n      swimlane.on = function (evt, cb) {\n        if (cb == null) return callbacks[evt];\n        callbacks[evt] = cb;\n        return swimlane;\n      };\n\n      swimlane.brush = function (_) {\n        if (!arguments.length) return brush;\n        brush = _;\n        return swimlane;\n      };\n\n      swimlane.x = function (_) {\n        if (!arguments.length) return x;\n        x = _;\n        return swimlane;\n      };\n\n      swimlane.y = function (_) {\n        if (!arguments.length) return y;\n        y = _;\n        return swimlane;\n      };\n\n      swimlane.width = function (_) {\n        if (!arguments.length) return width;\n        width = _;\n        return swimlane;\n      };\n\n      swimlane.height = function (_) {\n        if (!arguments.length) return height;\n        height = _;\n        return swimlane;\n      };\n\n      swimlane.margin = function (_) {\n        if (!arguments.length) return margin;\n        margin = _;\n        return swimlane;\n      };\n\n      swimlane.property = function (key, value) {\n        properties[key] = value;\n        swimlane.on(\"refresh\").call(node);\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"svg\", {\n        ref: function ref(node) {\n          return _this2.node = node;\n        },\n        width: 500,\n        height: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Swimlane;\n}(Component);\n\nexport default Swimlane;","map":{"version":3,"sources":["/home/stolet/TraViz/traviz_frontend/src/components/Swimlane/Swimlane.js"],"names":["React","Component","d3","d3scale","VizLane","VizGroup","Workload","CritPath","$","Swimlane","props","createSwimlane","bind","node","x","y","width","height","margin","properties","callbacks","sx","scaleLinear","brush","svg","axis","orient","ticks","tickSize","swimlane","selection","each","layout","range","sy","domain","Height","defs","select","selectAll","data","enter","append","attr","exit","remove","main","newmain","newlanes","newmargin","lanes","Lanes","Lane","Fill","Scale","Offset","lanelabels","d","darker","text","Label","lanecontrols","Groups","Group","on","e","mousex","mouse","moving","lastx","zoom","workload","datalen","max","min","rangemin","rangemax","invert","newx0","extent","newx1","deltax","event","translate","scale","Math","console","log","swap","call","refresh","minExtent","maxExtent","start","Date","getTime","spandata","Spans","filter","Start","End","gcdata","GC","end","hdddata","HDD","networkdata","Network","eventdata","Events","showcpath","filter_criticalpath_events","Timestamp","edgedata","Edges","edge","inArray","parent","child","showspans","spans","XSpan","getID","classed","waiting","lane","showevents","events","XEvent","type","ID","showedges","edges","id","showgc","gc","GCEvent","group","hdd","network","norm","evt","cb","_","arguments","length","property","key","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as d3scale from \"d3-scale\"\nimport * as VizLane from \"./data/VizLane\"\nimport * as VizGroup from \"./data/VizGroup\"\nimport * as Workload from \"./data/Workload\"\nimport * as CritPath from \"./data/criticalpath\"\nimport $ from \"jquery\"\nimport \"./Swimlane.css\";\n\nclass Swimlane extends Component {\n\n    constructor(props) {\n        super(props);\n        this.createSwimlane = this.createSwimlane.bind(this);\n    }\n\n    componentDidMount() {\n        this.createSwimlane();\n    }\n\n    componentDidUpdate() {\n        this.createSwimlane();\n    }\n\n    createSwimlane() {\n        const node = this.node;\n        /* Default values for placement of the swimlane.  User should pass these */\n        var x = 0;\n        var y = 0;\n        var width = 500;\n        var height = 100;\n        var margin = 120;\n\n        /* turns on or off key components of the viz */\n        var properties = {\n            \"showevents\": true,\n            \"showedges\": true,\n            \"showgc\": true,\n            \"showspans\": true,\n            \"showcpath\": false\n        };\n\n        /* event callbacks */\n        var callbacks = {\n            \"refresh\": function () { }\n        };\n\n        // For internal use\n        var sx = d3scale.scaleLinear(); // scale between global / zoomed\n        var brush = d3.svg.brush(); // specifies the active draw area\n        var axis = d3.svg.axis().orient(\"bottom\").ticks(10).tickSize(6, 0, 0); // time axis at bottom of viz\n\n        // Tooltips\n        // var ttGravity = $.fn.tipsy.autoBounds(Math.min(window.width(), window.height()) / 3, \"s\");\n        // var EventTooltip = makeEventTooltip(ttGravity);\n        // var GCTooltip = makeGCTooltip(ttGravity);\n        // var HDDTooltip = makeHDDTooltip(ttGravity);\n        // var NetworkTooltip = makeNetworkTooltip(ttGravity);\n        // var ThreadTooltip = makeThreadTooltip($.fn.tipsy.autoWE);\n\n        /* Main rendering function */\n        function swimlane(selection) {\n\n            selection.each(function (layout) {\n                // For spacing out the threads\n                sx.range([0, width]);\n                var sy = d3scale.scaleLinear().domain([0, layout.Height()]).range([0, height]);\n\n                // Create the clip def\n                var defs = d3.select(node).selectAll(\".clipdef\").data([layout]);\n                defs.enter().append(\"defs\").attr(\"class\", \"clipdef\").append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\");\n                defs.select(\"rect\").attr(\"width\", width).attr(\"height\", height);\n                defs.exit().remove();\n\n                // Add all of the containers for the viz\n                var main = d3.select(node).selectAll(\".main\").data([layout]);\n                var newmain = main.enter().append('g').attr(\"class\", \"main\");\n                var newlanes = newmain.append('g').attr(\"class\", \"lanes\");\n                newlanes.append(\"g\").attr(\"class\", \"lane-background\");\n                newlanes.append(\"g\").attr(\"class\", \"axis\");\n                newlanes.append(\"g\").attr(\"class\", \"spans\");\n                newlanes.append(\"g\").attr(\"class\", \"timeindicator\").append(\"line\");\n                newlanes.append(\"g\").attr(\"class\", \"edges\");\n                newlanes.append(\"g\").attr(\"class\", \"gc\");\n                newlanes.append(\"g\").attr(\"class\", \"hdd\");\n                newlanes.append(\"g\").attr(\"class\", \"network\");\n                newlanes.append(\"g\").attr(\"class\", \"events\");\n                var newmargin = newmain.append('g').attr(\"class\", \"margin\");\n                newmargin.append(\"g\").attr(\"class\", \"lane-labels\");\n                newmargin.append(\"g\").attr(\"class\", \"lane-controls\");\n                main.exit().remove();\n\n                // Position the containers\n                main.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\").attr(\"width\", width).attr(\"height\", height);\n                main.selectAll(\".lanes\").attr(\"transform\", \"translate(\" + margin + \",0)\");\n\n                // Draw the thread backgrounds\n                var lanes = main.select(\".lane-background\").selectAll(\"rect\").data(layout.Lanes());\n                lanes.enter().append('rect').attr('fill', VizLane.Lane.Fill);\n                lanes.attr('x', 0).attr('y', VizLane.Lane.Scale(sy).Offset).attr('width', width).attr('height', VizLane.Lane.Scale(sy).Height);\n                lanes.exit().remove();\n\n                // Draw the lane labels\n                var lanelabels = main.select(\".lane-labels\").selectAll(\"text\").data(layout.Lanes());\n                lanelabels.enter().append(\"text\").attr('text-anchor', 'end').attr('fill', function (d) { return d.Fill().darker(1); })\n                    .text(VizLane.Lane.Label)//.call(ThreadTooltip);\n                lanelabels.attr('x', margin - 12).attr('y', function (d) { return sy(d.Offset() + d.Height() * 0.5); }).attr(\"dominant-baseline\", \"middle\");\n                lanelabels.exit().remove();\n\n                // Add the hit area\n                var lanecontrols = main.select(\".lane-controls\").selectAll(\"rect.groupcontrols\").data(layout.Groups());\n                lanecontrols.enter().append(\"rect\").attr(\"class\", \"groupcontrols\");\n                lanecontrols.attr(\"x\", margin - 6).attr(\"y\", VizGroup.Group.Scale(sy).Offset).attr(\"width\", 4).attr(\"height\", VizGroup.Group.Scale(sy).Height)\n                    .attr(\"fill\", function (d) { return d.Fill().darker(1); });\n                lanecontrols.exit().remove();\n\n                // Place the time axis\n                main.select(\".axis\").attr(\"transform\", \"translate(0,\" + height + \")\");\n\n                // Update the clip paths of the visualization elements\n                main.select(\".spans\").attr(\"clip-path\", \"url(#clip)\");\n                main.select(\".timeindicator\").attr(\"clip-path\", \"url(#clip)\");\n                main.select(\".edges\").attr(\"clip-path\", \"url(#clip)\");\n                main.select(\".gc\").attr(\"clip-path\", \"url(#clip)\");\n                main.select(\".hdd\").attr(\"clip-path\", \"url(#clip)\");\n                main.select(\".network\").attr(\"clip-path\", \"url(#clip)\");\n                main.select(\".events\").attr(\"clip-path\", \"url(#clip)\");\n\n                // Add a mouse marker\n                main.select(\".timeindicator line\").attr('y1', 0).attr('y2', height);\n                main.on(\"mousemove\", function (e) {\n                    var mousex = d3.mouse(node)[0] - margin;\n                    d3.select(node).select(\".timeindicator line\").attr('x1', mousex).attr('x2', mousex);\n                });\n\n                // Attach the zoom behaviour.  A little bit hairy for now\n                var moving = false,\n                    lastx = null;\n                d3.select(node).on(\"mousedown\", function () { moving = true; lastx = null; });\n                d3.select(node).on(\"mouseup\", function () { moving = false; lastx = null; });\n\n                var zoom = d3.zoom();\n                zoom.on(\"zoom\", function () {\n                    var data = layout.workload;\n                    var datalen = data.max - data.min;\n                    var rangemin = data.min - datalen / 10.0;\n                    var rangemax = data.max + datalen / 10.0;\n\n                    var mousex = sx.invert(d3.mouse(node)[0] - margin);\n\n                    var newx0 = brush.extent()[0];\n                    var newx1 = brush.extent()[1];\n\n                    // Apply any translate\n                    if (moving) {\n                        if (lastx != null) {\n                            var deltax = sx.invert(lastx) - sx.invert(d3.event.translate[0]);\n                            if ((newx0 > rangemin || deltax > 0) && (newx1 < rangemax || deltax < 0)) {\n                                newx0 += deltax;\n                                newx1 += deltax;\n                                mousex += deltax;\n                            }\n                        }\n                        lastx = d3.event.translate[0];\n                    }\n\n                    // do the zoom in or out, clamping if necessary\n                    newx0 = mousex + ((newx0 - mousex) / d3.event.scale);\n                    newx1 = mousex + ((newx1 - mousex) / d3.event.scale);\n                    newx0 = Math.max(newx0, rangemin);\n                    newx1 = Math.min(newx1, rangemax);\n                    if (newx0 > newx1) {\n                        console.log(\"inverted\", newx0, newx1, d3.event.scale, brush.extent());\n                        var swap = newx0;\n                        newx0 = newx1;\n                        newx1 = swap;\n                    }\n\n                    // apply the extent and refresh\n                    brush.extent([newx0, newx1]);\n                    callbacks[\"refresh\"].call(node);\n                    zoom.scale(1);\n                });\n                zoom.call(d3.select(node));\n\n                // Remove any of the actual viz.  Done here because y co-ords only update on a redraw, so optimization to put here rather than\n                // update y co-ords unnecessarily on each refresh\n                main.select(\".spans\").selectAll(\"rect\").remove();\n                main.select(\".events\").selectAll(\"circle\").remove();\n                main.select(\".edges\").selectAll(\"line\").remove();\n                main.select(\".gc\").selectAll(\"rect\").remove();\n                main.select(\".hdd\").selectAll(\"rect\").remove();\n                main.select(\".network\").selectAll(\"rect\").remove();\n            });\n\n        };\n\n        swimlane.refresh = function (selection) {\n            selection.each(function (layout) {\n                var main = d3.select(node).select(\".main\");\n\n                // Update the x scale from the brush, create a y scale\n                sx.domain(brush.extent());\n                var sy = d3scale.scaleLinear().domain([0, layout.Height()]).range([0, height]);\n\n                var minExtent = sx.domain()[0];\n                var maxExtent = sx.domain()[1];\n\n                var start = new Date().getTime();\n\n                // Figure out which data should be drawn\n                var spandata = layout.Spans().filter(function (d) { return d.Start() < maxExtent && d.End() > minExtent; });\n                var gcdata = layout.GC().filter(function (d) { return d.start < maxExtent && d.end > minExtent; });\n                var hdddata = layout.HDD().filter(function (d) { return d.start < maxExtent && d.end > minExtent; });\n                var networkdata = layout.Network().filter(function (d) { return d.start < maxExtent && d.end > minExtent; });\n\n                var eventdata = layout.Events();\n                if (properties.showcpath == true)\n                    eventdata = CritPath.filter_criticalpath_events(eventdata);\n                eventdata = eventdata.filter(function (d) { return d.Timestamp() > minExtent && d.Timestamp() < maxExtent; });\n\n                var edgedata = layout.Edges();\n                if (properties.showcpath == true)\n                    edgedata = edgedata.filter(function (edge) { return $.inArray(edge.parent, eventdata) != -1 && $.inArray(edge.child, eventdata) != -1; });\n                edgedata = edgedata.filter(function (d) { return d.parent.Timestamp() < maxExtent && d.child.Timestamp() > minExtent; });\n\n\n                start = new Date().getTime();\n                // Update the span rects\n                if (properties.showspans == true) {\n                    var spans = main.select(\".spans\").selectAll(\"rect\").data(spandata, Workload.XSpan.getID);\n                    spans.enter().append(\"rect\").classed(\"waiting\", function (d) { return d.waiting; })\n                        .attr('y', function (d) { return sy(d.lane.Offset() + 0.1 * d.lane.Height()); })\n                        .attr('height', function (d) { return sy(0.8 * d.lane.Height()); });\n                    spans.attr('x', function (d) { return sx(d.Start()); })\n                        .attr('width', function (d) { return sx(d.End()) - sx(d.Start()); });\n                    spans.exit().remove();\n                } else {\n                    main.select(\".spans\").selectAll(\"rect\").remove();\n                }\n\n                // Update the event dots\n                if (properties.showevents == true) {\n                    var events = main.select(\".events\").selectAll(\"circle\").data(eventdata, Workload.XEvent.getID);\n                    events.enter().append('circle').attr(\"class\", function (d) { return d.type; })\n                        .attr('cy', function (d) { return sy(d.lane.Offset() + 0.5 * d.lane.Height()); })\n                        .attr('r', function (d) { return d.type == \"event\" ? 5 : 2; })\n                        .attr('id', function (d) { return d.ID(); })\n                    //.call(EventTooltip);\n                    events.attr('cx', function (d) { return sx(d.Timestamp()); });\n                    events.exit().remove();\n                } else {\n                    main.select(\".events\").selectAll(\"circle\").remove();\n                }\n\n                // Update the causality edges\n                if (properties.showedges == true) {\n                    var edges = main.select(\".edges\").selectAll(\"line\").data(edgedata, function (d) { return d.id; });\n                    edges.enter().append(\"line\")\n                        .attr('y1', function (d) { return sy(d.parent.lane.Offset() + 0.5 * d.parent.lane.Height()); })\n                        .attr('y2', function (d) { return sy(d.child.lane.Offset() + 0.5 * d.child.lane.Height()); });\n                    edges.exit().remove();\n                    edges.attr('x1', function (d) { return sx(d.parent.Timestamp()); })\n                        .attr('x2', function (d) { return sx(d.child.Timestamp()); })\n                        .attr('class', function (d) { return d.type; });\n                } else {\n                    main.select(\".edges\").selectAll(\"line\").remove();\n                }\n\n                // Update the GC blocks\n                if (properties.showgc == true) {\n                    var gc = main.select(\".gc\").selectAll(\"rect\").data(gcdata, Workload.GCEvent.getID);\n                    gc.enter().append(\"rect\").attr('y', function (d) { return sy(d.group.Offset()); })\n                        .attr('height', function (d) { return sy(d.group.Height()); })//.call(GCTooltip);\n                    gc.attr('x', function (d) { return sx(d.start); }).attr('width', function (d) { return sx(d.end) - sx(d.start); });\n                    gc.exit().remove();\n                } else {\n                    main.select(\".gc\").selectAll(\"rect\").remove();\n                }\n\n                // Update the HDD blocks\n                var hdd = main.select(\".hdd\").selectAll(\"rect\").data(hdddata, Workload.XEvent.getID);\n                hdd.enter().append('rect').attr('class', function (d) { return d.type; })\n                    .attr('y', function (d) { return sy(d.lane.Offset() + d.lane.Height() * 0.25); })\n                    .attr('height', function (d) { return sy(d.lane.Height() * 0.5); })\n                //.call(HDDTooltip);\n                hdd.attr('x', function (d) { return sx(d.start); })\n                    .attr('width', function (d) { return sx(d.end) - sx(d.start); });\n                hdd.exit().remove();\n\n                // Update the network blocks\n                var network = main.select(\".network\").selectAll(\"rect\").data(networkdata, Workload.XEvent.getID);\n                network.enter().append('rect').attr('class', function (d) { return d.type; })\n                    .attr('y', function (d) { return sy(d.lane.Offset() + d.lane.Height() * 0.25); })\n                    .attr('height', function (d) { return sy(d.lane.Height() * 0.5); })\n                //.call(NetworkTooltip);\n                network.attr('x', function (d) { return sx(d.start); })\n                    .attr('width', function (d) { return sx(d.end) - sx(d.start); });\n                network.exit().remove();\n\n                // Update the axis\n                var norm = d3scale.scaleLinear().range([0, width]).domain([brush.extent()[0] - layout.workload.min, brush.extent()[1] - layout.workload.min]);\n                main.select(\".axis\").call(axis.scale(norm));\n            });\n        };\n\n        swimlane.on = function (evt, cb) {\n            if (cb == null)\n                return callbacks[evt];\n            callbacks[evt] = cb;\n            return swimlane;\n        };\n\n        swimlane.brush = function (_) { if (!arguments.length) return brush; brush = _; return swimlane; };\n        swimlane.x = function (_) { if (!arguments.length) return x; x = _; return swimlane; };\n        swimlane.y = function (_) { if (!arguments.length) return y; y = _; return swimlane; };\n        swimlane.width = function (_) { if (!arguments.length) return width; width = _; return swimlane; };\n        swimlane.height = function (_) { if (!arguments.length) return height; height = _; return swimlane; };\n        swimlane.margin = function (_) { if (!arguments.length) return margin; margin = _; return swimlane; };\n        swimlane.property = function (key, value) { properties[key] = value; swimlane.on(\"refresh\").call(node); };\n    }\n\n    render() {\n        return <svg ref={node => this.node = node} width={500} height={500}></svg>\n    }\n}\n\nexport default Swimlane;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*!\n *  dc 2.2.2\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function () {\n  function _dc(d3, crossfilter) {\n    'use strict';\n    /**\n     * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n     * anything else into the global name space.\n     *\n     * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n     * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n     * chaining because they return values that are not the chart, although some,\n     * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n     * return values that are themselves chainable d3 objects.\n     * @namespace dc\n     * @version 2.2.2\n     * @example\n     * // Example chaining\n     * chart.width(300)\n     *      .height(300)\n     *      .filter('sunday');\n     */\n\n    /*jshint -W079*/\n\n    var dc = {\n      version: '2.2.2',\n      constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n      },\n      _renderlet: null\n    };\n    /*jshint +W079*/\n\n    /**\n     * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n     * and the default group.\n     *\n     * A chart group often corresponds to a crossfilter instance. It specifies\n     * the set of charts which should be updated when a filter changes on one of the charts or when the\n     * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n     * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n     * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n     * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n     *\n     * @namespace chartRegistry\n     * @memberof dc\n     * @type {{has, register, deregister, clear, list}}\n     */\n\n    dc.chartRegistry = function () {\n      // chartGroup:string => charts:array\n      var _chartMap = {};\n\n      function initializeChartGroup(group) {\n        if (!group) {\n          group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n          _chartMap[group] = [];\n        }\n\n        return group;\n      }\n\n      return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function has(chart) {\n          for (var e in _chartMap) {\n            if (_chartMap[e].indexOf(chart) >= 0) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function register(chart, group) {\n          group = initializeChartGroup(group);\n\n          _chartMap[group].push(chart);\n        },\n\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function deregister(chart, group) {\n          group = initializeChartGroup(group);\n\n          for (var i = 0; i < _chartMap[group].length; i++) {\n            if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n              _chartMap[group].splice(i, 1);\n\n              break;\n            }\n          }\n        },\n\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function clear(group) {\n          if (group) {\n            delete _chartMap[group];\n          } else {\n            _chartMap = {};\n          }\n        },\n\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function list(group) {\n          group = initializeChartGroup(group);\n          return _chartMap[group];\n        }\n      };\n    }();\n    /**\n     * Add given chart instance to the given group, creating the group if necessary.\n     * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n     * @memberof dc\n     * @method registerChart\n     * @param {Object} chart dc.js chart instance\n     * @param {String} [group] Group name\n     */\n\n\n    dc.registerChart = function (chart, group) {\n      dc.chartRegistry.register(chart, group);\n    };\n    /**\n     * Remove given chart instance from the given group, creating the group if necessary.\n     * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n     * @memberof dc\n     * @method deregisterChart\n     * @param {Object} chart dc.js chart instance\n     * @param {String} [group] Group name\n     */\n\n\n    dc.deregisterChart = function (chart, group) {\n      dc.chartRegistry.deregister(chart, group);\n    };\n    /**\n     * Determine if a given chart instance resides in any group in the registry.\n     * @memberof dc\n     * @method hasChart\n     * @param {Object} chart dc.js chart instance\n     * @returns {Boolean}\n     */\n\n\n    dc.hasChart = function (chart) {\n      return dc.chartRegistry.has(chart);\n    };\n    /**\n     * Clear given group if one is provided, otherwise clears all groups.\n     * @memberof dc\n     * @method deregisterAllCharts\n     * @param {String} group Group name\n     */\n\n\n    dc.deregisterAllCharts = function (group) {\n      dc.chartRegistry.clear(group);\n    };\n    /**\n     * Clear all filters on all charts within the given chart group. If the chart group is not given then\n     * only charts that belong to the default chart group will be reset.\n     * @memberof dc\n     * @method filterAll\n     * @param {String} [group]\n     */\n\n\n    dc.filterAll = function (group) {\n      var charts = dc.chartRegistry.list(group);\n\n      for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n      }\n    };\n    /**\n     * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n     * not given then only charts that belong to the default chart group will be reset.\n     * @memberof dc\n     * @method refocusAll\n     * @param {String} [group]\n     */\n\n\n    dc.refocusAll = function (group) {\n      var charts = dc.chartRegistry.list(group);\n\n      for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n          charts[i].focus();\n        }\n      }\n    };\n    /**\n     * Re-render all charts belong to the given chart group. If the chart group is not given then only\n     * charts that belong to the default chart group will be re-rendered.\n     * @memberof dc\n     * @method renderAll\n     * @param {String} [group]\n     */\n\n\n    dc.renderAll = function (group) {\n      var charts = dc.chartRegistry.list(group);\n\n      for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n      }\n\n      if (dc._renderlet !== null) {\n        dc._renderlet(group);\n      }\n    };\n    /**\n     * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n     * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n     * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n     * from scratch.\n     * @memberof dc\n     * @method redrawAll\n     * @param {String} [group]\n     */\n\n\n    dc.redrawAll = function (group) {\n      var charts = dc.chartRegistry.list(group);\n\n      for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n      }\n\n      if (dc._renderlet !== null) {\n        dc._renderlet(group);\n      }\n    };\n    /**\n     * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n     * immediately.\n     * @memberof dc\n     * @member disableTransitions\n     * @type {Boolean}\n     * @default false\n     */\n\n\n    dc.disableTransitions = false;\n    /**\n     * Start a transition on a selection if transitions are globally enabled\n     * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n     * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n     * allows a common code path for both cases.\n     * @memberof dc\n     * @method transition\n     * @param {d3.selection} selection - the selection to be transitioned\n     * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n     * function returning the duration, or 0 for no transition\n     * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n     * returning the delay, or 0 for no delay\n     * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n     * elements are needed)\n     * @returns {d3.transition|d3.selection}\n     */\n\n    dc.transition = function (selection, duration, delay, name) {\n      if (dc.disableTransitions || duration <= 0) {\n        return selection;\n      }\n\n      var s = selection.transition(name);\n\n      if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n      }\n\n      if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n      }\n\n      return s;\n    };\n    /* somewhat silly, but to avoid duplicating logic */\n\n\n    dc.optionalTransition = function (enable, duration, delay, name) {\n      if (enable) {\n        return function (selection) {\n          return dc.transition(selection, duration, delay, name);\n        };\n      } else {\n        return function (selection) {\n          return selection;\n        };\n      }\n    }; // See http://stackoverflow.com/a/20773846\n\n\n    dc.afterTransition = function (transition, callback) {\n      if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n      } else {\n        var n = 0;\n        transition.each(function () {\n          ++n;\n        }).each('end', function () {\n          if (! --n) {\n            callback.call(transition);\n          }\n        });\n      }\n    };\n    /**\n     * @namespace units\n     * @memberof dc\n     * @type {{}}\n     */\n\n\n    dc.units = {};\n    /**\n     * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n     * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n     * be used when the x values are a sequence of integers.\n     * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n     * @method integers\n     * @memberof dc.units\n     * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n     * @example\n     * chart.xUnits(dc.units.integers) // already the default\n     * @param {Number} start\n     * @param {Number} end\n     * @returns {Number}\n     */\n\n    dc.units.integers = function (start, end) {\n      return Math.abs(end - start);\n    };\n    /**\n     * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n     * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n     * {@link dc.coordinateGridMixin#x .x}.\n     * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n     * @method ordinal\n     * @memberof dc.units\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n     * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n     * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n     * @example\n     * chart.xUnits(dc.units.ordinal)\n     *      .x(d3.scale.ordinal())\n     * @param {*} start\n     * @param {*} end\n     * @param {Array<String>} domain\n     * @returns {Array<String>}\n     */\n\n\n    dc.units.ordinal = function (start, end, domain) {\n      return domain;\n    };\n    /**\n     * @namespace fp\n     * @memberof dc.units\n     * @type {{}}\n     */\n\n\n    dc.units.fp = {};\n    /**\n     * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n     * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n     * numbers with the given precision.\n     * The returned function determines how many values at the given precision will fit into the range\n     * supplied in its start and end parameters.\n     * @method precision\n     * @memberof dc.units.fp\n     * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n     * @example\n     * // specify values (and ticks) every 0.1 units\n     * chart.xUnits(dc.units.fp.precision(0.1)\n     * // there are 500 units between 0.5 and 1 if the precision is 0.001\n     * var thousandths = dc.units.fp.precision(0.001);\n     * thousandths(0.5, 1.0) // returns 500\n     * @param {Number} precision\n     * @returns {Function} start-end unit function\n     */\n\n    dc.units.fp.precision = function (precision) {\n      var _f = function _f(s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n          return Math.floor(d);\n        } else {\n          return Math.ceil(d);\n        }\n      };\n\n      _f.resolution = precision;\n      return _f;\n    };\n\n    dc.round = {};\n\n    dc.round.floor = function (n) {\n      return Math.floor(n);\n    };\n\n    dc.round.ceil = function (n) {\n      return Math.ceil(n);\n    };\n\n    dc.round.round = function (n) {\n      return Math.round(n);\n    };\n\n    dc.override = function (obj, functionName, newFunction) {\n      var existingFunction = obj[functionName];\n      obj['_' + functionName] = existingFunction;\n      obj[functionName] = newFunction;\n    };\n\n    dc.renderlet = function (_) {\n      if (!arguments.length) {\n        return dc._renderlet;\n      }\n\n      dc._renderlet = _;\n      return dc;\n    };\n\n    dc.instanceOfChart = function (o) {\n      return o instanceof Object && o.__dcFlag__ && true;\n    };\n\n    dc.errors = {};\n\n    dc.errors.Exception = function (msg) {\n      var _msg = msg || 'Unexpected internal error';\n\n      this.message = _msg;\n\n      this.toString = function () {\n        return _msg;\n      };\n\n      this.stack = new Error().stack;\n    };\n\n    dc.errors.Exception.prototype = Object.create(Error.prototype);\n    dc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\n    dc.errors.InvalidStateException = function () {\n      dc.errors.Exception.apply(this, arguments);\n    };\n\n    dc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\n    dc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\n    dc.errors.BadArgumentException = function () {\n      dc.errors.Exception.apply(this, arguments);\n    };\n\n    dc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\n    dc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n    /**\n     * The default date format for dc.js\n     * @name dateFormat\n     * @memberof dc\n     * @type {Function}\n     * @default d3.time.format('%m/%d/%Y')\n     */\n\n    dc.dateFormat = d3.time.format('%m/%d/%Y');\n    /**\n     * @namespace printers\n     * @memberof dc\n     * @type {{}}\n     */\n\n    dc.printers = {};\n    /**\n     * Converts a list of filters into a readable string.\n     * @method filters\n     * @memberof dc.printers\n     * @param {Array<dc.filters>} filters\n     * @returns {String}\n     */\n\n    dc.printers.filters = function (filters) {\n      var s = '';\n\n      for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n          s += ', ';\n        }\n\n        s += dc.printers.filter(filters[i]);\n      }\n\n      return s;\n    };\n    /**\n     * Converts a filter into a readable string.\n     * @method filter\n     * @memberof dc.printers\n     * @param {dc.filters|any|Array<any>} filter\n     * @returns {String}\n     */\n\n\n    dc.printers.filter = function (filter) {\n      var s = '';\n\n      if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n          if (filter.length >= 2) {\n            s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n          } else if (filter.length >= 1) {\n            s = dc.utils.printSingleValue(filter[0]);\n          }\n        } else {\n          s = dc.utils.printSingleValue(filter);\n        }\n      }\n\n      return s;\n    };\n    /**\n     * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n     * can be passed as the second argument to also alter the data being returned.\n     *\n     * This can be a useful shorthand method to create accessor functions.\n     * @method pluck\n     * @memberof dc\n     * @example\n     * var xPluck = dc.pluck('x');\n     * var objA = {x: 1};\n     * xPluck(objA) // 1\n     * @example\n     * var xPosition = dc.pluck('x', function (x, i) {\n     *     // `this` is the original datum,\n     *     // `x` is the x property of the datum,\n     *     // `i` is the position in the array\n     *     return this.radius + x;\n     * });\n     * dc.selectAll('.circle').data(...).x(xPosition);\n     * @param {String} n\n     * @param {Function} [f]\n     * @returns {Function}\n     */\n\n\n    dc.pluck = function (n, f) {\n      if (!f) {\n        return function (d) {\n          return d[n];\n        };\n      }\n\n      return function (d, i) {\n        return f.call(d, d[n], i);\n      };\n    };\n    /**\n     * @namespace utils\n     * @memberof dc\n     * @type {{}}\n     */\n\n\n    dc.utils = {};\n    /**\n     * Print a single value filter.\n     * @method printSingleValue\n     * @memberof dc.utils\n     * @param {any} filter\n     * @returns {String}\n     */\n\n    dc.utils.printSingleValue = function (filter) {\n      var s = '' + filter;\n\n      if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n      } else if (typeof filter === 'string') {\n        s = filter;\n      } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n      } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n      }\n\n      return s;\n    };\n\n    dc.utils.printSingleValue.fformat = d3.format('.2f');\n    /**\n     * Arbitrary add one value to another.\n     * @method add\n     * @memberof dc.utils\n     * @todo\n     * These assume than any string r is a percentage (whether or not it includes %).\n     * They also generate strange results if l is a string.\n     * @param {String|Date|Number} l the value to modify\n     * @param {Number} r the amount by which to modify the value\n     * @param {String} [t] if `l` is a `Date`, the\n     * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n     * the `d3.time` namespace\n     * @returns {String|Date|Number}\n     */\n\n    dc.utils.add = function (l, r, t) {\n      if (typeof r === 'string') {\n        r = r.replace('%', '');\n      }\n\n      if (l instanceof Date) {\n        if (typeof r === 'string') {\n          r = +r;\n        }\n\n        if (t === 'millis') {\n          return new Date(l.getTime() + r);\n        }\n\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n      } else if (typeof r === 'string') {\n        var percentage = +r / 100;\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n      } else {\n        return l + r;\n      }\n    };\n    /**\n     * Arbitrary subtract one value from another.\n     * @method subtract\n     * @memberof dc.utils\n     * @todo\n     * These assume than any string r is a percentage (whether or not it includes %).\n     * They also generate strange results if l is a string.\n     * @param {String|Date|Number} l the value to modify\n     * @param {Number} r the amount by which to modify the value\n     * @param {String} [t] if `l` is a `Date`, the\n     * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n     * the `d3.time` namespace\n     * @returns {String|Date|Number}\n     */\n\n\n    dc.utils.subtract = function (l, r, t) {\n      if (typeof r === 'string') {\n        r = r.replace('%', '');\n      }\n\n      if (l instanceof Date) {\n        if (typeof r === 'string') {\n          r = +r;\n        }\n\n        if (t === 'millis') {\n          return new Date(l.getTime() - r);\n        }\n\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n      } else if (typeof r === 'string') {\n        var percentage = +r / 100;\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n      } else {\n        return l - r;\n      }\n    };\n    /**\n     * Is the value a number?\n     * @method isNumber\n     * @memberof dc.utils\n     * @param {any} n\n     * @returns {Boolean}\n     */\n\n\n    dc.utils.isNumber = function (n) {\n      return n === +n;\n    };\n    /**\n     * Is the value a float?\n     * @method isFloat\n     * @memberof dc.utils\n     * @param {any} n\n     * @returns {Boolean}\n     */\n\n\n    dc.utils.isFloat = function (n) {\n      return n === +n && n !== (n | 0);\n    };\n    /**\n     * Is the value an integer?\n     * @method isInteger\n     * @memberof dc.utils\n     * @param {any} n\n     * @returns {Boolean}\n     */\n\n\n    dc.utils.isInteger = function (n) {\n      return n === +n && n === (n | 0);\n    };\n    /**\n     * Is the value very close to zero?\n     * @method isNegligible\n     * @memberof dc.utils\n     * @param {any} n\n     * @returns {Boolean}\n     */\n\n\n    dc.utils.isNegligible = function (n) {\n      return !dc.utils.isNumber(n) || n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER;\n    };\n    /**\n     * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n     * @method clamp\n     * @memberof dc.utils\n     * @param {any} val\n     * @param {any} min\n     * @param {any} max\n     * @returns {any}\n     */\n\n\n    dc.utils.clamp = function (val, min, max) {\n      return val < min ? min : val > max ? max : val;\n    };\n    /**\n     * Using a simple static counter, provide a unique integer id.\n     * @method uniqueId\n     * @memberof dc.utils\n     * @returns {Number}\n     */\n\n\n    var _idCounter = 0;\n\n    dc.utils.uniqueId = function () {\n      return ++_idCounter;\n    };\n    /**\n     * Convert a name to an ID.\n     * @method nameToId\n     * @memberof dc.utils\n     * @param {String} name\n     * @returns {String}\n     */\n\n\n    dc.utils.nameToId = function (name) {\n      return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n    };\n    /**\n     * Append or select an item on a parent element.\n     * @method appendOrSelect\n     * @memberof dc.utils\n     * @param {d3.selection} parent\n     * @param {String} selector\n     * @param {String} tag\n     * @returns {d3.selection}\n     */\n\n\n    dc.utils.appendOrSelect = function (parent, selector, tag) {\n      tag = tag || selector;\n      var element = parent.select(selector);\n\n      if (element.empty()) {\n        element = parent.append(tag);\n      }\n\n      return element;\n    };\n    /**\n     * Return the number if the value is a number; else 0.\n     * @method safeNumber\n     * @memberof dc.utils\n     * @param {Number|any} n\n     * @returns {Number}\n     */\n\n\n    dc.utils.safeNumber = function (n) {\n      return dc.utils.isNumber(+n) ? +n : 0;\n    };\n\n    dc.logger = {};\n    dc.logger.enableDebugLog = false;\n\n    dc.logger.warn = function (msg) {\n      if (console) {\n        if (console.warn) {\n          console.warn(msg);\n        } else if (console.log) {\n          console.log(msg);\n        }\n      }\n\n      return dc.logger;\n    };\n\n    dc.logger.debug = function (msg) {\n      if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n          console.debug(msg);\n        } else if (console.log) {\n          console.log(msg);\n        }\n      }\n\n      return dc.logger;\n    };\n\n    dc.logger.deprecate = function (fn, msg) {\n      // Allow logging of deprecation\n      var warned = false;\n\n      function deprecated() {\n        if (!warned) {\n          dc.logger.warn(msg);\n          warned = true;\n        }\n\n        return fn.apply(this, arguments);\n      }\n\n      return deprecated;\n    };\n\n    dc.events = {\n      current: null\n    };\n    /**\n     * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n     * that are triggered repetitively due to user interaction such brush dragging might flood the library\n     * and invoke more renders than can be executed in time. Using this function to wrap your event\n     * function allows the library to smooth out the rendering by throttling events and only responding to\n     * the most recent event.\n     * @name events.trigger\n     * @memberof dc\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *         // focus some other chart to the range selected by user on this chart\n     *         someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Function} closure\n     * @param {Number} [delay]\n     */\n\n    dc.events.trigger = function (closure, delay) {\n      if (!delay) {\n        closure();\n        return;\n      }\n\n      dc.events.current = closure;\n      setTimeout(function () {\n        if (closure === dc.events.current) {\n          closure();\n        }\n      }, delay);\n    };\n    /**\n     * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n     * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n     * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n     * function to the dimension; the function combines multiple filters and if any of them accept a\n     * record, it is filtered in.\n     *\n     * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n     * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n     *\n     * Each of the dc.js filters is an object with the following properties:\n     * * `isFiltered` - a function that returns true if a value is within the filter\n     * * `filterType` - a string identifying the filter, here the name of the constructor\n     *\n     * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n     * can be used as long as they have the properties above.\n     * @namespace filters\n     * @memberof dc\n     * @type {{}}\n     */\n\n\n    dc.filters = {};\n    /**\n     * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n     * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n     *\n     * Its `filterType` is 'RangedFilter'\n     * @name RangedFilter\n     * @memberof dc.filters\n     * @param {Number} low\n     * @param {Number} high\n     * @returns {Array<Number>}\n     * @constructor\n     */\n\n    dc.filters.RangedFilter = function (low, high) {\n      var range = new Array(low, high);\n\n      range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n      };\n\n      range.filterType = 'RangedFilter';\n      return range;\n    };\n    /**\n     * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n     * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n     * filtered by filtering all the cells in the row or column.)\n     *\n     * Its `filterType` is 'TwoDimensionalFilter'\n     * @name TwoDimensionalFilter\n     * @memberof dc.filters\n     * @param {Array<Number>} filter\n     * @returns {Array<Number>}\n     * @constructor\n     */\n\n\n    dc.filters.TwoDimensionalFilter = function (filter) {\n      if (filter === null) {\n        return null;\n      }\n\n      var f = filter;\n\n      f.isFiltered = function (value) {\n        return value.length && value.length === f.length && value[0] === f[0] && value[1] === f[1];\n      };\n\n      f.filterType = 'TwoDimensionalFilter';\n      return f;\n    };\n    /**\n     * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n     * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n     *\n     * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n     * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n     * rectangular range including the lower values but excluding the higher values.\n     *\n     * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n     * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n     * x2`.\n     *\n     * Its `filterType` is 'RangedTwoDimensionalFilter'\n     * @name RangedTwoDimensionalFilter\n     * @memberof dc.filters\n     * @param {Array<Array<Number>>} filter\n     * @returns {Array<Array<Number>>}\n     * @constructor\n     */\n\n\n    dc.filters.RangedTwoDimensionalFilter = function (filter) {\n      if (filter === null) {\n        return null;\n      }\n\n      var f = filter;\n      var fromBottomLeft;\n\n      if (f[0] instanceof Array) {\n        fromBottomLeft = [[Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])], [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]];\n      } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n      }\n\n      f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n          x = value[0];\n          y = value[1];\n        } else {\n          x = value;\n          y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] && y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n      };\n\n      f.filterType = 'RangedTwoDimensionalFilter';\n      return f;\n    };\n    /**\n     * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n     * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n     * and available on all chart implementations in the `dc` library.\n     * @name baseMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.baseMixin}\n     */\n\n\n    dc.baseMixin = function (_chart) {\n      _chart.__dcFlag__ = dc.utils.uniqueId();\n\n      var _dimension;\n\n      var _group;\n\n      var _anchor;\n\n      var _root;\n\n      var _svg;\n\n      var _isChild;\n\n      var _minWidth = 200;\n\n      var _defaultWidthCalc = function _defaultWidthCalc(element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return width && width > _minWidth ? width : _minWidth;\n      };\n\n      var _widthCalc = _defaultWidthCalc;\n      var _minHeight = 200;\n\n      var _defaultHeightCalc = function _defaultHeightCalc(element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return height && height > _minHeight ? height : _minHeight;\n      };\n\n      var _heightCalc = _defaultHeightCalc;\n\n      var _width, _height;\n\n      var _useViewBoxResizing = false;\n\n      var _keyAccessor = dc.pluck('key');\n\n      var _valueAccessor = dc.pluck('value');\n\n      var _label = dc.pluck('key');\n\n      var _ordering = dc.pluck('key');\n\n      var _orderSort;\n\n      var _renderLabel = false;\n\n      var _title = function _title(d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n      };\n\n      var _renderTitle = true;\n      var _controlsUseVisibility = false;\n      var _transitionDuration = 750;\n      var _transitionDelay = 0;\n      var _filterPrinter = dc.printers.filters;\n      var _mandatoryAttributes = ['dimension', 'group'];\n      var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n      var _listeners = d3.dispatch('preRender', 'postRender', 'preRedraw', 'postRedraw', 'filtered', 'zoomed', 'renderlet', 'pretransition');\n\n      var _legend;\n\n      var _commitHandler;\n\n      var _filters = [];\n\n      var _filterHandler = function _filterHandler(dimension, filters) {\n        if (filters.length === 0) {\n          dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n          // single value and not a function-based filter\n          dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n          // single range-based filter\n          dimension.filterRange(filters[0]);\n        } else {\n          dimension.filterFunction(function (d) {\n            for (var i = 0; i < filters.length; i++) {\n              var filter = filters[i];\n\n              if (filter.isFiltered && filter.isFiltered(d)) {\n                return true;\n              } else if (filter <= d && filter >= d) {\n                return true;\n              }\n            }\n\n            return false;\n          });\n        }\n\n        return filters;\n      };\n\n      var _data = function _data(group) {\n        return group.all();\n      };\n      /**\n       * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n       * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n       * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n       * function, or falsy. If no value is specified then the value of the current height attribute will\n       * be returned.\n       *\n       * By default, without an explicit height being given, the chart will select the width of its\n       * anchor element. If that isn't possible it defaults to 200 (provided by the\n       * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n       * the chart to the default behavior.\n       * @method height\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#minHeight minHeight}\n       * @example\n       * // Default height\n       * chart.height(function (element) {\n       *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n       *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n       * });\n       *\n       * chart.height(250); // Set the chart's height to 250px;\n       * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n       * chart.height(null); // reset the height to the default auto calculation\n       * @param {Number|Function} [height]\n       * @returns {Number|dc.baseMixin}\n       */\n\n\n      _chart.height = function (height) {\n        if (!arguments.length) {\n          if (!dc.utils.isNumber(_height)) {\n            // only calculate once\n            _height = _heightCalc(_root.node());\n          }\n\n          return _height;\n        }\n\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n      };\n      /**\n       * Set or get the width attribute of a chart.\n       * @method width\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#height height}\n       * @see {@link dc.baseMixin#minWidth minWidth}\n       * @example\n       * // Default width\n       * chart.width(function (element) {\n       *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n       *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n       * });\n       * @param {Number|Function} [width]\n       * @returns {Number|dc.baseMixin}\n       */\n\n\n      _chart.width = function (width) {\n        if (!arguments.length) {\n          if (!dc.utils.isNumber(_width)) {\n            // only calculate once\n            _width = _widthCalc(_root.node());\n          }\n\n          return _width;\n        }\n\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n      };\n      /**\n       * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n       * {@link dc.baseMixin#width width} function.\n       * @method minWidth\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#width width}\n       * @param {Number} [minWidth=200]\n       * @returns {Number|dc.baseMixin}\n       */\n\n\n      _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n          return _minWidth;\n        }\n\n        _minWidth = minWidth;\n        return _chart;\n      };\n      /**\n       * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n       * {@link dc.baseMixin#height height} function.\n       * @method minHeight\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#height height}\n       * @param {Number} [minHeight=200]\n       * @returns {Number|dc.baseMixin}\n       */\n\n\n      _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n          return _minHeight;\n        }\n\n        _minHeight = minHeight;\n        return _chart;\n      };\n      /**\n       * Turn on/off using the SVG\n       * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n       * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n       * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n       *\n       * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n       * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n       * 100%` or absolute positioning to resize to its parent div.\n       *\n       * Since the text will be sized as if the chart is drawn according to the width and height, and\n       * will be resized if the chart is any other size, you need to set the chart width and height so\n       * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n       *\n       * You can see examples of this resizing strategy in the [Chart Resizing\n       * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n       * one-chart examples to enable `useViewBoxResizing`.\n       * @method useViewBoxResizing\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Boolean} [useViewBoxResizing=false]\n       * @returns {Boolean|dc.baseMixin}\n       */\n\n\n      _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n          return _useViewBoxResizing;\n        }\n\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n      };\n      /**\n       * **mandatory**\n       *\n       * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n       *\n       * If a value is given, then it will be used as the new dimension. If no value is specified then\n       * the current dimension will be returned.\n       * @method dimension\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n       * @example\n       * var index = crossfilter([]);\n       * var dimension = index.dimension(dc.pluck('key'));\n       * chart.dimension(dimension);\n       * @param {crossfilter.dimension} [dimension]\n       * @returns {crossfilter.dimension|dc.baseMixin}\n       */\n\n\n      _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n          return _dimension;\n        }\n\n        _dimension = dimension;\n\n        _chart.expireCache();\n\n        return _chart;\n      };\n      /**\n       * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n       * group and by default will return\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n       * This behavior may be modified to, for instance, return only the top 5 groups.\n       * @method data\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // Default data function\n       * chart.data(function (group) { return group.all(); });\n       *\n       * chart.data(function (group) { return group.top(5); });\n       * @param {Function} [callback]\n       * @returns {*|dc.baseMixin}\n       */\n\n\n      _chart.data = function (callback) {\n        if (!arguments.length) {\n          return _data.call(_chart, _group);\n        }\n\n        _data = d3.functor(callback);\n\n        _chart.expireCache();\n\n        return _chart;\n      };\n      /**\n       * **mandatory**\n       *\n       * Set or get the group attribute of a chart. In `dc` a group is a\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n       * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n       * given, then it will be used as the new group.\n       *\n       * If no value specified then the current group will be returned.\n       * If `name` is specified then it will be used to generate legend label.\n       * @method group\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n       * @example\n       * var index = crossfilter([]);\n       * var dimension = index.dimension(dc.pluck('key'));\n       * chart.dimension(dimension);\n       * chart.group(dimension.group(crossfilter.reduceSum()));\n       * @param {crossfilter.group} [group]\n       * @param {String} [name]\n       * @returns {crossfilter.group|dc.baseMixin}\n       */\n\n\n      _chart.group = function (group, name) {\n        if (!arguments.length) {\n          return _group;\n        }\n\n        _group = group;\n        _chart._groupName = name;\n\n        _chart.expireCache();\n\n        return _chart;\n      };\n      /**\n       * Get or set an accessor to order ordinal dimensions.  The chart uses\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n       * to sort elements; this accessor returns the value to order on.\n       * @method ordering\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n       * @example\n       * // Default ordering accessor\n       * _chart.ordering(dc.pluck('key'));\n       * @param {Function} [orderFunction]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n          return _ordering;\n        }\n\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n\n        _chart.expireCache();\n\n        return _chart;\n      };\n\n      _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n          return dataCopy;\n        }\n\n        if (!_orderSort) {\n          _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n      };\n      /**\n       * Clear all filters associated with this chart. The same effect can be achieved by calling\n       * {@link dc.baseMixin#filter chart.filter(null)}.\n       * @method filterAll\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.filterAll = function () {\n        return _chart.filter(null);\n      };\n      /**\n       * Execute d3 single selection in the chart's scope using the given selector and return the d3\n       * selection.\n       *\n       * This function is **not chainable** since it does not return a chart instance; however the d3\n       * selection result can be chained to d3 function calls.\n       * @method select\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n       * @example\n       * // Has the same effect as d3.select('#chart-id').select(selector)\n       * chart.select(selector)\n       * @returns {d3.selection}\n       */\n\n\n      _chart.select = function (s) {\n        return _root.select(s);\n      };\n      /**\n       * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n       *\n       * This function is **not chainable** since it does not return a chart instance; however the d3\n       * selection result can be chained to d3 function calls.\n       * @method selectAll\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n       * @example\n       * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n       * chart.selectAll(selector)\n       * @returns {d3.selection}\n       */\n\n\n      _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n      };\n      /**\n       * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n       * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n       * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n       * within the chartGroup. This class is called internally on chart initialization, but be called\n       * again to relocate the chart. However, it will orphan any previously created SVGElements.\n       * @method anchor\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {anchorChart|anchorSelector|anchorNode} [parent]\n       * @param {String} [chartGroup]\n       * @returns {String|node|d3.selection|dc.baseMixin}\n       */\n\n\n      _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n          return _anchor;\n        }\n\n        if (dc.instanceOfChart(parent)) {\n          _anchor = parent.anchor();\n          _root = parent.root();\n          _isChild = true;\n        } else if (parent) {\n          if (parent.select && parent.classed) {\n            // detect d3 selection\n            _anchor = parent.node();\n          } else {\n            _anchor = parent;\n          }\n\n          _root = d3.select(_anchor);\n\n          _root.classed(dc.constants.CHART_CLASS, true);\n\n          dc.registerChart(_chart, chartGroup);\n          _isChild = false;\n        } else {\n          throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n\n        _chartGroup = chartGroup;\n        return _chart;\n      };\n      /**\n       * Returns the DOM id for the chart's anchored location.\n       * @method anchorName\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {String}\n       */\n\n\n      _chart.anchorName = function () {\n        var a = _chart.anchor();\n\n        if (a && a.id) {\n          return a.id;\n        }\n\n        if (a && a.replace) {\n          return a.replace('#', '');\n        }\n\n        return 'dc-chart' + _chart.chartID();\n      };\n      /**\n       * Returns the root element where a chart resides. Usually it will be the parent div element where\n       * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n       * dc internally. Resetting the root element on a chart outside of dc internals may have\n       * unexpected consequences.\n       * @method root\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n       * @param {HTMLElement} [rootElement]\n       * @returns {HTMLElement|dc.baseMixin}\n       */\n\n\n      _chart.root = function (rootElement) {\n        if (!arguments.length) {\n          return _root;\n        }\n\n        _root = rootElement;\n        return _chart;\n      };\n      /**\n       * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n       * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n       * of dc internals may have unexpected consequences.\n       * @method svg\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n       * @param {SVGElement|d3.selection} [svgElement]\n       * @returns {SVGElement|d3.selection|dc.baseMixin}\n       */\n\n\n      _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n          return _svg;\n        }\n\n        _svg = svgElement;\n        return _chart;\n      };\n      /**\n       * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n       * @method resetSvg\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n       * @returns {SVGElement}\n       */\n\n\n      _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n\n        return generateSvg();\n      };\n\n      function sizeSvg() {\n        if (_svg) {\n          if (!_useViewBoxResizing) {\n            _svg.attr('width', _chart.width()).attr('height', _chart.height());\n          } else if (!_svg.attr('viewBox')) {\n            _svg.attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n          }\n        }\n      }\n\n      function generateSvg() {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n      }\n      /**\n       * Set or get the filter printer function. The filter printer function is used to generate human\n       * friendly text for filter value(s) associated with the chart instance. The text will get shown\n       * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n       *\n       * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n       * that provides simple printing support for both single value and ranged filters.\n       * @method filterPrinter\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // for a chart with an ordinal brush, print the filters in upper case\n       * chart.filterPrinter(function(filters) {\n       *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n       * });\n       * // for a chart with a range brush, print the filter as start and extent\n       * chart.filterPrinter(function(filters) {\n       *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n       *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n       * });\n       * @param {Function} [filterPrinterFunction=dc.printers.filters]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n          return _filterPrinter;\n        }\n\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n      };\n      /**\n       * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n       * chart reset and filter controls, for less disruption to the layout.\n       * @method controlsUseVisibility\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Boolean} [controlsUseVisibility=false]\n       * @returns {Boolean|dc.baseMixin}\n       **/\n\n\n      _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n          return _controlsUseVisibility;\n        }\n\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n      };\n      /**\n       * Turn on optional control elements within the root element. dc currently supports the\n       * following html control elements.\n       * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n       * of control element is usually used to store a reset link to allow user to reset filter on a\n       * certain chart. This element will be turned off automatically if the filter is cleared.\n       * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n       * content of this element is then replaced with the current filter value using the filter printer\n       * function. This type of element will be turned off automatically if the filter is cleared.\n       * @method turnOnControls\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.turnOnControls = function () {\n        if (_root) {\n          var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n\n          _chart.selectAll('.reset').style(attribute, null);\n\n          _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n\n        return _chart;\n      };\n      /**\n       * Turn off optional control elements within the root element.\n       * @method turnOffControls\n       * @memberof dc.baseMixin\n       * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.turnOffControls = function () {\n        if (_root) {\n          var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n          var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n\n          _chart.selectAll('.reset').style(attribute, value);\n\n          _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n\n        return _chart;\n      };\n      /**\n       * Set or get the animation transition duration (in milliseconds) for this chart instance.\n       * @method transitionDuration\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Number} [duration=750]\n       * @returns {Number|dc.baseMixin}\n       */\n\n\n      _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n          return _transitionDuration;\n        }\n\n        _transitionDuration = duration;\n        return _chart;\n      };\n      /**\n       * Set or get the animation transition delay (in milliseconds) for this chart instance.\n       * @method transitionDelay\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Number} [delay=0]\n       * @returns {Number|dc.baseMixin}\n       */\n\n\n      _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n          return _transitionDelay;\n        }\n\n        _transitionDelay = delay;\n        return _chart;\n      };\n\n      _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n          return _mandatoryAttributes;\n        }\n\n        _mandatoryAttributes = _;\n        return _chart;\n      };\n\n      function checkForMandatoryAttributes(a) {\n        if (!_chart[a] || !_chart[a]()) {\n          throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a + ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n      }\n      /**\n       * Invoking this method will force the chart to re-render everything from scratch. Generally it\n       * should only be used to render the chart for the first time on the page or if you want to make\n       * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n       * behaviour.\n       * @method render\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n\n        _listeners.preRender(_chart);\n\n        if (_mandatoryAttributes) {\n          _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n          _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n      };\n\n      _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n\n        if (_chart.transitionDuration() > 0 && _svg) {\n          _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay()).each('end', function () {\n            _listeners.renderlet(_chart);\n\n            if (event) {\n              _listeners[event](_chart);\n            }\n          });\n        } else {\n          _listeners.renderlet(_chart);\n\n          if (event) {\n            _listeners[event](_chart);\n          }\n        }\n      };\n      /**\n       * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n       * change in the underlying data dimension then calling this method will have no effect on the\n       * chart. Most chart interaction in dc will automatically trigger this method through internal\n       * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n       * manually invoke this function if data is manipulated outside of dc's control (for example if\n       * data is loaded in the background using\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n       * @method redraw\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.redraw = function () {\n        sizeSvg();\n\n        _listeners.preRedraw(_chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n          _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n      };\n      /**\n       * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n       * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n       *\n       * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n       * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n       * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n       * with error first and result second.\n       * @method commitHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n          return _commitHandler;\n        }\n\n        _commitHandler = commitHandler;\n        return _chart;\n      };\n      /**\n       * Redraws all charts in the same group as this chart, typically in reaction to a filter\n       * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n       * be executed and waited for.\n       * @method redrawGroup\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.redrawGroup = function () {\n        if (_commitHandler) {\n          _commitHandler(false, function (error, result) {\n            if (error) {\n              console.log(error);\n            } else {\n              dc.redrawAll(_chart.chartGroup());\n            }\n          });\n        } else {\n          dc.redrawAll(_chart.chartGroup());\n        }\n\n        return _chart;\n      };\n      /**\n       * Renders all charts in the same group as this chart. If the chart has a\n       * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n       * @method renderGroup\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.renderGroup = function () {\n        if (_commitHandler) {\n          _commitHandler(false, function (error, result) {\n            if (error) {\n              console.log(error);\n            } else {\n              dc.renderAll(_chart.chartGroup());\n            }\n          });\n        } else {\n          dc.renderAll(_chart.chartGroup());\n        }\n\n        return _chart;\n      };\n\n      _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n          _listeners.filtered(_chart, f);\n        }\n      };\n\n      _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n      };\n\n      var _hasFilterHandler = function _hasFilterHandler(filters, filter) {\n        if (filter === null || typeof filter === 'undefined') {\n          return filters.length > 0;\n        }\n\n        return filters.some(function (f) {\n          return filter <= f && filter >= f;\n        });\n      };\n      /**\n       * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n       * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n       * you to change the way filters are checked for and replaced.\n       * @method hasFilterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default has-filter handler\n       * chart.hasFilterHandler(function (filters, filter) {\n       *     if (filter === null || typeof(filter) === 'undefined') {\n       *         return filters.length > 0;\n       *     }\n       *     return filters.some(function (f) {\n       *         return filter <= f && filter >= f;\n       *     });\n       * });\n       *\n       * // custom filter handler (no-op)\n       * chart.hasFilterHandler(function(filters, filter) {\n       *     return false;\n       * });\n       * @param {Function} [hasFilterHandler]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n          return _hasFilterHandler;\n        }\n\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n      };\n      /**\n       * Check whether any active filter or a specific filter is associated with particular chart instance.\n       * This function is **not chainable**.\n       * @method hasFilter\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n       * @param {*} [filter]\n       * @returns {Boolean}\n       */\n\n\n      _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n      };\n\n      var _removeFilterHandler = function _removeFilterHandler(filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n          if (filters[i] <= filter && filters[i] >= filter) {\n            filters.splice(i, 1);\n            break;\n          }\n        }\n\n        return filters;\n      };\n      /**\n       * Set or get the remove filter handler. The remove filter handler is a function that removes a\n       * filter from the chart's current filters. Using a custom remove filter handler allows you to\n       * change how filters are removed or perform additional work when removing a filter, e.g. when\n       * using a filter server other than crossfilter.\n       *\n       * The handler should return a new or modified array as the result.\n       * @method removeFilterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default remove filter handler\n       * chart.removeFilterHandler(function (filters, filter) {\n       *     for (var i = 0; i < filters.length; i++) {\n       *         if (filters[i] <= filter && filters[i] >= filter) {\n       *             filters.splice(i, 1);\n       *             break;\n       *         }\n       *     }\n       *     return filters;\n       * });\n       *\n       * // custom filter handler (no-op)\n       * chart.removeFilterHandler(function(filters, filter) {\n       *     return filters;\n       * });\n       * @param {Function} [removeFilterHandler]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n          return _removeFilterHandler;\n        }\n\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n      };\n\n      var _addFilterHandler = function _addFilterHandler(filters, filter) {\n        filters.push(filter);\n        return filters;\n      };\n      /**\n       * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n       * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n       * are added or perform additional work when adding a filter, e.g. when using a filter server other\n       * than crossfilter.\n       *\n       * The handler should return a new or modified array as the result.\n       * @method addFilterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default add filter handler\n       * chart.addFilterHandler(function (filters, filter) {\n       *     filters.push(filter);\n       *     return filters;\n       * });\n       *\n       * // custom filter handler (no-op)\n       * chart.addFilterHandler(function(filters, filter) {\n       *     return filters;\n       * });\n       * @param {Function} [addFilterHandler]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n          return _addFilterHandler;\n        }\n\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n      };\n\n      var _resetFilterHandler = function _resetFilterHandler(filters) {\n        return [];\n      };\n      /**\n       * Set or get the reset filter handler. The reset filter handler is a function that resets the\n       * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n       * change the way filters are reset, or perform additional work when resetting the filters,\n       * e.g. when using a filter server other than crossfilter.\n       *\n       * The handler should return a new or modified array as the result.\n       * @method resetFilterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default remove filter handler\n       * function (filters) {\n       *     return [];\n       * }\n       *\n       * // custom filter handler (no-op)\n       * chart.resetFilterHandler(function(filters) {\n       *     return filters;\n       * });\n       * @param {Function} [resetFilterHandler]\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n          return _resetFilterHandler;\n        }\n\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n      };\n\n      function applyFilters(filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n          var fs = _filterHandler(_chart.dimension(), filters);\n\n          if (fs) {\n            filters = fs;\n          }\n        }\n\n        return filters;\n      }\n      /**\n       * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n       * but more efficient because the filter is only applied once.\n       *\n       * @method replaceFilter\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {*} [filter]\n       * @returns {dc.baseMixin}\n       **/\n\n\n      _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n\n        _chart.filter(filter);\n\n        return _chart;\n      };\n      /**\n       * Filter the chart by the given parameter, or return the current filter if no input parameter\n       * is given.\n       *\n       * The filter parameter can take one of these forms:\n       * * A single value: the value will be toggled (added if it is not present in the current\n       * filters, removed if it is present)\n       * * An array containing a single array of values (`[[value,value,value]]`): each value is\n       * toggled\n       * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n       *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n       * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n       *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n       * {@link dc.heatMap heat map}\n       *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n       * for the {@link dc.scatterPlot scatter plot}\n       * * `null`: the filter will be reset using the\n       * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n       *\n       * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n       * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n       * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n       *\n       * Each toggle is executed by checking if the value is already present using the\n       * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n       * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n       * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n       *\n       * Once the filters array has been updated, the filters are applied to the\n       * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n       *\n       * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n       * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n       * @method filter\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n       * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n       * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n       * @see {@link dc.baseMixin#filterHandler filterHandler}\n       * @example\n       * // filter by a single string\n       * chart.filter('Sunday');\n       * // filter by a single age\n       * chart.filter(18);\n       * // filter by a set of states\n       * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n       * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n       * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n       * chart.filter(dc.filters.RangedFilter(15,20));\n       * @param {*} [filter]\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.filter = function (filter) {\n        if (!arguments.length) {\n          return _filters.length > 0 ? _filters[0] : null;\n        }\n\n        var filters = _filters;\n\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n          // toggle each filter\n          filter[0].forEach(function (f) {\n            if (_hasFilterHandler(filters, f)) {\n              filters = _removeFilterHandler(filters, f);\n            } else {\n              filters = _addFilterHandler(filters, f);\n            }\n          });\n        } else if (filter === null) {\n          filters = _resetFilterHandler(filters);\n        } else {\n          if (_hasFilterHandler(filters, filter)) {\n            filters = _removeFilterHandler(filters, filter);\n          } else {\n            filters = _addFilterHandler(filters, filter);\n          }\n        }\n\n        _filters = applyFilters(filters);\n\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n          _chart.turnOnControls();\n        } else {\n          _chart.turnOffControls();\n        }\n\n        return _chart;\n      };\n      /**\n       * Returns all current filters. This method does not perform defensive cloning of the internal\n       * filter array before returning, therefore any modification of the returned array will effect the\n       * chart's internal filter storage.\n       * @method filters\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {Array<*>}\n       */\n\n\n      _chart.filters = function () {\n        return _filters;\n      };\n\n      _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n      };\n\n      _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n      };\n\n      _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n      };\n      /**\n       * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n       * filter on the clicked datum (passed to the callback) and redraw the chart group.\n       * @method onClick\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {*} datum\n       */\n\n\n      _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n\n        dc.events.trigger(function () {\n          _chart.filter(filter);\n\n          _chart.redrawGroup();\n        });\n      };\n      /**\n       * Set or get the filter handler. The filter handler is a function that performs the filter action\n       * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n       * before or after filtering.\n       * @method filterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n       * @example\n       * // the default filter handler handles all possible cases for the charts in dc.js\n       * // you can replace it with something more specialized for your own chart\n       * chart.filterHandler(function (dimension, filters) {\n       *     if (filters.length === 0) {\n       *         // the empty case (no filtering)\n       *         dimension.filter(null);\n       *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n       *         // single value and not a function-based filter\n       *         dimension.filterExact(filters[0]);\n       *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n       *         // single range-based filter\n       *         dimension.filterRange(filters[0]);\n       *     } else {\n       *         // an array of values, or an array of filter objects\n       *         dimension.filterFunction(function (d) {\n       *             for (var i = 0; i < filters.length; i++) {\n       *                 var filter = filters[i];\n       *                 if (filter.isFiltered && filter.isFiltered(d)) {\n       *                     return true;\n       *                 } else if (filter <= d && filter >= d) {\n       *                     return true;\n       *                 }\n       *             }\n       *             return false;\n       *         });\n       *     }\n       *     return filters;\n       * });\n       *\n       * // custom filter handler\n       * chart.filterHandler(function(dimension, filter){\n       *     var newFilter = filter + 10;\n       *     dimension.filter(newFilter);\n       *     return newFilter; // set the actual filter value to the new value\n       * });\n       * @param {Function} [filterHandler]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n          return _filterHandler;\n        }\n\n        _filterHandler = filterHandler;\n        return _chart;\n      }; // abstract function stub\n\n\n      _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n      };\n\n      _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n      };\n\n      _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n      };\n\n      _chart.legendHighlight = function () {// do nothing in base, should be overridden by sub-function\n      };\n\n      _chart.legendReset = function () {// do nothing in base, should be overridden by sub-function\n      };\n\n      _chart.legendToggle = function () {// do nothing in base, should be overriden by sub-function\n      };\n\n      _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n      };\n      /**\n       * Set or get the key accessor function. The key accessor function is used to retrieve the key\n       * value from the crossfilter group. Key values are used differently in different charts, for\n       * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n       * @method keyAccessor\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default key accessor\n       * chart.keyAccessor(function(d) { return d.key; });\n       * // custom key accessor for a multi-value crossfilter reduction\n       * chart.keyAccessor(function(p) { return p.value.absGain; });\n       * @param {Function} [keyAccessor]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n          return _keyAccessor;\n        }\n\n        _keyAccessor = keyAccessor;\n        return _chart;\n      };\n      /**\n       * Set or get the value accessor function. The value accessor function is used to retrieve the\n       * value from the crossfilter group. Group values are used differently in different charts, for\n       * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n       * coordinate chart.\n       * @method valueAccessor\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default value accessor\n       * chart.valueAccessor(function(d) { return d.value; });\n       * // custom value accessor for a multi-value crossfilter reduction\n       * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n       * @param {Function} [valueAccessor]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n          return _valueAccessor;\n        }\n\n        _valueAccessor = valueAccessor;\n        return _chart;\n      };\n      /**\n       * Set or get the label function. The chart class will use this function to render labels for each\n       * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n       * chart supports the label function, for example line chart does not use this function\n       * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n       * @method label\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default label function just return the key\n       * chart.label(function(d) { return d.key; });\n       * // label function has access to the standard d3 data binding and can get quite complicated\n       * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n       * @param {Function} [labelFunction]\n       * @param {Boolean} [enableLabels=true]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n          return _label;\n        }\n\n        _label = labelFunction;\n\n        if (enableLabels === undefined || enableLabels) {\n          _renderLabel = true;\n        }\n\n        return _chart;\n      };\n      /**\n       * Turn on/off label rendering\n       * @method renderLabel\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Boolean} [renderLabel=false]\n       * @returns {Boolean|dc.baseMixin}\n       */\n\n\n      _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n          return _renderLabel;\n        }\n\n        _renderLabel = renderLabel;\n        return _chart;\n      };\n      /**\n       * Set or get the title function. The chart class will use this function to render the SVGElement title\n       * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n       * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n       * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n       * otherwise the brush layer will block tooltip triggering.\n       * @method title\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default title function shows \"key: value\"\n       * chart.title(function(d) { return d.key + ': ' + d.value; });\n       * // title function has access to the standard d3 data binding and can get quite complicated\n       * chart.title(function(p) {\n       *    return p.key.getFullYear()\n       *        + '\\n'\n       *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n       *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n       *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n       * });\n       * @param {Function} [titleFunction]\n       * @returns {Function|dc.baseMixin}\n       */\n\n\n      _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n          return _title;\n        }\n\n        _title = titleFunction;\n        return _chart;\n      };\n      /**\n       * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n       * given.\n       * @method renderTitle\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Boolean} [renderTitle=true]\n       * @returns {Boolean|dc.baseMixin}\n       */\n\n\n      _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n          return _renderTitle;\n        }\n\n        _renderTitle = renderTitle;\n        return _chart;\n      };\n      /**\n       * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n       * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n       * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n       * Renderlet functions take the chart instance as the only input parameter and you can\n       * use the dc API or use raw d3 to achieve pretty much any effect.\n       *\n       * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n       * Generates a random key for the renderlet, which makes it hard to remove.\n       * @method renderlet\n       * @memberof dc.baseMixin\n       * @instance\n       * @deprecated\n       * @example\n       * // do this instead of .renderlet(function(chart) { ... })\n       * chart.on(\"renderlet\", function(chart){\n       *     // mix of dc API and d3 manipulation\n       *     chart.select('g.y').style('display', 'none');\n       *     // its a closure so you can also access other chart variable available in the closure scope\n       *     moveChart.filter(chart.filter());\n       * });\n       * @param {Function} renderletFunction\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n\n        return _chart;\n      }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n      /**\n       * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n       * together since it is expected they share the same underlying crossfilter data set.\n       * @method chartGroup\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {String} [chartGroup]\n       * @returns {String|dc.baseMixin}\n       */\n\n      _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n          return _chartGroup;\n        }\n\n        if (!_isChild) {\n          dc.deregisterChart(_chart, _chartGroup);\n        }\n\n        _chartGroup = chartGroup;\n\n        if (!_isChild) {\n          dc.registerChart(_chart, _chartGroup);\n        }\n\n        return _chart;\n      };\n      /**\n       * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n       * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n       * cache if you have changed state which will affect rendering.  For example, if you invoke\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n       * function or reset group or dimension after rendering, it is a good idea to\n       * clear the cache to make sure charts are rendered properly.\n       * @method expireCache\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n      };\n      /**\n       * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n       * based on the color setting and names associated with each group.\n       * @method legend\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n       * @param {dc.legend} [legend]\n       * @returns {dc.legend|dc.baseMixin}\n       */\n\n\n      _chart.legend = function (legend) {\n        if (!arguments.length) {\n          return _legend;\n        }\n\n        _legend = legend;\n\n        _legend.parent(_chart);\n\n        return _chart;\n      };\n      /**\n       * Returns the internal numeric ID of the chart.\n       * @method chartID\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {String}\n       */\n\n\n      _chart.chartID = function () {\n        return _chart.__dcFlag__;\n      };\n      /**\n       * Set chart options using a configuration object. Each key in the object will cause the method of\n       * the same name to be called with the value to set that attribute for the chart.\n       * @method options\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * chart.options({dimension: myDimension, group: myGroup});\n       * @param {{}} opts\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.options = function (opts) {\n        var applyOptions = ['anchor', 'group', 'xAxisLabel', 'yAxisLabel', 'stack', 'title', 'point', 'getColor', 'overlayGeoJson'];\n\n        for (var o in opts) {\n          if (typeof _chart[o] === 'function') {\n            if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n              _chart[o].apply(_chart, opts[o]);\n            } else {\n              _chart[o].call(_chart, opts[o]);\n            }\n          } else {\n            dc.logger.debug('Not a valid option setter name: ' + o);\n          }\n        }\n\n        return _chart;\n      };\n      /**\n       * All dc chart instance supports the following listeners.\n       * Supports the following events:\n       * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n       * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n       * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n       * * `preRender` - This listener function will be invoked before chart rendering.\n       * * `postRender` - This listener function will be invoked after chart finish rendering including\n       * all renderlets' logic.\n       * * `preRedraw` - This listener function will be invoked before chart redrawing.\n       * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n       * including all renderlets' logic.\n       * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n       * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n       * @method on\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n       * @example\n       * .on('renderlet', function(chart, filter){...})\n       * .on('pretransition', function(chart, filter){...})\n       * .on('preRender', function(chart){...})\n       * .on('postRender', function(chart){...})\n       * .on('preRedraw', function(chart){...})\n       * .on('postRedraw', function(chart){...})\n       * .on('filtered', function(chart, filter){...})\n       * .on('zoomed', function(chart, filter){...})\n       * @param {String} event\n       * @param {Function} listener\n       * @returns {dc.baseMixin}\n       */\n\n\n      _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n\n        return _chart;\n      };\n\n      return _chart;\n    };\n    /**\n     * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n     * Charts.\n     * @name marginMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.marginMixin}\n     */\n\n\n    dc.marginMixin = function (_chart) {\n      var _margin = {\n        top: 10,\n        right: 50,\n        bottom: 30,\n        left: 30\n      };\n      /**\n       * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n       * an associative Javascript array.\n       * @method margins\n       * @memberof dc.marginMixin\n       * @instance\n       * @example\n       * var leftMargin = chart.margins().left; // 30 by default\n       * chart.margins().left = 50;\n       * leftMargin = chart.margins().left; // now 50\n       * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n       * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n       */\n\n      _chart.margins = function (margins) {\n        if (!arguments.length) {\n          return _margin;\n        }\n\n        _margin = margins;\n        return _chart;\n      };\n\n      _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n      };\n\n      _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n      };\n\n      return _chart;\n    };\n    /**\n     * The Color Mixin is an abstract chart functional class providing universal coloring support\n     * as a mix-in for any concrete chart implementation.\n     * @name colorMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.colorMixin}\n     */\n\n\n    dc.colorMixin = function (_chart) {\n      var _colors = d3.scale.category20c();\n\n      var _defaultAccessor = true;\n\n      var _colorAccessor = function _colorAccessor(d) {\n        return _chart.keyAccessor()(d);\n      };\n\n      var _colorCalculator;\n      /**\n       * Retrieve current color scale or set a new color scale. This methods accepts any function that\n       * operates like a d3 scale.\n       * @method colors\n       * @memberof dc.colorMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @example\n       * // alternate categorical scale\n       * chart.colors(d3.scale.category20b());\n       * // ordinal scale\n       * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n       * // convenience method, the same as above\n       * chart.ordinalColors(['red','green','blue']);\n       * // set a linear scale\n       * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n       * @param {d3.scale} [colorScale=d3.scale.category20c()]\n       * @returns {d3.scale|dc.colorMixin}\n       */\n\n\n      _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n          return _colors;\n        }\n\n        if (colorScale instanceof Array) {\n          _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n          _colors = d3.functor(colorScale);\n        }\n\n        return _chart;\n      };\n      /**\n       * Convenience method to set the color scale to\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n       * range `r`.\n       * @method ordinalColors\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {Array<String>} r\n       * @returns {dc.colorMixin}\n       */\n\n\n      _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n      };\n      /**\n       * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n       * @method linearColors\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {Array<Number>} r\n       * @returns {dc.colorMixin}\n       */\n\n\n      _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear().range(r).interpolate(d3.interpolateHcl));\n      };\n      /**\n       * Set or the get color accessor function. This function will be used to map a data point in a\n       * crossfilter group to a color value on the color scale. The default function uses the key\n       * accessor.\n       * @method colorAccessor\n       * @memberof dc.colorMixin\n       * @instance\n       * @example\n       * // default index based color accessor\n       * .colorAccessor(function (d, i){return i;})\n       * // color accessor for a multi-value crossfilter reduction\n       * .colorAccessor(function (d){return d.value.absGain;})\n       * @param {Function} [colorAccessor]\n       * @returns {Function|dc.colorMixin}\n       */\n\n\n      _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n          return _colorAccessor;\n        }\n\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n      }; // what is this?\n\n\n      _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n      };\n      /**\n       * Set or get the current domain for the color mapping function. The domain must be supplied as an\n       * array.\n       *\n       * Note: previously this method accepted a callback function. Instead you may use a custom scale\n       * set by {@link dc.colorMixin#colors .colors}.\n       * @method colorDomain\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {Array<String>} [domain]\n       * @returns {Array<String>|dc.colorMixin}\n       */\n\n\n      _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n          return _colors.domain();\n        }\n\n        _colors.domain(domain);\n\n        return _chart;\n      };\n      /**\n       * Set the domain by determining the min and max values as retrieved by\n       * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n       * @method calculateColorDomain\n       * @memberof dc.colorMixin\n       * @instance\n       * @returns {dc.colorMixin}\n       */\n\n\n      _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()), d3.max(_chart.data(), _chart.colorAccessor())];\n\n        _colors.domain(newDomain);\n\n        return _chart;\n      };\n      /**\n       * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n       * @method getColor\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {*} d\n       * @param {Number} [i]\n       * @returns {String}\n       */\n\n\n      _chart.getColor = function (d, i) {\n        return _colorCalculator ? _colorCalculator.call(this, d, i) : _colors(_colorAccessor.call(this, d, i));\n      };\n      /**\n       * Overrides the color selection algorithm, replacing it with a simple function.\n       *\n       * Normally colors will be determined by calling the `colorAccessor` to get a value, and then passing that\n       * value through the `colorScale`.\n       *\n       * But sometimes it is difficult to get a color scale to produce the desired effect. The `colorCalculator`\n       * takes the datum and index and returns a color directly.\n       * @method colorCalculator\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {*} [colorCalculator]\n       * @returns {Function|dc.colorMixin}\n       */\n\n\n      _chart.colorCalculator = function (colorCalculator) {\n        if (!arguments.length) {\n          return _colorCalculator || _chart.getColor;\n        }\n\n        _colorCalculator = colorCalculator;\n        return _chart;\n      };\n\n      return _chart;\n    };\n    /**\n     * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n     * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n     * @name coordinateGridMixin\n     * @memberof dc\n     * @mixin\n     * @mixes dc.colorMixin\n     * @mixes dc.marginMixin\n     * @mixes dc.baseMixin\n     * @param {Object} _chart\n     * @returns {dc.coordinateGridMixin}\n     */\n\n\n    dc.coordinateGridMixin = function (_chart) {\n      var GRID_LINE_CLASS = 'grid-line';\n      var HORIZONTAL_CLASS = 'horizontal';\n      var VERTICAL_CLASS = 'vertical';\n      var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n      var X_AXIS_LABEL_CLASS = 'x-axis-label';\n      var DEFAULT_AXIS_LABEL_PADDING = 12;\n      _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n      _chart.colors(d3.scale.category10());\n\n      _chart._mandatoryAttributes().push('x');\n\n      var _parent;\n\n      var _g;\n\n      var _chartBodyG;\n\n      var _x;\n\n      var _xOriginalDomain;\n\n      var _xAxis = d3.svg.axis().orient('bottom');\n\n      var _xUnits = dc.units.integers;\n      var _xAxisPadding = 0;\n      var _xAxisPaddingUnit = 'day';\n      var _xElasticity = false;\n\n      var _xAxisLabel;\n\n      var _xAxisLabelPadding = 0;\n\n      var _lastXDomain;\n\n      var _y;\n\n      var _yAxis = d3.svg.axis().orient('left');\n\n      var _yAxisPadding = 0;\n      var _yElasticity = false;\n\n      var _yAxisLabel;\n\n      var _yAxisLabelPadding = 0;\n\n      var _brush = d3.svg.brush();\n\n      var _brushOn = true;\n\n      var _round;\n\n      var _renderHorizontalGridLine = false;\n      var _renderVerticalGridLine = false;\n      var _refocused = false,\n          _resizing = false;\n\n      var _unitCount;\n\n      var _zoomScale = [1, Infinity];\n      var _zoomOutRestrict = true;\n\n      var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n\n      var _nullZoom = d3.behavior.zoom().on('zoom', null);\n\n      var _hasBeenMouseZoomable = false;\n\n      var _rangeChart;\n\n      var _focusChart;\n\n      var _mouseZoomable = false;\n      var _clipPadding = 0;\n      var _outerRangeBandPadding = 0.5;\n      var _rangeBandPadding = 0;\n      var _useRightYAxis = false;\n      /**\n       * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n       * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n       * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n       * no effect on elastic scales.)\n       * @method rescale\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {dc.coordinateGridMixin}\n       */\n\n      _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n      };\n\n      _chart.resizing = function () {\n        return _resizing;\n      };\n      /**\n       * Get or set the range selection chart associated with this instance. Setting the range selection\n       * chart using this function will automatically update its selection brush when the current chart\n       * zooms in. In return the given range chart will also automatically attach this chart as its focus\n       * chart hence zoom in when range brush updates.\n       *\n       * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n       * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n       * the focus chart.\n       *\n       * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n       * @method rangeChart\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {dc.coordinateGridMixin} [rangeChart]\n       * @returns {dc.coordinateGridMixin}\n       */\n\n\n      _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n          return _rangeChart;\n        }\n\n        _rangeChart = rangeChart;\n\n        _rangeChart.focusChart(_chart);\n\n        return _chart;\n      };\n      /**\n       * Get or set the scale extent for mouse zooms.\n       * @method zoomScale\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Array<Number|Date>} [extent=[1, Infinity]]\n       * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n       */\n\n\n      _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n          return _zoomScale;\n        }\n\n        _zoomScale = extent;\n        return _chart;\n      };\n      /**\n       * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n       * @method zoomOutRestrict\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [zoomOutRestrict=true]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n\n\n      _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n          return _zoomOutRestrict;\n        }\n\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n      };\n\n      _chart._generateG = function (parent) {\n        if (parent === undefined) {\n          _parent = _chart.svg();\n        } else {\n          _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n        _g = _parent.append('g');\n        _chartBodyG = _g.append('g').attr('class', 'chart-body').attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')').attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n        return _g;\n      };\n      /**\n       * Get or set the root g element. This method is usually used to retrieve the g element in order to\n       * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n       * by dc.js internals, and resetting it might produce unpredictable result.\n       * @method g\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {SVGElement} [gElement]\n       * @returns {SVGElement|dc.coordinateGridMixin}\n       */\n\n\n      _chart.g = function (gElement) {\n        if (!arguments.length) {\n          return _g;\n        }\n\n        _g = gElement;\n        return _chart;\n      };\n      /**\n       * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n       * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n       * the range selection brush on the associated range selector chart.\n       * @method mouseZoomable\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [mouseZoomable=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n\n\n      _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n          return _mouseZoomable;\n        }\n\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n      };\n      /**\n       * Retrieve the svg group for the chart body.\n       * @method chartBodyG\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {SVGElement} [chartBodyG]\n       * @returns {SVGElement}\n       */\n\n\n      _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n          return _chartBodyG;\n        }\n\n        _chartBodyG = chartBodyG;\n        return _chart;\n      };\n      /**\n       * **mandatory**\n       *\n       * Get or set the x scale. The x scale can be any d3\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n       * @method x\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @example\n       * // set x to a linear scale\n       * chart.x(d3.scale.linear().domain([-2500, 2500]))\n       * // set x to a time scale to generate histogram\n       * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n       * @param {d3.scale} [xScale]\n       * @returns {d3.scale|dc.coordinateGridMixin}\n       */\n\n\n      _chart.x = function (xScale) {\n        if (!arguments.length) {\n          return _x;\n        }\n\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n\n        _chart.rescale();\n\n        return _chart;\n      };\n\n      _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n      };\n      /**\n       * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n       * the number of data projections on x axis such as the number of bars for a bar chart or the\n       * number of dots for a line chart. This function is expected to return a Javascript array of all\n       * data points on x axis, or the number of points on the axis. [d3 time range functions\n       * d3.time.days, d3.time.months, and\n       * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n       * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n       * a list of built-in units functions.\n       * @method xUnits\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @todo Add docs for utilities\n       * @example\n       * // set x units to count days\n       * chart.xUnits(d3.time.days);\n       * // set x units to count months\n       * chart.xUnits(d3.time.months);\n       *\n       * // A custom xUnits function can be used as long as it follows the following interface:\n       * // units in integer\n       * function(start, end, xDomain) {\n       *      // simply calculates how many integers in the domain\n       *      return Math.abs(end - start);\n       * };\n       *\n       * // fixed units\n       * function(start, end, xDomain) {\n       *      // be aware using fixed units will disable the focus/zoom ability on the chart\n       *      return 1000;\n       * @param {Function} [xUnits=dc.units.integers]\n       * @returns {Function|dc.coordinateGridMixin}\n       */\n\n\n      _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n          return _xUnits;\n        }\n\n        _xUnits = xUnits;\n        return _chart;\n      };\n      /**\n       * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n       * useful when x axis customization is required. The x axis in dc.js is an instance of a\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n       * therefore it supports any valid d3 axis manipulation.\n       *\n       * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n       * unexpected results. Note also that when used as a getter, this function is not chainable:\n       * it returns the axis, not the chart,\n       * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n       * so attempting to call chart functions after calling `.xAxis()` will fail}.\n       * @method xAxis\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n       * @example\n       * // customize x axis tick format\n       * chart.xAxis().tickFormat(function(v) {return v + '%';});\n       * // customize x axis tick values\n       * chart.xAxis().tickValues([0, 100, 200, 300]);\n       * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n       * @returns {d3.svg.axis|dc.coordinateGridMixin}\n       */\n\n\n      _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n          return _xAxis;\n        }\n\n        _xAxis = xAxis;\n        return _chart;\n      };\n      /**\n       * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n       * attempt to recalculate the x axis range whenever a redraw event is triggered.\n       * @method elasticX\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [elasticX=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n\n\n      _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n          return _xElasticity;\n        }\n\n        _xElasticity = elasticX;\n        return _chart;\n      };\n      /**\n       * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n       * axis if elasticX is turned on; otherwise it is ignored.\n       *\n       * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n       * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n       * and a percentage string will be treated the same as an integer. The unit will be determined by the\n       * xAxisPaddingUnit variable.\n       * @method xAxisPadding\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Number|String} [padding=0]\n       * @returns {Number|String|dc.coordinateGridMixin}\n       */\n\n\n      _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n          return _xAxisPadding;\n        }\n\n        _xAxisPadding = padding;\n        return _chart;\n      };\n      /**\n       * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n       * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n       * otherwise it is ignored.\n       *\n       * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n       * the available d3 time intervals; see\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n       * @method xAxisPaddingUnit\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {String} [unit='days']\n       * @returns {String|dc.coordinateGridMixin}\n       */\n\n\n      _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n          return _xAxisPaddingUnit;\n        }\n\n        _xAxisPaddingUnit = unit;\n        return _chart;\n      };\n      /**\n       * Returns the number of units displayed on the x axis using the unit measure configured by\n       * {@link dc.coordinateGridMixin#xUnits xUnits}.\n       * @method xUnitCount\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {Number}\n       */\n\n\n      _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n          var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n\n          if (units instanceof Array) {\n            _unitCount = units.length;\n          } else {\n            _unitCount = units;\n          }\n        }\n\n        return _unitCount;\n      };\n      /**\n       * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n       * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n       * chart.\n       * @method useRightYAxis\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [useRightYAxis=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n\n\n      _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n          return _useRightYAxis;\n        }\n\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n      };\n      /**\n       * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n       * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n       * trigger the appropriate logic.\n       * @method isOrdinal\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {Boolean}\n       */\n\n\n      _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n      };\n\n      _chart._useOuterPadding = function () {\n        return true;\n      };\n\n      _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n\n        return groups.map(_chart.keyAccessor());\n      };\n\n      function compareDomains(d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length || d1.some(function (elem, i) {\n          return elem && d2[i] ? elem.toString() !== d2[i].toString() : elem === d2[i];\n        });\n      }\n\n      function prepareXAxis(g, render) {\n        if (!_chart.isOrdinal()) {\n          if (_chart.elasticX()) {\n            _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n          }\n        } else {\n          // _chart.isOrdinal()\n          if (_chart.elasticX() || _x.domain().length === 0) {\n            _x.domain(_chart._ordinalXDomain());\n          }\n        } // has the domain changed?\n\n\n        var xdom = _x.domain();\n\n        if (render || compareDomains(_lastXDomain, xdom)) {\n          _chart.rescale();\n        }\n\n        _lastXDomain = xdom; // please can't we always use rangeBands for bar charts?\n\n        if (_chart.isOrdinal()) {\n          _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding, _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n          _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n        renderVerticalGridLines(g);\n      }\n\n      _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n          axisXG = g.append('g').attr('class', 'axis x').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n          axisXLab = g.append('text').attr('class', X_AXIS_LABEL_CLASS).attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' + (_chart.height() - _xAxisLabelPadding) + ')').attr('text-anchor', 'middle');\n        }\n\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n          axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')').call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' + (_chart.height() - _xAxisLabelPadding) + ')');\n      };\n\n      function renderVerticalGridLines(g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n          if (gridLineG.empty()) {\n            gridLineG = g.insert('g', ':first-child').attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n          }\n\n          var ticks = _xAxis.tickValues() ? _xAxis.tickValues() : typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain();\n          var lines = gridLineG.selectAll('line').data(ticks); // enter\n\n          var linesGEnter = lines.enter().append('line').attr('x1', function (d) {\n            return _x(d);\n          }).attr('y1', _chart._xAxisY() - _chart.margins().top).attr('x2', function (d) {\n            return _x(d);\n          }).attr('y2', 0).attr('opacity', 0);\n          dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 1); // update\n\n          dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay()).attr('x1', function (d) {\n            return _x(d);\n          }).attr('y1', _chart._xAxisY() - _chart.margins().top).attr('x2', function (d) {\n            return _x(d);\n          }).attr('y2', 0); // exit\n\n          lines.exit().remove();\n        } else {\n          gridLineG.selectAll('line').remove();\n        }\n      }\n\n      _chart._xAxisY = function () {\n        return _chart.height() - _chart.margins().bottom;\n      };\n\n      _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n      };\n      /**\n       * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n       * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n       * @method xAxisLabel\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {String} [labelText]\n       * @param {Number} [padding=12]\n       * @returns {String}\n       */\n\n\n      _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n          return _xAxisLabel;\n        }\n\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = padding === undefined ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n      };\n\n      _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n          if (_y === undefined) {\n            _y = d3.scale.linear();\n          }\n\n          var min = _chart.yAxisMin() || 0,\n              max = _chart.yAxisMax() || 0;\n\n          _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n\n        _yAxis = _yAxis.scale(_y);\n\n        if (_useRightYAxis) {\n          _yAxis.orient('right');\n        }\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n      };\n\n      _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n\n        var labelYPosition = _chart.margins().top + _chart.yAxisHeight() / 2;\n\n        if (axisYLab.empty() && text) {\n          axisYLab = _chart.g().append('text').attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')').attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label').attr('text-anchor', 'middle').text(text);\n        }\n\n        if (text && axisYLab.text() !== text) {\n          axisYLab.text(text);\n        }\n\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n      };\n\n      _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n\n        if (axisYG.empty()) {\n          axisYG = _chart.g().append('g').attr('class', 'axis ' + axisClass).attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')').call(axis);\n      };\n\n      _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? _chart.width() - _chart.margins().right : _chart._yAxisX();\n\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n\n        var labelPosition = _useRightYAxis ? _chart.width() - _yAxisLabelPadding : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n      };\n\n      _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n          var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n\n          if (gridLineG.empty()) {\n            gridLineG = g.insert('g', ':first-child').attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n          }\n\n          var lines = gridLineG.selectAll('line').data(ticks); // enter\n\n          var linesGEnter = lines.enter().append('line').attr('x1', 1).attr('y1', function (d) {\n            return scale(d);\n          }).attr('x2', _chart.xAxisLength()).attr('y2', function (d) {\n            return scale(d);\n          }).attr('opacity', 0);\n          dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 1); // update\n\n          dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay()).attr('x1', 1).attr('y1', function (d) {\n            return scale(d);\n          }).attr('x2', _chart.xAxisLength()).attr('y2', function (d) {\n            return scale(d);\n          }); // exit\n\n          lines.exit().remove();\n        } else {\n          gridLineG.selectAll('line').remove();\n        }\n      };\n\n      _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n      };\n      /**\n       * Set or get the y axis label. If setting the label, you may optionally include additional padding\n       * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n       * text height.\n       * @method yAxisLabel\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {String} [labelText]\n       * @param {Number} [padding=12]\n       * @returns {String|dc.coordinateGridMixin}\n       */\n\n\n      _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n          return _yAxisLabel;\n        }\n\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = padding === undefined ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n      };\n      /**\n       * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n       * @method y\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @param {d3.scale} [yScale]\n       * @returns {d3.scale|dc.coordinateGridMixin}\n       */\n\n\n      _chart.y = function (yScale) {\n        if (!arguments.length) {\n          return _y;\n        }\n\n        _y = yScale;\n\n        _chart.rescale();\n\n        return _chart;\n      };\n      /**\n       * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n       * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n       * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n       * valid d3 axis manipulation.\n       *\n       * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n       * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n       * returns the axis, not the chart,\n       * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n       * so attempting to call chart functions after calling `.yAxis()` will fail}.\n       * @method yAxis\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n       * @example\n       * // customize y axis tick format\n       * chart.yAxis().tickFormat(function(v) {return v + '%';});\n       * // customize y axis tick values\n       * chart.yAxis().tickValues([0, 100, 200, 300]);\n       * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n       * @returns {d3.svg.axis|dc.coordinateGridMixin}\n       */\n\n\n      _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n          return _yAxis;\n        }\n\n        _yAxis = yAxis;\n        return _chart;\n      };\n      /**\n       * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n       * attempt to recalculate the y axis range whenever a redraw event is triggered.\n       * @method elasticY\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [elasticY=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n\n\n      _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n          return _yElasticity;\n        }\n\n        _yElasticity = elasticY;\n        return _chart;\n      };\n      /**\n       * Turn on/off horizontal grid lines.\n       * @method renderHorizontalGridLines\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [renderHorizontalGridLines=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n\n\n      _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n          return _renderHorizontalGridLine;\n        }\n\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n      };\n      /**\n       * Turn on/off vertical grid lines.\n       * @method renderVerticalGridLines\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [renderVerticalGridLines=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n\n\n      _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n          return _renderVerticalGridLine;\n        }\n\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n      };\n      /**\n       * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n       * @method xAxisMin\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {*}\n       */\n\n\n      _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n          return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n      };\n      /**\n       * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n       * @method xAxisMax\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {*}\n       */\n\n\n      _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n          return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n      };\n      /**\n       * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n       * @method yAxisMin\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {*}\n       */\n\n\n      _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n          return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n      };\n      /**\n       * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n       * @method yAxisMax\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {*}\n       */\n\n\n      _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n          return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n      };\n      /**\n       * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n       * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n       *\n       * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n       * number or date axes. When padding a date axis, an integer represents number of days being padded\n       * and a percentage string will be treated the same as an integer.\n       * @method yAxisPadding\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Number|String} [padding=0]\n       * @returns {Number|dc.coordinateGridMixin}\n       */\n\n\n      _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n          return _yAxisPadding;\n        }\n\n        _yAxisPadding = padding;\n        return _chart;\n      };\n\n      _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n      };\n      /**\n       * Set or get the rounding function used to quantize the selection when brushing is enabled.\n       * @method round\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @example\n       * // set x unit round to by month, this will make sure range selection brush will\n       * // select whole months\n       * chart.round(d3.time.month.round);\n       * @param {Function} [round]\n       * @returns {Function|dc.coordinateGridMixin}\n       */\n\n\n      _chart.round = function (round) {\n        if (!arguments.length) {\n          return _round;\n        }\n\n        _round = round;\n        return _chart;\n      };\n\n      _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n          return _rangeBandPadding;\n        }\n\n        _rangeBandPadding = _;\n        return _chart;\n      };\n\n      _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n          return _outerRangeBandPadding;\n        }\n\n        _outerRangeBandPadding = _;\n        return _chart;\n      };\n\n      dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n          return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        if (_) {\n          _chart.brush().extent(_);\n        } else {\n          _chart.brush().clear();\n        }\n\n        return _chart;\n      });\n\n      _chart.brush = function (_) {\n        if (!arguments.length) {\n          return _brush;\n        }\n\n        _brush = _;\n        return _chart;\n      };\n\n      function brushHeight() {\n        return _chart._xAxisY() - _chart.margins().top;\n      }\n\n      _chart.renderBrush = function (g) {\n        if (_brushOn) {\n          _brush.on('brush', _chart._brushing);\n\n          _brush.on('brushstart', _chart._disableMouseZoom);\n\n          _brush.on('brushend', configureMouseZoom);\n\n          var gBrush = g.append('g').attr('class', 'brush').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')').call(_brush.x(_chart.x()));\n\n          _chart.setBrushY(gBrush, false);\n\n          _chart.setHandlePaths(gBrush);\n\n          if (_chart.hasFilter()) {\n            _chart.redrawBrush(g, false);\n          }\n        }\n      };\n\n      _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n      };\n\n      _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect').attr('height', brushHeight());\n        gBrush.selectAll('.resize path').attr('d', _chart.resizeHandlePath);\n      };\n\n      _chart.extendBrush = function () {\n        var extent = _brush.extent();\n\n        if (_chart.round()) {\n          extent[0] = extent.map(_chart.round())[0];\n          extent[1] = extent.map(_chart.round())[1];\n\n          _g.select('.brush').call(_brush.extent(extent));\n        }\n\n        return extent;\n      };\n\n      _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n      };\n\n      _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_g, false);\n\n        if (_chart.brushIsEmpty(extent)) {\n          dc.events.trigger(function () {\n            _chart.filter(null);\n\n            _chart.redrawGroup();\n          }, dc.constants.EVENT_DELAY);\n        } else {\n          var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n          dc.events.trigger(function () {\n            _chart.replaceFilter(rangedFilter);\n\n            _chart.redrawGroup();\n          }, dc.constants.EVENT_DELAY);\n        }\n      };\n\n      _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n          if (_chart.filter() && _chart.brush().empty()) {\n            _chart.brush().extent(_chart.filter());\n          }\n\n          var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n\n          _chart.setBrushY(gBrush);\n\n          gBrush.call(_chart.brush().x(_chart.x()).extent(_chart.brush().extent()));\n        }\n\n        _chart.fadeDeselectedArea();\n      };\n\n      _chart.fadeDeselectedArea = function () {// do nothing, sub-chart should override this function\n      }; // borrowed from Crossfilter example\n\n\n      _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'),\n            x = e ? 1 : -1,\n            y = brushHeight() / 3;\n        return 'M' + 0.5 * x + ',' + y + 'A6,6 0 0 ' + e + ' ' + 6.5 * x + ',' + (y + 6) + 'V' + (2 * y - 6) + 'A6,6 0 0 ' + e + ' ' + 0.5 * x + ',' + 2 * y + 'Z' + 'M' + 2.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8) + 'M' + 4.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8);\n      };\n\n      function getClipPathId() {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n      }\n      /**\n       * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n       * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n       * will be exactly the chart body area minus the margins.\n       * @method clipPadding\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Number} [padding=5]\n       * @returns {Number|dc.coordinateGridMixin}\n       */\n\n\n      _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n          return _clipPadding;\n        }\n\n        _clipPadding = padding;\n        return _chart;\n      };\n\n      function generateClipPath() {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs'); // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n        var padding = _clipPadding * 2;\n        dc.utils.appendOrSelect(chartBodyClip, 'rect').attr('width', _chart.xAxisLength() + padding).attr('height', _chart.yAxisHeight() + padding).attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n      }\n\n      _chart._preprocessData = function () {};\n\n      _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n\n        generateClipPath();\n        drawChart(true);\n        configureMouseZoom();\n        return _chart;\n      };\n\n      _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n        return _chart;\n      };\n\n      function drawChart(render) {\n        if (_chart.isOrdinal()) {\n          _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n          _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n          _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n          _chart.renderBrush(_chart.g(), false);\n        } else {\n          _chart.redrawBrush(_chart.g(), _resizing);\n        }\n\n        _chart.fadeDeselectedArea();\n\n        _resizing = false;\n      }\n\n      function configureMouseZoom() {\n        if (_mouseZoomable) {\n          _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n          _chart._disableMouseZoom();\n        }\n      }\n\n      _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n\n        _zoom.x(_chart.x()).scaleExtent(_zoomScale).size([_chart.width(), _chart.height()]).duration(_chart.transitionDuration());\n\n        _chart.root().call(_zoom);\n      };\n\n      _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n      };\n\n      function zoomHandler() {\n        _refocused = true;\n\n        if (_zoomOutRestrict) {\n          var constraint = _xOriginalDomain;\n\n          if (_rangeChart) {\n            constraint = intersectExtents(constraint, _rangeChart.x().domain());\n          }\n\n          var constrained = constrainExtent(_chart.x().domain(), constraint);\n\n          if (constrained) {\n            _chart.x().domain(constrained);\n          }\n        }\n\n        var domain = _chart.x().domain();\n\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n\n        _chart.replaceFilter(domFilter);\n\n        _chart.rescale();\n\n        _chart.redraw();\n\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n          dc.events.trigger(function () {\n            _rangeChart.replaceFilter(domFilter);\n\n            _rangeChart.redraw();\n          });\n        }\n\n        _chart._invokeZoomedListener();\n\n        dc.events.trigger(function () {\n          _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n      }\n\n      function intersectExtents(ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n          console.warn('could not intersect extents');\n        }\n\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n      }\n\n      function constrainExtent(extent, constraint) {\n        var size = extent[1] - extent[0];\n\n        if (extent[0] < constraint[0]) {\n          return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n          return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n          return null;\n        }\n      }\n      /**\n       * Zoom this chart to focus on the given range. The given range should be an array containing only\n       * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n       * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n       * otherwise focus will be ignored.\n       * @method focus\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @example\n       * chart.on('renderlet', function(chart) {\n       *     // smooth the rendering through event throttling\n       *     dc.events.trigger(function(){\n       *          // focus some other chart to the range selected by user on this chart\n       *          someOtherChart.focus(chart.filter());\n       *     });\n       * })\n       * @param {Array<Number>} [range]\n       */\n\n\n      _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n          _chart.x().domain(range);\n        } else {\n          _chart.x().domain(_xOriginalDomain);\n        }\n\n        _zoom.x(_chart.x());\n\n        zoomHandler();\n      };\n\n      _chart.refocused = function () {\n        return _refocused;\n      };\n\n      _chart.focusChart = function (c) {\n        if (!arguments.length) {\n          return _focusChart;\n        }\n\n        _focusChart = c;\n\n        _chart.on('filtered', function (chart) {\n          if (!chart.filter()) {\n            dc.events.trigger(function () {\n              _focusChart.x().domain(_focusChart.xOriginalDomain());\n            });\n          } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n            dc.events.trigger(function () {\n              _focusChart.focus(chart.filter());\n            });\n          }\n        });\n\n        return _chart;\n      };\n\n      function rangesEqual(range1, range2) {\n        if (!range1 && !range2) {\n          return true;\n        } else if (!range1 || !range2) {\n          return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n          return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() && range1[1].valueOf() === range2[1].valueOf()) {\n          return true;\n        }\n\n        return false;\n      }\n      /**\n       * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n       * across a chart with a quantitative scale to perform range filtering based on the extent of the\n       * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n       * un-filter them. However turning on the brush filter will disable other interactive elements on\n       * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n       * if enabled, but only via scrolling (panning will be disabled.)\n       * @method brushOn\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [brushOn=true]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n\n\n      _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n          return _brushOn;\n        }\n\n        _brushOn = brushOn;\n        return _chart;\n      };\n\n      function hasRangeSelected(range) {\n        return range instanceof Array && range.length > 1;\n      }\n\n      return _chart;\n    };\n    /**\n     * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n     * @name stackMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.stackMixin}\n     */\n\n\n    dc.stackMixin = function (_chart) {\n      function prepareValues(layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n          return {\n            x: _chart.keyAccessor()(d, i),\n            y: layer.hidden ? null : valAccessor(d, i),\n            data: d,\n            layer: layer.name,\n            hidden: layer.hidden\n          };\n        });\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n      }\n\n      var _stackLayout = d3.layout.stack().values(prepareValues);\n\n      var _stack = [];\n      var _titles = {};\n      var _hidableStacks = false;\n      var _evadeDomainFilter = false;\n\n      function domainFilter() {\n        if (!_chart.x() || _evadeDomainFilter) {\n          return d3.functor(true);\n        }\n\n        var xDomain = _chart.x().domain();\n\n        if (_chart.isOrdinal()) {\n          // TODO #416\n          //var domainSet = d3.set(xDomain);\n          return function () {\n            return true; //domainSet.has(p.x);\n          };\n        }\n\n        if (_chart.elasticX()) {\n          return function () {\n            return true;\n          };\n        }\n\n        return function (p) {\n          //return true;\n          return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n      }\n      /**\n       * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n       * in the same chart will share the same key accessor and therefore the same set of keys.\n       *\n       * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n       * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n       * generate the legend label.\n       * @method stack\n       * @memberof dc.stackMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n       * @example\n       * // stack group using default accessor\n       * chart.stack(valueSumGroup)\n       * // stack group using custom accessor\n       * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n       * @param {crossfilter.group} group\n       * @param {String} [name]\n       * @param {Function} [accessor]\n       * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n       */\n\n\n      _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n          return _stack;\n        }\n\n        if (arguments.length <= 2) {\n          accessor = name;\n        }\n\n        var layer = {\n          group: group\n        };\n\n        if (typeof name === 'string') {\n          layer.name = name;\n        }\n\n        if (typeof accessor === 'function') {\n          layer.accessor = accessor;\n        }\n\n        _stack.push(layer);\n\n        return _chart;\n      };\n\n      dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n          return _chart._group();\n        }\n\n        _stack = [];\n        _titles = {};\n\n        _chart.stack(g, n);\n\n        if (f) {\n          _chart.valueAccessor(f);\n        }\n\n        return _chart._group(g, n);\n      });\n      /**\n       * Allow named stacks to be hidden or shown by clicking on legend items.\n       * This does not affect the behavior of hideStack or showStack.\n       * @method hidableStacks\n       * @memberof dc.stackMixin\n       * @instance\n       * @param {Boolean} [hidableStacks=false]\n       * @returns {Boolean|dc.stackMixin}\n       */\n\n      _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n          return _hidableStacks;\n        }\n\n        _hidableStacks = hidableStacks;\n        return _chart;\n      };\n\n      function findLayerByName(n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n\n        return _stack[i];\n      }\n      /**\n       * Hide all stacks on the chart with the given name.\n       * The chart must be re-rendered for this change to appear.\n       * @method hideStack\n       * @memberof dc.stackMixin\n       * @instance\n       * @param {String} stackName\n       * @returns {dc.stackMixin}\n       */\n\n\n      _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n\n        if (layer) {\n          layer.hidden = true;\n        }\n\n        return _chart;\n      };\n      /**\n       * Show all stacks on the chart with the given name.\n       * The chart must be re-rendered for this change to appear.\n       * @method showStack\n       * @memberof dc.stackMixin\n       * @instance\n       * @param {String} stackName\n       * @returns {dc.stackMixin}\n       */\n\n\n      _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n\n        if (layer) {\n          layer.hidden = false;\n        }\n\n        return _chart;\n      };\n\n      _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n      };\n\n      _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n          return p.y < 0 ? p.y + p.y0 : p.y0;\n        });\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n      };\n\n      _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n          return p.y > 0 ? p.y + p.y0 : p.y0;\n        });\n        return dc.utils.add(max, _chart.yAxisPadding());\n      };\n\n      function flattenStack() {\n        var valueses = _chart.data().map(function (layer) {\n          return layer.values;\n        });\n\n        return Array.prototype.concat.apply([], valueses);\n      }\n\n      _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n      };\n\n      _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n      };\n      /**\n       * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n       * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n       * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n       * use title otherwise the brush layer will block tooltip trigger.\n       *\n       * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n       * is not provided, the first stack is implied.\n       * @method title\n       * @memberof dc.stackMixin\n       * @instance\n       * @example\n       * // set a title function on 'first stack'\n       * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n       * // get a title function from 'second stack'\n       * var secondTitleFunction = chart.title('second stack');\n       * @param {String} [stackName]\n       * @param {Function} [titleAccessor]\n       * @returns {String|dc.stackMixin}\n       */\n\n\n      dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n          return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n          return _chart._title(stackName);\n        }\n\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n          return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n          return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n        return _chart;\n      });\n      /**\n       * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n       * propagates it to the next.\n       * @method stackLayout\n       * @memberof dc.stackMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n       * @param {Function} [stack=d3.layout.stack]\n       * @returns {Function|dc.stackMixin}\n       */\n\n      _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n          return _stackLayout;\n        }\n\n        _stackLayout = stack;\n\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n          _stackLayout.values(prepareValues);\n        }\n\n        return _chart;\n      };\n      /**\n       * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n       * where points are filtered to the current domain. While this is a useful optimization, it is\n       * incorrectly implemented: the next point outside the domain is required in order to draw lines\n       * that are clipped to the bounds, as well as bars that are partly clipped.\n       *\n       * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n       * that fix is published, so set this flag to skip any filtering of points.\n       *\n       * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n       * @method evadeDomainFilter\n       * @memberof dc.stackMixin\n       * @instance\n       * @param {Boolean} [evadeDomainFilter=false]\n       * @returns {Boolean|dc.stackMixin}\n       */\n\n\n      _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n          return _evadeDomainFilter;\n        }\n\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n      };\n\n      function visability(l) {\n        return !l.hidden;\n      }\n\n      _chart.data(function () {\n        var layers = _stack.filter(visability);\n\n        return layers.length ? _chart.stackLayout()(layers) : [];\n      });\n\n      _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n\n        var ordered = _chart._computeOrderedGroups(flat);\n\n        return ordered.map(_chart.keyAccessor());\n      };\n\n      _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n      });\n\n      _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n          return {\n            chart: _chart,\n            name: layer.name,\n            hidden: layer.hidden || false,\n            color: _chart.getColor.call(layer, layer.values, i)\n          };\n        });\n      };\n\n      _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n      };\n\n      _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n          if (_chart.isLegendableHidden(d)) {\n            _chart.showStack(d.name);\n          } else {\n            _chart.hideStack(d.name);\n          } //_chart.redraw();\n\n\n          _chart.renderGroup();\n        }\n      };\n\n      return _chart;\n    };\n    /**\n     * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n     * Row and Pie Charts.\n     *\n     * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n     * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n     * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n     * others* element is clicked.\n     * @name capMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.capMixin}\n     */\n\n\n    dc.capMixin = function (_chart) {\n      var _cap = Infinity,\n          _takeFront = true;\n      var _othersLabel = 'Others'; // emulate old group.top(N) ordering\n\n      _chart.ordering(function (kv) {\n        return -kv.value;\n      });\n\n      var _othersGrouper = function _othersGrouper(topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n\n        if (restItemsSum > 0) {\n          return topItems.concat([{\n            others: restKeys,\n            key: _chart.othersLabel(),\n            value: restItemsSum\n          }]);\n        }\n\n        return topItems;\n      };\n\n      _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n          return d.key;\n        }\n\n        return _chart.keyAccessor()(d, i);\n      };\n\n      _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n          return d.value;\n        }\n\n        return _chart.valueAccessor()(d, i);\n      }; // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n      // whether top means front or back depends on takeFront\n\n\n      _chart.data(function (group) {\n        if (_cap === Infinity) {\n          return _chart._computeOrderedGroups(group.all());\n        } else {\n          var items = group.all(),\n              rest;\n          items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n          if (_cap) {\n            if (_takeFront) {\n              rest = items.slice(_cap);\n              items = items.slice(0, _cap);\n            } else {\n              var start = Math.max(0, items.length - _cap);\n              rest = items.slice(0, start);\n              items = items.slice(start);\n            }\n          }\n\n          if (_othersGrouper) {\n            return _othersGrouper(items, rest);\n          }\n\n          return items;\n        }\n      });\n      /**\n       * Get or set the count of elements to that will be included in the cap. If there is an\n       * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n       * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n       *\n       * As of dc.js 2.1 and onward, the capped charts use\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n       * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n       * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n       * to keep, from which end of the resulting array.\n       *\n       * **Migration note:** Up through dc.js 2.0.*, capping used\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n       * which selects the largest items according to\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n       * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n       * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n       * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n       *\n       * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n       * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n       *\n       * If you want to cap by one ordering but sort by another, please\n       * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n       * need to work up an example.\n       * @method cap\n       * @memberof dc.capMixin\n       * @instance\n       * @param {Number} [count=Infinity]\n       * @returns {Number|dc.capMixin}\n       */\n\n\n      _chart.cap = function (count) {\n        if (!arguments.length) {\n          return _cap;\n        }\n\n        _cap = count;\n        return _chart;\n      };\n      /**\n       * Get or set the direction of capping. If set, the chart takes the first\n       * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n       * it takes the last `cap` elements.\n       * @method takeFront\n       * @memberof dc.capMixin\n       * @instance\n       * @param {Boolean} [takeFront=true]\n       * @returns {Boolean|dc.capMixin}\n       */\n\n\n      _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n          return _takeFront;\n        }\n\n        _takeFront = takeFront;\n        return _chart;\n      };\n      /**\n       * Get or set the label for *Others* slice when slices cap is specified.\n       * @method othersLabel\n       * @memberof dc.capMixin\n       * @instance\n       * @param {String} [label=\"Others\"]\n       * @returns {String|dc.capMixin}\n       */\n\n\n      _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n          return _othersLabel;\n        }\n\n        _othersLabel = label;\n        return _chart;\n      };\n      /**\n       * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n       * if the slices cap is specified. If set to a falsy value, no others will be added.\n       *\n       * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n       * the items. By default the grouper function computes the sum of the rest.\n       * @method othersGrouper\n       * @memberof dc.capMixin\n       * @instance\n       * @example\n       * // Do not show others\n       * chart.othersGrouper(null);\n       * // Default others grouper\n       * chart.othersGrouper(function (topItems, restItems) {\n       *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n       *         restKeys = restItems.map(_chart.keyAccessor());\n       *     if (restItemsSum > 0) {\n       *         return topItems.concat([{\n       *             others: restKeys,\n       *             key: _chart.othersLabel(),\n       *             value: restItemsSum\n       *         }]);\n       *     }\n       *     return topItems;\n       * });\n       * @param {Function} [grouperFunction]\n       * @returns {Function|dc.capMixin}\n       */\n\n\n      _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n          return _othersGrouper;\n        }\n\n        _othersGrouper = grouperFunction;\n        return _chart;\n      };\n\n      dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n          _chart.filter([d.others]);\n        }\n\n        _chart._onClick(d);\n      });\n      return _chart;\n    };\n    /**\n     * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n     * @name bubbleMixin\n     * @memberof dc\n     * @mixin\n     * @mixes dc.colorMixin\n     * @param {Object} _chart\n     * @returns {dc.bubbleMixin}\n     */\n\n\n    dc.bubbleMixin = function (_chart) {\n      var _maxBubbleRelativeSize = 0.3;\n      var _minRadiusWithLabel = 10;\n      var _sortBubbleSize = false;\n      var _elasticRadius = false;\n      _chart.BUBBLE_NODE_CLASS = 'node';\n      _chart.BUBBLE_CLASS = 'bubble';\n      _chart.MIN_RADIUS = 10;\n      _chart = dc.colorMixin(_chart);\n\n      _chart.renderLabel(true);\n\n      _chart.data(function (group) {\n        var data = group.all();\n\n        if (_sortBubbleSize) {\n          // sort descending so smaller bubbles are on top\n          var radiusAccessor = _chart.radiusValueAccessor();\n\n          data.sort(function (a, b) {\n            return d3.descending(radiusAccessor(a), radiusAccessor(b));\n          });\n        }\n\n        return data;\n      });\n\n      var _r = d3.scale.linear().domain([0, 100]);\n\n      var _rValueAccessor = function _rValueAccessor(d) {\n        return d.r;\n      };\n      /**\n       * Get or set the bubble radius scale. By default the bubble chart uses\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n       * as its radius scale.\n       * @method r\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n       * @returns {d3.scale|dc.bubbleMixin}\n       */\n\n\n      _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n          return _r;\n        }\n\n        _r = bubbleRadiusScale;\n        return _chart;\n      };\n      /**\n       * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n       * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n       * @method elasticRadius\n       * @memberof dc.bubbleChart\n       * @instance\n       * @param {Boolean} [elasticRadius=false]\n       * @returns {Boolean|dc.bubbleChart}\n       */\n\n\n      _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n          return _elasticRadius;\n        }\n\n        _elasticRadius = elasticRadius;\n        return _chart;\n      };\n\n      _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n          _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n      };\n      /**\n       * Get or set the radius value accessor function. If set, the radius value accessor function will\n       * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n       * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n       * size.\n       * @method radiusValueAccessor\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @param {Function} [radiusValueAccessor]\n       * @returns {Function|dc.bubbleMixin}\n       */\n\n\n      _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n          return _rValueAccessor;\n        }\n\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n      };\n\n      _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n          return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n      };\n\n      _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n          return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n      };\n\n      _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n\n        var r = _chart.r()(value);\n\n        if (isNaN(r) || value <= 0) {\n          r = 0;\n        }\n\n        return r;\n      };\n\n      var labelFunction = function labelFunction(d) {\n        return _chart.label()(d);\n      };\n\n      var shouldLabel = function shouldLabel(d) {\n        return _chart.bubbleR(d) > _minRadiusWithLabel;\n      };\n\n      var labelOpacity = function labelOpacity(d) {\n        return shouldLabel(d) ? 1 : 0;\n      };\n\n      var labelPointerEvent = function labelPointerEvent(d) {\n        return shouldLabel(d) ? 'all' : 'none';\n      };\n\n      _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n          var label = bubbleGEnter.select('text');\n\n          if (label.empty()) {\n            label = bubbleGEnter.append('text').attr('text-anchor', 'middle').attr('dy', '.3em').on('click', _chart.onClick);\n          }\n\n          label.attr('opacity', 0).attr('pointer-events', labelPointerEvent).text(labelFunction);\n          dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', labelOpacity);\n        }\n      };\n\n      _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n          var labels = bubbleGEnter.select('text').attr('pointer-events', labelPointerEvent).text(labelFunction);\n          dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', labelOpacity);\n        }\n      };\n\n      var titleFunction = function titleFunction(d) {\n        return _chart.title()(d);\n      };\n\n      _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n          var title = g.select('title');\n\n          if (title.empty()) {\n            g.append('title').text(titleFunction);\n          }\n        }\n      };\n\n      _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n          g.select('title').text(titleFunction);\n        }\n      };\n      /**\n       * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n       * bubbles will be sorted by their radius, with smaller bubbles in front.\n       * @method sortBubbleSize\n       * @memberof dc.bubbleChart\n       * @instance\n       * @param {Boolean} [sortBubbleSize=false]\n       * @returns {Boolean|dc.bubbleChart}\n       */\n\n\n      _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n          return _sortBubbleSize;\n        }\n\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n      };\n      /**\n       * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n       * @method minRadius\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @param {Number} [radius=10]\n       * @returns {Number|dc.bubbleMixin}\n       */\n\n\n      _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n          return _chart.MIN_RADIUS;\n        }\n\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n      };\n      /**\n       * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n       * then no label will be rendered.\n       * @method minRadiusWithLabel\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @param {Number} [radius=10]\n       * @returns {Number|dc.bubbleMixin}\n       */\n\n\n      _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n          return _minRadiusWithLabel;\n        }\n\n        _minRadiusWithLabel = radius;\n        return _chart;\n      };\n      /**\n       * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n       * when the difference in radius between bubbles is too great.\n       * @method maxBubbleRelativeSize\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @param {Number} [relativeSize=0.3]\n       * @returns {Number|dc.bubbleMixin}\n       */\n\n\n      _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n          return _maxBubbleRelativeSize;\n        }\n\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n      };\n\n      _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n          _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n            if (_chart.isSelectedNode(d)) {\n              _chart.highlightSelected(this);\n            } else {\n              _chart.fadeDeselected(this);\n            }\n          });\n        } else {\n          _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n            _chart.resetHighlight(this);\n          });\n        }\n      };\n\n      _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n      };\n\n      _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n          _chart.filter(filter);\n\n          _chart.redrawGroup();\n        });\n      };\n\n      return _chart;\n    };\n    /**\n     * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n     * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n     * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n     * which defaults to sorting by key.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * @class pieChart\n     * @memberof dc\n     * @mixes dc.capMixin\n     * @mixes dc.colorMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a pie chart under #chart-container1 element using the default global chart group\n     * var chart1 = dc.pieChart('#chart-container1');\n     * // create a pie chart under #chart-container2 element using chart group A\n     * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.pieChart}\n     */\n\n\n    dc.pieChart = function (parent, chartGroup) {\n      var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n      var _sliceCssClass = 'pie-slice';\n      var _labelCssClass = 'pie-label';\n      var _sliceGroupCssClass = 'pie-slice-group';\n      var _labelGroupCssClass = 'pie-label-group';\n      var _emptyCssClass = 'empty-chart';\n      var _emptyTitle = 'empty';\n\n      var _radius,\n          _givenRadius,\n          // specified radius, if any\n      _innerRadius = 0,\n          _externalRadiusPadding = 0;\n\n      var _g;\n\n      var _cx;\n\n      var _cy;\n\n      var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n\n      var _externalLabelRadius;\n\n      var _drawPaths = false;\n\n      var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n      _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n      _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n      });\n      /**\n       * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n       * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n       * @method slicesCap\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [cap]\n       * @returns {Number|dc.pieChart}\n       */\n\n\n      _chart.slicesCap = _chart.cap;\n\n      _chart.label(_chart.cappedKeyAccessor);\n\n      _chart.renderLabel(true);\n\n      _chart.transitionDuration(350);\n\n      _chart.transitionDelay(0);\n\n      _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg().append('g').attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n        return _chart;\n      };\n\n      function drawChart() {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius = d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n        var arc = buildArcs();\n        var pie = pieLayout();\n        var pieData; // if we have data...\n\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n          pieData = pie(_chart.data());\n\n          _g.classed(_emptyCssClass, false);\n        } else {\n          // otherwise we'd be getting NaNs, so override\n          // note: abuse others for its ignoring the value accessor\n          pieData = pie([{\n            key: _emptyTitle,\n            value: 1,\n            others: [_emptyTitle]\n          }]);\n\n          _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n          var slices = _g.select('g.' + _sliceGroupCssClass).selectAll('g.' + _sliceCssClass).data(pieData);\n\n          var labels = _g.select('g.' + _labelGroupCssClass).selectAll('text.' + _labelCssClass).data(pieData);\n\n          createElements(slices, labels, arc, pieData);\n          updateElements(pieData, arc);\n          removeElements(slices, labels);\n          highlightFilter();\n          dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n      }\n\n      function createElements(slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n        createSlicePath(slicesEnter, arc);\n        createTitles(slicesEnter);\n        createLabels(labels, pieData, arc);\n      }\n\n      function createSliceNodes(slices) {\n        var slicesEnter = slices.enter().append('g').attr('class', function (d, i) {\n          return _sliceCssClass + ' _' + i;\n        });\n        return slicesEnter;\n      }\n\n      function createSlicePath(slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path').attr('fill', fill).on('click', onClick).attr('d', function (d, i) {\n          return safeArc(d, i, arc);\n        });\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n\n        if (transition.attrTween) {\n          transition.attrTween('d', tweenPie);\n        }\n      }\n\n      function createTitles(slicesEnter) {\n        if (_chart.renderTitle()) {\n          slicesEnter.append('title').text(function (d) {\n            return _chart.title()(d.data);\n          });\n        }\n      }\n\n      _chart._applyLabelText = function (labels) {\n        labels.text(function (d) {\n          var data = d.data;\n\n          if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n            return '';\n          }\n\n          return _chart.label()(d.data);\n        });\n      };\n\n      function positionLabels(labels, arc) {\n        _chart._applyLabelText(labels);\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', function (d) {\n          return labelPosition(d, arc);\n        }).attr('text-anchor', 'middle');\n      }\n\n      function highlightSlice(i, whether) {\n        _chart.select('g.pie-slice._' + i).classed('highlight', whether);\n      }\n\n      function createLabels(labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n          var labelsEnter = labels.enter().append('text').attr('class', function (d, i) {\n            var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n\n            if (_externalLabelRadius) {\n              classes += ' external';\n            }\n\n            return classes;\n          }).on('click', onClick).on('mouseover', function (d, i) {\n            highlightSlice(i, true);\n          }).on('mouseout', function (d, i) {\n            highlightSlice(i, false);\n          });\n          positionLabels(labelsEnter, arc);\n\n          if (_externalLabelRadius && _drawPaths) {\n            updateLabelPaths(pieData, arc);\n          }\n        }\n      }\n\n      function updateLabelPaths(pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass).data(pieData);\n\n        polyline.enter().append('polyline').attr('class', function (d, i) {\n          return 'pie-path _' + i + ' ' + _sliceCssClass;\n        }).on('click', onClick).on('mouseover', function (d, i) {\n          highlightSlice(i, true);\n        }).on('mouseout', function (d, i) {\n          highlightSlice(i, false);\n        });\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc().outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay()); // this is one rare case where d3.selection differs from d3.transition\n\n        if (transition.attrTween) {\n          transition.attrTween('points', function (d) {\n            var current = this._current || d;\n            current = {\n              startAngle: current.startAngle,\n              endAngle: current.endAngle\n            };\n            var interpolate = d3.interpolate(current, d);\n            this._current = interpolate(0);\n            return function (t) {\n              var d2 = interpolate(t);\n              return [arc.centroid(d2), arc2.centroid(d2)];\n            };\n          });\n        } else {\n          transition.attr('points', function (d) {\n            return [arc.centroid(d), arc2.centroid(d)];\n          });\n        }\n\n        transition.style('visibility', function (d) {\n          return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n      }\n\n      function updateElements(pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n      }\n\n      function updateSlicePaths(pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass).data(pieData).select('path').attr('d', function (d, i) {\n          return safeArc(d, i, arc);\n        });\n\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n\n        if (transition.attrTween) {\n          transition.attrTween('d', tweenPie);\n        }\n\n        transition.attr('fill', fill);\n      }\n\n      function updateLabels(pieData, arc) {\n        if (_chart.renderLabel()) {\n          var labels = _g.selectAll('text.' + _labelCssClass).data(pieData);\n\n          positionLabels(labels, arc);\n\n          if (_externalLabelRadius && _drawPaths) {\n            updateLabelPaths(pieData, arc);\n          }\n        }\n      }\n\n      function updateTitles(pieData) {\n        if (_chart.renderTitle()) {\n          _g.selectAll('g.' + _sliceCssClass).data(pieData).select('title').text(function (d) {\n            return _chart.title()(d.data);\n          });\n        }\n      }\n\n      function removeElements(slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n      }\n\n      function highlightFilter() {\n        if (_chart.hasFilter()) {\n          _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n            if (isSelectedSlice(d)) {\n              _chart.highlightSelected(this);\n            } else {\n              _chart.fadeDeselected(this);\n            }\n          });\n        } else {\n          _chart.selectAll('g.' + _sliceCssClass).each(function () {\n            _chart.resetHighlight(this);\n          });\n        }\n      }\n      /**\n       * Get or set the external radius padding of the pie chart. This will force the radius of the\n       * pie chart to become smaller or larger depending on the value.\n       * @method externalRadiusPadding\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [externalRadiusPadding=0]\n       * @returns {Number|dc.pieChart}\n       */\n\n\n      _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n          return _externalRadiusPadding;\n        }\n\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n      };\n      /**\n       * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n       * pie chart will be rendered as a doughnut chart.\n       * @method innerRadius\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [innerRadius=0]\n       * @returns {Number|dc.pieChart}\n       */\n\n\n      _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n          return _innerRadius;\n        }\n\n        _innerRadius = innerRadius;\n        return _chart;\n      };\n      /**\n       * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n       * chart width and height.\n       * @method radius\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [radius]\n       * @returns {Number|dc.pieChart}\n       */\n\n\n      _chart.radius = function (radius) {\n        if (!arguments.length) {\n          return _givenRadius;\n        }\n\n        _givenRadius = radius;\n        return _chart;\n      };\n      /**\n       * Get or set center x coordinate position. Default is center of svg.\n       * @method cx\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [cx]\n       * @returns {Number|dc.pieChart}\n       */\n\n\n      _chart.cx = function (cx) {\n        if (!arguments.length) {\n          return _cx || _chart.width() / 2;\n        }\n\n        _cx = cx;\n        return _chart;\n      };\n      /**\n       * Get or set center y coordinate position. Default is center of svg.\n       * @method cy\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [cy]\n       * @returns {Number|dc.pieChart}\n       */\n\n\n      _chart.cy = function (cy) {\n        if (!arguments.length) {\n          return _cy || _chart.height() / 2;\n        }\n\n        _cy = cy;\n        return _chart;\n      };\n\n      function buildArcs() {\n        return d3.svg.arc().outerRadius(_radius - _externalRadiusPadding).innerRadius(_innerRadius);\n      }\n\n      function isSelectedSlice(d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n      }\n\n      _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n      };\n      /**\n       * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n       * display a slice label.\n       * @method minAngleForLabel\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [minAngleForLabel=0.5]\n       * @returns {Number|dc.pieChart}\n       */\n\n\n      _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n          return _minAngleForLabel;\n        }\n\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n      };\n\n      function pieLayout() {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n      }\n\n      function sliceTooSmall(d) {\n        var angle = d.endAngle - d.startAngle;\n        return isNaN(angle) || angle < _minAngleForLabel;\n      }\n\n      function sliceHasNoData(d) {\n        return _chart.cappedValueAccessor(d) === 0;\n      }\n\n      function tweenPie(b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n\n        if (isOffCanvas(current)) {\n          current = {\n            startAngle: 0,\n            endAngle: 0\n          };\n        } else {\n          // only interpolate startAngle & endAngle, not the whole data object\n          current = {\n            startAngle: current.startAngle,\n            endAngle: current.endAngle\n          };\n        }\n\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n          return safeArc(i(t), 0, buildArcs());\n        };\n      }\n\n      function isOffCanvas(current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n      }\n\n      function fill(d, i) {\n        return _chart.getColor(d.data, i);\n      }\n\n      function onClick(d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n          _chart.onClick(d.data, i);\n        }\n      }\n\n      function safeArc(d, i, arc) {\n        var path = arc(d, i);\n\n        if (path.indexOf('NaN') >= 0) {\n          path = 'M0,0';\n        }\n\n        return path;\n      }\n      /**\n       * Title to use for the only slice when there is no data.\n       * @method emptyTitle\n       * @memberof dc.pieChart\n       * @instance\n       * @param {String} [title]\n       * @returns {String|dc.pieChart}\n       */\n\n\n      _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n          return _emptyTitle;\n        }\n\n        _emptyTitle = title;\n        return _chart;\n      };\n      /**\n       * Position slice labels offset from the outer edge of the chart.\n       *\n       * The argument specifies the extra radius to be added for slice labels.\n       * @method externalLabels\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [externalLabelRadius]\n       * @returns {Number|dc.pieChart}\n       */\n\n\n      _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n          return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n          _externalLabelRadius = externalLabelRadius;\n        } else {\n          _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n      };\n      /**\n       * Get or set whether to draw lines from pie slices to their labels.\n       *\n       * @method drawPaths\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Boolean} [drawPaths]\n       * @returns {Boolean|dc.pieChart}\n       */\n\n\n      _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n          return _drawPaths;\n        }\n\n        _drawPaths = drawPaths;\n        return _chart;\n      };\n\n      function labelPosition(d, arc) {\n        var centroid;\n\n        if (_externalLabelRadius) {\n          centroid = d3.svg.arc().outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).centroid(d);\n        } else {\n          centroid = arc.centroid(d);\n        }\n\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n          return 'translate(0,0)';\n        } else {\n          return 'translate(' + centroid + ')';\n        }\n      }\n\n      _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n          var legendable = {\n            name: d.key,\n            data: d.value,\n            others: d.others,\n            chart: _chart\n          };\n          legendable.color = _chart.getColor(d, i);\n          return legendable;\n        });\n      };\n\n      _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n      };\n\n      _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n      };\n\n      _chart.legendToggle = function (d) {\n        _chart.onClick({\n          key: d.name,\n          others: d.others\n        });\n      };\n\n      function highlightSliceFromLegendable(legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n          if (legendable.name === d.data.key) {\n            d3.select(this).classed('highlight', highlighted);\n          }\n        });\n      }\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * Concrete bar chart/histogram implementation.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n     * @class barChart\n     * @memberof dc\n     * @mixes dc.stackMixin\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a bar chart under #chart-container1 element using the default global chart group\n     * var chart1 = dc.barChart('#chart-container1');\n     * // create a bar chart under #chart-container2 element using chart group A\n     * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = dc.barChart(compositeChart);\n     * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n     * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n     * composite chart instance instead.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.barChart}\n     */\n\n\n    dc.barChart = function (parent, chartGroup) {\n      var MIN_BAR_WIDTH = 1;\n      var DEFAULT_GAP_BETWEEN_BARS = 2;\n      var LABEL_PADDING = 3;\n\n      var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n      var _gap = DEFAULT_GAP_BETWEEN_BARS;\n      var _centerBar = false;\n      var _alwaysUseRounding = false;\n\n      var _barWidth;\n\n      dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n\n        _barWidth = undefined;\n        return _chart;\n      });\n      dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n          dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' + 'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n      });\n\n      _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n      }, false);\n\n      _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack').data(_chart.data());\n\n        calculateBarWidth();\n        layers.enter().append('g').attr('class', function (d, i) {\n          return 'stack ' + '_' + i;\n        });\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n          var layer = d3.select(this);\n          renderBars(layer, i, d);\n\n          if (_chart.renderLabel() && last === i) {\n            renderLabels(layer, i, d);\n          }\n        });\n      };\n\n      function barHeight(d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n      }\n\n      function renderLabels(layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel').data(d.values, dc.pluck('x'));\n        labels.enter().append('text').attr('class', 'barLabel').attr('text-anchor', 'middle');\n\n        if (_chart.isOrdinal()) {\n          labels.on('click', _chart.onClick);\n          labels.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d) {\n          var x = _chart.x()(d.x);\n\n          if (!_centerBar) {\n            x += _barWidth / 2;\n          }\n\n          return dc.utils.safeNumber(x);\n        }).attr('y', function (d) {\n          var y = _chart.y()(d.y + d.y0);\n\n          if (d.y < 0) {\n            y -= barHeight(d);\n          }\n\n          return dc.utils.safeNumber(y - LABEL_PADDING);\n        }).text(function (d) {\n          return _chart.label()(d);\n        });\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('height', 0).remove();\n      }\n\n      function renderBars(layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar').data(d.values, dc.pluck('x'));\n        var enter = bars.enter().append('rect').attr('class', 'bar').attr('fill', dc.pluck('data', _chart.getColor)).attr('y', _chart.yAxisHeight()).attr('height', 0);\n\n        if (_chart.renderTitle()) {\n          enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n          bars.on('click', _chart.onClick);\n        }\n\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d) {\n          var x = _chart.x()(d.x);\n\n          if (_centerBar) {\n            x -= _barWidth / 2;\n          }\n\n          if (_chart.isOrdinal() && _gap !== undefined) {\n            x += _gap / 2;\n          }\n\n          return dc.utils.safeNumber(x);\n        }).attr('y', function (d) {\n          var y = _chart.y()(d.y + d.y0);\n\n          if (d.y < 0) {\n            y -= barHeight(d);\n          }\n\n          return dc.utils.safeNumber(y);\n        }).attr('width', _barWidth).attr('height', function (d) {\n          return barHeight(d);\n        }).attr('fill', dc.pluck('data', _chart.getColor)).select('title').text(dc.pluck('data', _chart.title(d.name)));\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d) {\n          return _chart.x()(d.x);\n        }).attr('width', _barWidth * 0.9).remove();\n      }\n\n      function calculateBarWidth() {\n        if (_barWidth === undefined) {\n          var numberOfBars = _chart.xUnitCount(); // please can't we always use rangeBands for bar charts?\n\n\n          if (_chart.isOrdinal() && _gap === undefined) {\n            _barWidth = Math.floor(_chart.x().rangeBand());\n          } else if (_gap) {\n            _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n          } else {\n            _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n          }\n\n          if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n            _barWidth = MIN_BAR_WIDTH;\n          }\n        }\n      }\n\n      _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n\n        var extent = _chart.brush().extent();\n\n        if (_chart.isOrdinal()) {\n          if (_chart.hasFilter()) {\n            bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n              return _chart.hasFilter(d.x);\n            });\n            bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n              return !_chart.hasFilter(d.x);\n            });\n          } else {\n            bars.classed(dc.constants.SELECTED_CLASS, false);\n            bars.classed(dc.constants.DESELECTED_CLASS, false);\n          }\n        } else {\n          if (!_chart.brushIsEmpty(extent)) {\n            var start = extent[0];\n            var end = extent[1];\n            bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n              return d.x < start || d.x >= end;\n            });\n          } else {\n            bars.classed(dc.constants.DESELECTED_CLASS, false);\n          }\n        }\n      };\n      /**\n       * Whether the bar chart will render each bar centered around the data position on the x-axis.\n       * @method centerBar\n       * @memberof dc.barChart\n       * @instance\n       * @param {Boolean} [centerBar=false]\n       * @returns {Boolean|dc.barChart}\n       */\n\n\n      _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n          return _centerBar;\n        }\n\n        _centerBar = centerBar;\n        return _chart;\n      };\n\n      dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n      });\n      /**\n       * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n       * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n       * for a visual description of how the padding is applied.\n       * @method barPadding\n       * @memberof dc.barChart\n       * @instance\n       * @param {Number} [barPadding=0]\n       * @returns {Number|dc.barChart}\n       */\n\n      _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n          return _chart._rangeBandPadding();\n        }\n\n        _chart._rangeBandPadding(barPadding);\n\n        _gap = undefined;\n        return _chart;\n      };\n\n      _chart._useOuterPadding = function () {\n        return _gap === undefined;\n      };\n      /**\n       * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n       * Will pad the width by `padding * barWidth` on each side of the chart.\n       * @method outerPadding\n       * @memberof dc.barChart\n       * @instance\n       * @param {Number} [padding=0.5]\n       * @returns {Number|dc.barChart}\n       */\n\n\n      _chart.outerPadding = _chart._outerRangeBandPadding;\n      /**\n       * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n       * gap.  By default the bar chart implementation will calculate and set the gap automatically\n       * based on the number of data points and the length of the x axis.\n       * @method gap\n       * @memberof dc.barChart\n       * @instance\n       * @param {Number} [gap=2]\n       * @returns {Number|dc.barChart}\n       */\n\n      _chart.gap = function (gap) {\n        if (!arguments.length) {\n          return _gap;\n        }\n\n        _gap = gap;\n        return _chart;\n      };\n\n      _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n          extent[0] = extent.map(_chart.round())[0];\n          extent[1] = extent.map(_chart.round())[1];\n\n          _chart.chartBodyG().select('.brush').call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n      };\n      /**\n       * Set or get whether rounding is enabled when bars are centered. If false, using\n       * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n       * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n       * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n       * centered bars since the bars are offset.  The rounding function must add an offset to\n       * compensate, such as in the following example.\n       * @method alwaysUseRounding\n       * @memberof dc.barChart\n       * @instance\n       * @example\n       * chart.round(function(n) { return Math.floor(n) + 0.5; });\n       * @param {Boolean} [alwaysUseRounding=false]\n       * @returns {Boolean|dc.barChart}\n       */\n\n\n      _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n          return _alwaysUseRounding;\n        }\n\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n      };\n\n      function colorFilter(color, inv) {\n        return function () {\n          var item = d3.select(this);\n          var match = item.attr('fill') === color;\n          return inv ? !match : match;\n        };\n      }\n\n      _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n          _chart.g().selectAll('rect.bar').classed('highlight', colorFilter(d.color)).classed('fadeout', colorFilter(d.color, true));\n        }\n      };\n\n      _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar').classed('highlight', false).classed('fadeout', false);\n      };\n\n      dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n\n        if ('resolution' in _chart.xUnits()) {\n          var res = _chart.xUnits().resolution;\n\n          max += res;\n        }\n\n        return max;\n      });\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * Concrete line/area chart implementation.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n     * @class lineChart\n     * @memberof dc\n     * @mixes dc.stackMixin\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a line chart under #chart-container1 element using the default global chart group\n     * var chart1 = dc.lineChart('#chart-container1');\n     * // create a line chart under #chart-container2 element using chart group A\n     * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = dc.lineChart(compositeChart);\n     * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n     * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n     * composite chart instance instead.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.lineChart}\n     */\n\n\n    dc.lineChart = function (parent, chartGroup) {\n      var DEFAULT_DOT_RADIUS = 5;\n      var TOOLTIP_G_CLASS = 'dc-tooltip';\n      var DOT_CIRCLE_CLASS = 'dot';\n      var Y_AXIS_REF_LINE_CLASS = 'yRef';\n      var X_AXIS_REF_LINE_CLASS = 'xRef';\n      var DEFAULT_DOT_OPACITY = 1e-6;\n      var LABEL_PADDING = 3;\n\n      var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n      var _renderArea = false;\n      var _dotRadius = DEFAULT_DOT_RADIUS;\n      var _dataPointRadius = null;\n      var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n      var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n      var _interpolate = 'linear';\n      var _tension = 0.7;\n\n      var _defined;\n\n      var _dashStyle;\n\n      var _xyTipsOn = true;\n\n      _chart.transitionDuration(500);\n\n      _chart.transitionDelay(0);\n\n      _chart._rangeBandPadding(1);\n\n      _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n          layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n        var layersEnter = layers.enter().append('g').attr('class', function (d, i) {\n          return 'stack ' + '_' + i;\n        });\n        drawLine(layersEnter, layers);\n        drawArea(layersEnter, layers);\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n          drawLabels(layers);\n        }\n      };\n      /**\n       * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n       * functions, splines, and cubic interpolation.  This is passed to\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n       * where you can find a complete list of valid arguments.\n       * @method interpolate\n       * @memberof dc.lineChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n       * @param  {String} [interpolate='linear']\n       * @returns {String|dc.lineChart}\n       */\n\n\n      _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n          return _interpolate;\n        }\n\n        _interpolate = interpolate;\n        return _chart;\n      };\n      /**\n       * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n       * This parameter further customizes the interpolation behavior.  It is passed to\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n       * @method tension\n       * @memberof dc.lineChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n       * @param  {Number} [tension=0.7]\n       * @returns {Number|dc.lineChart}\n       */\n\n\n      _chart.tension = function (tension) {\n        if (!arguments.length) {\n          return _tension;\n        }\n\n        _tension = tension;\n        return _chart;\n      };\n      /**\n       * Gets or sets a function that will determine discontinuities in the line which should be\n       * skipped: the path will be broken into separate subpaths if some points are undefined.\n       * This function is passed to\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n       *\n       * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n       * custom reduce functions to get this to work, depending on your data. See\n       * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n       * for more details and an example.\n       * @method defined\n       * @memberof dc.lineChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n       * @param  {Function} [defined]\n       * @returns {Function|dc.lineChart}\n       */\n\n\n      _chart.defined = function (defined) {\n        if (!arguments.length) {\n          return _defined;\n        }\n\n        _defined = defined;\n        return _chart;\n      };\n      /**\n       * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n       * array (solid line).\n       * @method dashStyle\n       * @memberof dc.lineChart\n       * @instance\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n       * @example\n       * // create a Dash Dot Dot Dot\n       * chart.dashStyle([3,1,1,1]);\n       * @param  {Array<Number>} [dashStyle=[]]\n       * @returns {Array<Number>|dc.lineChart}\n       */\n\n\n      _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n          return _dashStyle;\n        }\n\n        _dashStyle = dashStyle;\n        return _chart;\n      };\n      /**\n       * Get or set render area flag. If the flag is set to true then the chart will render the area\n       * beneath each line and the line chart effectively becomes an area chart.\n       * @method renderArea\n       * @memberof dc.lineChart\n       * @instance\n       * @param  {Boolean} [renderArea=false]\n       * @returns {Boolean|dc.lineChart}\n       */\n\n\n      _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n          return _renderArea;\n        }\n\n        _renderArea = renderArea;\n        return _chart;\n      };\n\n      function colors(d, i) {\n        return _chart.getColor.call(d, d.values, i);\n      }\n\n      function drawLine(layersEnter, layers) {\n        var line = d3.svg.line().x(function (d) {\n          return _chart.x()(d.x);\n        }).y(function (d) {\n          return _chart.y()(d.y + d.y0);\n        }).interpolate(_interpolate).tension(_tension);\n\n        if (_defined) {\n          line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path').attr('class', 'line').attr('stroke', colors);\n\n        if (_dashStyle) {\n          path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay()) //.ease('linear')\n        .attr('stroke', colors).attr('d', function (d) {\n          return safeD(line(d.values));\n        });\n      }\n\n      function drawArea(layersEnter, layers) {\n        if (_renderArea) {\n          var area = d3.svg.area().x(function (d) {\n            return _chart.x()(d.x);\n          }).y(function (d) {\n            return _chart.y()(d.y + d.y0);\n          }).y0(function (d) {\n            return _chart.y()(d.y0);\n          }).interpolate(_interpolate).tension(_tension);\n\n          if (_defined) {\n            area.defined(_defined);\n          }\n\n          layersEnter.append('path').attr('class', 'area').attr('fill', colors).attr('d', function (d) {\n            return safeD(area(d.values));\n          });\n          dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay()) //.ease('linear')\n          .attr('fill', colors).attr('d', function (d) {\n            return safeD(area(d.values));\n          });\n        }\n      }\n\n      function safeD(d) {\n        return !d || d.indexOf('NaN') >= 0 ? 'M0,0' : d;\n      }\n\n      function drawDots(chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || !_chart.brushOn() && _chart.xyTipsOn()) {\n          var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n          var tooltips = chartBody.select('g.' + tooltipListClass);\n\n          if (tooltips.empty()) {\n            tooltips = chartBody.append('g').attr('class', tooltipListClass);\n          }\n\n          layers.each(function (d, layerIndex) {\n            var points = d.values;\n\n            if (_defined) {\n              points = points.filter(_defined);\n            }\n\n            var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n\n            if (g.empty()) {\n              g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n            }\n\n            createRefLines(g);\n            var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS).data(points, dc.pluck('x'));\n            dots.enter().append('circle').attr('class', DOT_CIRCLE_CLASS).attr('r', getDotRadius()).style('fill-opacity', _dataPointFillOpacity).style('stroke-opacity', _dataPointStrokeOpacity).attr('fill', _chart.getColor).attr('stroke', _chart.getColor).on('mousemove', function () {\n              var dot = d3.select(this);\n              showDot(dot);\n              showRefLines(dot, g);\n            }).on('mouseout', function () {\n              var dot = d3.select(this);\n              hideDot(dot);\n              hideRefLines(g);\n            });\n            dots.call(renderTitle, d);\n            dc.transition(dots, _chart.transitionDuration()).attr('cx', function (d) {\n              return dc.utils.safeNumber(_chart.x()(d.x));\n            }).attr('cy', function (d) {\n              return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n            }).attr('fill', _chart.getColor);\n            dots.exit().remove();\n          });\n        }\n      }\n\n      _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n      }, false);\n\n      function drawLabels(layers) {\n        layers.each(function (d, layerIndex) {\n          var layer = d3.select(this);\n          var labels = layer.selectAll('text.lineLabel').data(d.values, dc.pluck('x'));\n          labels.enter().append('text').attr('class', 'lineLabel').attr('text-anchor', 'middle');\n          dc.transition(labels, _chart.transitionDuration()).attr('x', function (d) {\n            return dc.utils.safeNumber(_chart.x()(d.x));\n          }).attr('y', function (d) {\n            var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n            return dc.utils.safeNumber(y);\n          }).text(function (d) {\n            return _chart.label()(d);\n          });\n          dc.transition(labels.exit(), _chart.transitionDuration()).attr('height', 0).remove();\n        });\n      }\n\n      function createRefLines(g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ? g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ? g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n      }\n\n      function showDot(dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n      }\n\n      function showRefLines(dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n\n        var yAxisX = _chart._yAxisX() - _chart.margins().left;\n\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + x + ' ' + y;\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n      }\n\n      function getDotRadius() {\n        return _dataPointRadius || _dotRadius;\n      }\n\n      function hideDot(dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity).style('stroke-opacity', _dataPointStrokeOpacity).attr('r', getDotRadius());\n      }\n\n      function hideRefLines(g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n      }\n\n      function renderTitle(dot, d) {\n        if (_chart.renderTitle()) {\n          dot.select('title').remove();\n          dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n      }\n      /**\n       * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n       * dashed lines back to each respective axis.  This is ignored if the chart\n       * {@link dc.coordinateGridMixin#brushOn brush} is on\n       * @method xyTipsOn\n       * @memberof dc.lineChart\n       * @instance\n       * @param  {Boolean} [xyTipsOn=false]\n       * @returns {Boolean|dc.lineChart}\n       */\n\n\n      _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n          return _xyTipsOn;\n        }\n\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n      };\n      /**\n       * Get or set the radius (in px) for dots displayed on the data points.\n       * @method dotRadius\n       * @memberof dc.lineChart\n       * @instance\n       * @param  {Number} [dotRadius=5]\n       * @returns {Number|dc.lineChart}\n       */\n\n\n      _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n          return _dotRadius;\n        }\n\n        _dotRadius = dotRadius;\n        return _chart;\n      };\n      /**\n       * Always show individual dots for each datapoint.\n       *\n       * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n       * current `options` values are instead returned.\n       * @method renderDataPoints\n       * @memberof dc.lineChart\n       * @instance\n       * @example\n       * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.0})\n       * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.0, radius: 2}]\n       * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n       */\n\n\n      _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n          return {\n            fillOpacity: _dataPointFillOpacity,\n            strokeOpacity: _dataPointStrokeOpacity,\n            radius: _dataPointRadius\n          };\n        } else if (!options) {\n          _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n          _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n          _dataPointRadius = null;\n        } else {\n          _dataPointFillOpacity = options.fillOpacity || 0.8;\n          _dataPointStrokeOpacity = options.strokeOpacity || 0.0;\n          _dataPointRadius = options.radius || 2;\n        }\n\n        return _chart;\n      };\n\n      function colorFilter(color, dashstyle, inv) {\n        return function () {\n          var item = d3.select(this);\n          var match = item.attr('stroke') === color && item.attr('stroke-dasharray') === (dashstyle instanceof Array ? dashstyle.join(',') : null) || item.attr('fill') === color;\n          return inv ? !match : match;\n        };\n      }\n\n      _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n          _chart.g().selectAll('path.line, path.area').classed('highlight', colorFilter(d.color, d.dashstyle)).classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n      };\n\n      _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area').classed('highlight', false).classed('fadeout', false);\n      };\n\n      dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n\n        if (!_dashStyle) {\n          return legendables;\n        }\n\n        return legendables.map(function (l) {\n          l.dashstyle = _dashStyle;\n          return l;\n        });\n      });\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * The data count widget is a simple widget designed to display the number of records selected by the\n     * current filters out of the total number of records in the data set. Once created the data count widget\n     * will automatically update the text content of child elements with the following classes:\n     *\n     * * `.total-count` - total number of records\n     * * `.filter-count` - number of records matched by the current filters\n     *\n     * Note: this widget works best for the specific case of showing the number of records out of a\n     * total. If you want a more general-purpose numeric display, please use the\n     * {@link dc.numberDisplay} widget instead.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * @class dataCount\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @example\n     * var ndx = crossfilter(data);\n     * var all = ndx.groupAll();\n     *\n     * dc.dataCount('.dc-data-count')\n     *     .dimension(ndx)\n     *     .group(all);\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.dataCount}\n     */\n\n\n    dc.dataCount = function (parent, chartGroup) {\n      var _formatNumber = d3.format(',d');\n\n      var _chart = dc.baseMixin({});\n\n      var _html = {\n        some: '',\n        all: ''\n      };\n      /**\n       * Gets or sets an optional object specifying HTML templates to use depending how many items are\n       * selected. The text `%total-count` will replaced with the total number of records, and the text\n       * `%filter-count` will be replaced with the number of selected records.\n       * - all: HTML template to use if all items are selected\n       * - some: HTML template to use if not all items are selected\n       * @method html\n       * @memberof dc.dataCount\n       * @instance\n       * @example\n       * counter.html({\n       *      some: '%filter-count out of %total-count records selected',\n       *      all: 'All records selected. Click on charts to apply filters'\n       * })\n       * @param {{some:String, all: String}} [options]\n       * @returns {{some:String, all: String}|dc.dataCount}\n       */\n\n      _chart.html = function (options) {\n        if (!arguments.length) {\n          return _html;\n        }\n\n        if (options.all) {\n          _html.all = options.all;\n        }\n\n        if (options.some) {\n          _html.some = options.some;\n        }\n\n        return _chart;\n      };\n      /**\n       * Gets or sets an optional function to format the filter count and total count.\n       * @method formatNumber\n       * @memberof dc.dataCount\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n       * @example\n       * counter.formatNumber(d3.format('.2g'))\n       * @param {Function} [formatter=d3.format('.2g')]\n       * @returns {Function|dc.dataCount}\n       */\n\n\n      _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n          return _formatNumber;\n        }\n\n        _formatNumber = formatter;\n        return _chart;\n      };\n\n      _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n\n        var all = _formatNumber(tot);\n\n        var selected = _formatNumber(val);\n\n        if (tot === val && _html.all !== '') {\n          _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n          _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n          _chart.selectAll('.total-count').text(all);\n\n          _chart.selectAll('.filter-count').text(selected);\n        }\n\n        return _chart;\n      };\n\n      _chart._doRedraw = function () {\n        return _chart._doRender();\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * The data table is a simple widget designed to list crossfilter focused data set (rows being\n     * filtered) in a good old tabular fashion.\n     *\n     * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n     * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n     * together in groups.  Do not pass in a crossfilter group as this will not work.\n     *\n     * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n     * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n     * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n     * supported on the crossfilter group as the crossfilter dimension.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n     * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n     * @class dataTable\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.dataTable}\n     */\n\n\n    dc.dataTable = function (parent, chartGroup) {\n      var LABEL_CSS_CLASS = 'dc-table-label';\n      var ROW_CSS_CLASS = 'dc-table-row';\n      var COLUMN_CSS_CLASS = 'dc-table-column';\n      var GROUP_CSS_CLASS = 'dc-table-group';\n      var HEAD_CSS_CLASS = 'dc-table-head';\n\n      var _chart = dc.baseMixin({});\n\n      var _size = 25;\n      var _columns = [];\n\n      var _sortBy = function _sortBy(d) {\n        return d;\n      };\n\n      var _order = d3.ascending;\n      var _beginSlice = 0;\n\n      var _endSlice;\n\n      var _showGroups = true;\n\n      _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n        return _chart;\n      };\n\n      _chart._doColumnValueFormat = function (v, d) {\n        return typeof v === 'function' ? v(d) : // v as function\n        typeof v === 'string' ? d[v] : // v is field name string\n        v.format(d) // v is Object, use fn (element 2)\n        ;\n      };\n\n      _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return typeof d === 'function' ? _chart._doColumnHeaderFnToString(d) : typeof d === 'string' ? _chart._doColumnHeaderCapitalize(d) : String(d.label);\n      };\n\n      _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n      };\n\n      _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n\n        if (i1 >= 0) {\n          var i2 = s.lastIndexOf(';');\n\n          if (i2 >= 0) {\n            s = s.substring(i1 + 7, i2);\n            var i3 = s.indexOf('numberFormat');\n\n            if (i3 >= 0) {\n              s = s.replace('numberFormat', '');\n            }\n          }\n        }\n\n        return s;\n      };\n\n      function renderGroups() {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n\n        _columns.forEach(function (f) {\n          bAllFunctions = bAllFunctions & typeof f === 'function';\n        });\n\n        if (!bAllFunctions) {\n          // ensure one thead\n          var thead = _chart.selectAll('thead').data([0]);\n\n          thead.enter().append('thead');\n          thead.exit().remove(); // with one tr\n\n          var headrow = thead.selectAll('tr').data([0]);\n          headrow.enter().append('tr');\n          headrow.exit().remove(); // with a th for each column\n\n          var headcols = headrow.selectAll('th').data(_columns);\n          headcols.enter().append('th');\n          headcols.exit().remove();\n          headcols.attr('class', HEAD_CSS_CLASS).html(function (d) {\n            return _chart._doColumnHeaderFormat(d);\n          });\n        }\n\n        var groups = _chart.root().selectAll('tbody').data(nestEntries(), function (d) {\n          return _chart.keyAccessor()(d);\n        });\n\n        var rowGroup = groups.enter().append('tbody');\n\n        if (_showGroups === true) {\n          rowGroup.append('tr').attr('class', GROUP_CSS_CLASS).append('td').attr('class', LABEL_CSS_CLASS).attr('colspan', _columns.length).html(function (d) {\n            return _chart.keyAccessor()(d);\n          });\n        }\n\n        groups.exit().remove();\n        return rowGroup;\n      }\n\n      function nestEntries() {\n        var entries;\n\n        if (_order === d3.ascending) {\n          entries = _chart.dimension().bottom(_size);\n        } else {\n          entries = _chart.dimension().top(_size);\n        }\n\n        return d3.nest().key(_chart.group()).sortKeys(_order).entries(entries.sort(function (a, b) {\n          return _order(_sortBy(a), _sortBy(b));\n        }).slice(_beginSlice, _endSlice));\n      }\n\n      function renderRows(groups) {\n        var rows = groups.order().selectAll('tr.' + ROW_CSS_CLASS).data(function (d) {\n          return d.values;\n        });\n        var rowEnter = rows.enter().append('tr').attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n          rowEnter.append('td').attr('class', COLUMN_CSS_CLASS + ' _' + i).html(function (d) {\n            return _chart._doColumnValueFormat(v, d);\n          });\n        });\n\n        rows.exit().remove();\n        return rows;\n      }\n\n      _chart._doRedraw = function () {\n        return _chart._doRender();\n      };\n      /**\n       * Get or set the group function for the data table. The group function takes a data row and\n       * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n       * to split rows into groups.\n       *\n       * Do not pass in a crossfilter group as this will not work.\n       * @method group\n       * @memberof dc.dataTable\n       * @instance\n       * @example\n       * // group rows by the value of their field\n       * chart\n       *     .group(function(d) { return d.field; })\n       * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n       * @returns {Function|dc.dataTable}\n       */\n\n      /**\n       * Get or set the table size which determines the number of rows displayed by the widget.\n       * @method size\n       * @memberof dc.dataTable\n       * @instance\n       * @param {Number} [size=25]\n       * @returns {Number|dc.dataTable}\n       */\n\n\n      _chart.size = function (size) {\n        if (!arguments.length) {\n          return _size;\n        }\n\n        _size = size;\n        return _chart;\n      };\n      /**\n       * Get or set the index of the beginning slice which determines which entries get displayed\n       * by the widget. Useful when implementing pagination.\n       *\n       * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n        * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n       * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n       * @method beginSlice\n       * @memberof dc.dataTable\n       * @instance\n       * @param {Number} [beginSlice=0]\n       * @returns {Number|dc.dataTable}\n       */\n\n\n      _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n          return _beginSlice;\n        }\n\n        _beginSlice = beginSlice;\n        return _chart;\n      };\n      /**\n       * Get or set the index of the end slice which determines which entries get displayed by the\n       * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n       * @method endSlice\n       * @memberof dc.dataTable\n       * @instance\n       * @param {Number|undefined} [endSlice=undefined]\n       * @returns {Number|dc.dataTable}\n       */\n\n\n      _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n          return _endSlice;\n        }\n\n        _endSlice = endSlice;\n        return _chart;\n      };\n      /**\n       * Get or set column functions. The data table widget supports several methods of specifying the\n       * columns to display.\n       *\n       * The original method uses an array of functions to generate dynamic columns. Column functions\n       * are simple javascript functions with only one input argument `d` which represents a row in\n       * the data set. The return value of these functions will be used to generate the content for\n       * each cell. However, this method requires the HTML for the table to have a fixed set of column\n       * headers.\n       *\n       * <pre><code>chart.columns([\n       *     function(d) { return d.date; },\n       *     function(d) { return d.open; },\n       *     function(d) { return d.close; },\n       *     function(d) { return numberFormat(d.close - d.open); },\n       *     function(d) { return d.volume; }\n       * ]);\n       * </code></pre>\n       *\n       * In the second method, you can list the columns to read from the data without specifying it as\n       * a function, except where necessary (ie, computed columns).  Note the data element name is\n       * capitalized when displayed in the table header. You can also mix in functions as necessary,\n       * using the third `{label, format}` form, as shown below.\n       *\n       * <pre><code>chart.columns([\n       *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n       *     \"open\",    // ...\n       *     \"close\",   // ...\n       *     {\n       *         label: \"Change\",\n       *         format: function (d) {\n       *             return numberFormat(d.close - d.open);\n       *         }\n       *     },\n       *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n       * ]);\n       * </code></pre>\n       *\n       * In the third example, we specify all fields using the `{label, format}` method:\n       * <pre><code>chart.columns([\n       *     {\n       *         label: \"Date\",\n       *         format: function (d) { return d.date; }\n       *     },\n       *     {\n       *         label: \"Open\",\n       *         format: function (d) { return numberFormat(d.open); }\n       *     },\n       *     {\n       *         label: \"Close\",\n       *         format: function (d) { return numberFormat(d.close); }\n       *     },\n       *     {\n       *         label: \"Change\",\n       *         format: function (d) { return numberFormat(d.close - d.open); }\n       *     },\n       *     {\n       *         label: \"Volume\",\n       *         format: function (d) { return d.volume; }\n       *     }\n       * ]);\n       * </code></pre>\n       *\n       * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n       * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n       * function into a displayed header. The first one is used on the \"string\" column specifier; the\n       * second is used to transform a stringified function into something displayable. For the Stock\n       * example, the function for Change becomes the table header **d.close - d.open**.\n       *\n       * Finally, you can even specify a completely different form of column definition. To do this,\n       * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n       * fields without numberFormat specification will be displayed just as they are stored in the\n       * data, unformatted.\n       * @method columns\n       * @memberof dc.dataTable\n       * @instance\n       * @param {Array<Function>} [columns=[]]\n       * @returns {Array<Function>}|dc.dataTable}\n       */\n\n\n      _chart.columns = function (columns) {\n        if (!arguments.length) {\n          return _columns;\n        }\n\n        _columns = columns;\n        return _chart;\n      };\n      /**\n       * Get or set sort-by function. This function works as a value accessor at row level and returns a\n       * particular field to be sorted by.\n       * @method sortBy\n       * @memberof dc.dataTable\n       * @instance\n       * @example\n       * chart.sortBy(function(d) {\n       *     return d.date;\n       * });\n       * @param {Function} [sortBy=identity function]\n       * @returns {Function|dc.dataTable}\n       */\n\n\n      _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n          return _sortBy;\n        }\n\n        _sortBy = sortBy;\n        return _chart;\n      };\n      /**\n       * Get or set sort order. If the order is `d3.ascending`, the data table will use\n       * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n       * @method order\n       * @memberof dc.dataTable\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n       * @example\n       * chart.order(d3.descending);\n       * @param {Function} [order=d3.ascending]\n       * @returns {Function|dc.dataTable}\n       */\n\n\n      _chart.order = function (order) {\n        if (!arguments.length) {\n          return _order;\n        }\n\n        _order = order;\n        return _chart;\n      };\n      /**\n       * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n       * function must be specified even if groups are not shown.\n       * @method showGroups\n       * @memberof dc.dataTable\n       * @instance\n       * @example\n       * chart\n       *     .group([value], [name])\n       *     .showGroups(true|false);\n       * @param {Boolean} [showGroups=true]\n       * @returns {Boolean|dc.dataTable}\n       */\n\n\n      _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n          return _showGroups;\n        }\n\n        _showGroups = showGroups;\n        return _chart;\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * Data grid is a simple widget designed to list the filtered records, providing\n     * a simple way to define how the items are displayed.\n     *\n     * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n     * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n     * Do not pass in a crossfilter group as this will not work.\n     *\n     * Examples:\n     * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n     * @class dataGrid\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.dataGrid}\n     */\n\n\n    dc.dataGrid = function (parent, chartGroup) {\n      var LABEL_CSS_CLASS = 'dc-grid-label';\n      var ITEM_CSS_CLASS = 'dc-grid-item';\n      var GROUP_CSS_CLASS = 'dc-grid-group';\n      var GRID_CSS_CLASS = 'dc-grid-top';\n\n      var _chart = dc.baseMixin({});\n\n      var _size = 999; // shouldn't be needed, but you might\n\n      var _html = function _html(d) {\n        return 'you need to provide an html() handling param:  ' + JSON.stringify(d);\n      };\n\n      var _sortBy = function _sortBy(d) {\n        return d;\n      };\n\n      var _order = d3.ascending;\n\n      var _beginSlice = 0,\n          _endSlice;\n\n      var _htmlGroup = function _htmlGroup(d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' + _chart.keyAccessor()(d) + '</h1></div>';\n      };\n\n      _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n        return _chart;\n      };\n\n      function renderGroups() {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS).data(nestEntries(), function (d) {\n          return _chart.keyAccessor()(d);\n        });\n\n        var itemGroup = groups.enter().append('div').attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n          itemGroup.html(function (d) {\n            return _htmlGroup(d);\n          });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n      }\n\n      function nestEntries() {\n        var entries = _chart.dimension().top(_size);\n\n        return d3.nest().key(_chart.group()).sortKeys(_order).entries(entries.sort(function (a, b) {\n          return _order(_sortBy(a), _sortBy(b));\n        }).slice(_beginSlice, _endSlice));\n      }\n\n      function renderItems(groups) {\n        var items = groups.order().selectAll('div.' + ITEM_CSS_CLASS).data(function (d) {\n          return d.values;\n        });\n        items.enter().append('div').attr('class', ITEM_CSS_CLASS).html(function (d) {\n          return _html(d);\n        });\n        items.exit().remove();\n        return items;\n      }\n\n      _chart._doRedraw = function () {\n        return _chart._doRender();\n      };\n      /**\n       * Get or set the group function for the data grid. The group function takes a data row and\n       * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n       * to split rows into groups.\n       *\n       * Do not pass in a crossfilter group as this will not work.\n       * @method group\n       * @memberof dc.dataGrid\n       * @instance\n       * @example\n       * // group rows by the value of their field\n       * chart\n       *     .group(function(d) { return d.field; })\n       * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n       * @returns {Function|dc.dataTable}\n       */\n\n      /**\n       * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n       * Useful when implementing pagination.\n       * @method beginSlice\n       * @memberof dc.dataGrid\n       * @instance\n       * @param {Number} [beginSlice=0]\n       * @returns {Number|dc.dataGrid}\n       */\n\n\n      _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n          return _beginSlice;\n        }\n\n        _beginSlice = beginSlice;\n        return _chart;\n      };\n      /**\n       * Get or set the index of the end slice which determines which entries get displayed by the widget.\n       * Useful when implementing pagination.\n       * @method endSlice\n       * @memberof dc.dataGrid\n       * @instance\n       * @param {Number} [endSlice]\n       * @returns {Number|dc.dataGrid}\n       */\n\n\n      _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n          return _endSlice;\n        }\n\n        _endSlice = endSlice;\n        return _chart;\n      };\n      /**\n       * Get or set the grid size which determines the number of items displayed by the widget.\n       * @method size\n       * @memberof dc.dataGrid\n       * @instance\n       * @param {Number} [size=999]\n       * @returns {Number|dc.dataGrid}\n       */\n\n\n      _chart.size = function (size) {\n        if (!arguments.length) {\n          return _size;\n        }\n\n        _size = size;\n        return _chart;\n      };\n      /**\n       * Get or set the function that formats an item. The data grid widget uses a\n       * function to generate dynamic html. Use your favourite templating engine or\n       * generate the string directly.\n       * @method html\n       * @memberof dc.dataGrid\n       * @instance\n       * @example\n       * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n       * @param {Function} [html]\n       * @returns {Function|dc.dataGrid}\n       */\n\n\n      _chart.html = function (html) {\n        if (!arguments.length) {\n          return _html;\n        }\n\n        _html = html;\n        return _chart;\n      };\n      /**\n       * Get or set the function that formats a group label.\n       * @method htmlGroup\n       * @memberof dc.dataGrid\n       * @instance\n       * @example\n       * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n       * @param {Function} [htmlGroup]\n       * @returns {Function|dc.dataGrid}\n       */\n\n\n      _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n          return _htmlGroup;\n        }\n\n        _htmlGroup = htmlGroup;\n        return _chart;\n      };\n      /**\n       * Get or set sort-by function. This function works as a value accessor at the item\n       * level and returns a particular field to be sorted.\n       * @method sortBy\n       * @memberof dc.dataGrid\n       * @instance\n       * @example\n       * chart.sortBy(function(d) {\n       *     return d.date;\n       * });\n       * @param {Function} [sortByFunction]\n       * @returns {Function|dc.dataGrid}\n       */\n\n\n      _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n          return _sortBy;\n        }\n\n        _sortBy = sortByFunction;\n        return _chart;\n      };\n      /**\n       * Get or set sort the order function.\n       * @method order\n       * @memberof dc.dataGrid\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n       * @example\n       * chart.order(d3.descending);\n       * @param {Function} [order=d3.ascending]\n       * @returns {Function|dc.dataGrid}\n       */\n\n\n      _chart.order = function (order) {\n        if (!arguments.length) {\n          return _order;\n        }\n\n        _order = order;\n        return _chart;\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n     * following dimensions:\n     * - x axis position\n     * - y axis position\n     * - bubble radius\n     * - color\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n     * @class bubbleChart\n     * @memberof dc\n     * @mixes dc.bubbleMixin\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a bubble chart under #chart-container1 element using the default global chart group\n     * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n     * // create a bubble chart under #chart-container2 element using chart group A\n     * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.bubbleChart}\n     */\n\n\n    dc.bubbleChart = function (parent, chartGroup) {\n      var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n      _chart.transitionDuration(750);\n\n      _chart.transitionDelay(0);\n\n      var bubbleLocator = function bubbleLocator(d) {\n        return 'translate(' + bubbleX(d) + ',' + bubbleY(d) + ')';\n      };\n\n      _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS).data(data, function (d) {\n          return d.key;\n        });\n\n        if (_chart.sortBubbleSize()) {\n          // update dom order based on sort\n          bubbleG.order();\n        }\n\n        renderNodes(bubbleG);\n        updateNodes(bubbleG);\n        removeNodes(bubbleG);\n\n        _chart.fadeDeselectedArea();\n      };\n\n      function renderNodes(bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n        bubbleGEnter.attr('class', _chart.BUBBLE_NODE_CLASS).attr('transform', bubbleLocator).append('circle').attr('class', function (d, i) {\n          return _chart.BUBBLE_CLASS + ' _' + i;\n        }).on('click', _chart.onClick).attr('fill', _chart.getColor).attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay()).select('circle.' + _chart.BUBBLE_CLASS).attr('r', function (d) {\n          return _chart.bubbleR(d);\n        }).attr('opacity', function (d) {\n          return _chart.bubbleR(d) > 0 ? 1 : 0;\n        });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n      }\n\n      function updateNodes(bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', bubbleLocator).select('circle.' + _chart.BUBBLE_CLASS).attr('fill', _chart.getColor).attr('r', function (d) {\n          return _chart.bubbleR(d);\n        }).attr('opacity', function (d) {\n          return _chart.bubbleR(d) > 0 ? 1 : 0;\n        });\n\n        _chart.doUpdateLabels(bubbleG);\n\n        _chart.doUpdateTitles(bubbleG);\n      }\n\n      function removeNodes(bubbleG) {\n        bubbleG.exit().remove();\n      }\n\n      function bubbleX(d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n\n        if (isNaN(x)) {\n          x = 0;\n        }\n\n        return x;\n      }\n\n      function bubbleY(d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n\n        if (isNaN(y)) {\n          y = 0;\n        }\n\n        return y;\n      }\n\n      _chart.renderBrush = function () {// override default x axis brush from parent chart\n      };\n\n      _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n     * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n     * achieve some quite flexible charting effects.\n     * @class compositeChart\n     * @memberof dc\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a composite chart under #chart-container1 element using the default global chart group\n     * var compositeChart1 = dc.compositeChart('#chart-container1');\n     * // create a composite chart under #chart-container2 element using chart group A\n     * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.compositeChart}\n     */\n\n\n    dc.compositeChart = function (parent, chartGroup) {\n      var SUB_CHART_CLASS = 'sub';\n      var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n      var _chart = dc.coordinateGridMixin({});\n\n      var _children = [];\n      var _childOptions = {};\n      var _shareColors = false,\n          _shareTitle = true,\n          _alignYAxes = false;\n\n      var _rightYAxis = d3.svg.axis(),\n          _rightYAxisLabel = 0,\n          _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n          _rightY,\n          _rightAxisGridLines = false;\n\n      _chart._mandatoryAttributes([]);\n\n      _chart.transitionDuration(500);\n\n      _chart.transitionDelay(0);\n\n      dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n          var child = _children[i];\n          generateChildG(child, i);\n\n          if (!child.dimension()) {\n            child.dimension(_chart.dimension());\n          }\n\n          if (!child.group()) {\n            child.group(_chart.group());\n          }\n\n          child.chartGroup(_chart.chartGroup());\n          child.svg(_chart.svg());\n          child.xUnits(_chart.xUnits());\n          child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n          child.brushOn(_chart.brushOn());\n          child.renderTitle(_chart.renderTitle());\n          child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n      });\n\n      _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n\n        for (var i = 0; i < _children.length; ++i) {\n          _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n      };\n\n      _chart._prepareYAxis = function () {\n        var left = leftYAxisChildren().length !== 0;\n        var right = rightYAxisChildren().length !== 0;\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) {\n          prepareLeftYAxis(ranges);\n        }\n\n        if (right) {\n          prepareRightYAxis(ranges);\n        }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n          _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n          _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n      };\n\n      _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n          _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n\n          _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n          _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n\n          _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n      };\n\n      function calculateYAxisRanges(left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n          lyAxisMin = yAxisMin();\n          lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n          ryAxisMin = rightYAxisMin();\n          ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n          ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n          lyAxisMin: lyAxisMin,\n          lyAxisMax: lyAxisMax,\n          ryAxisMin: ryAxisMin,\n          ryAxisMax: ryAxisMax\n        };\n      }\n\n      function alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n        return {\n          lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n          lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n          ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n          ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n      }\n\n      function prepareRightYAxis(ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n\n        if (_chart.rightY() === undefined) {\n          _chart.rightY(d3.scale.linear());\n        }\n\n        if (needDomain) {\n          _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n\n        if (needRange) {\n          _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        _chart.rightYAxis().orient('right');\n      }\n\n      function prepareLeftYAxis(ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n\n        if (_chart.y() === undefined) {\n          _chart.y(d3.scale.linear());\n        }\n\n        if (needDomain) {\n          _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n\n        if (needRange) {\n          _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        _chart.yAxis().orient('left');\n      }\n\n      function generateChildG(child, i) {\n        child._generateG(_chart.g());\n\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n      }\n\n      _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n          var child = _children[i];\n\n          if (!child.g()) {\n            generateChildG(child, i);\n          }\n\n          if (_shareColors) {\n            child.colors(_chart.colors());\n          }\n\n          child.x(_chart.x());\n          child.xAxis(_chart.xAxis());\n\n          if (child.useRightYAxis()) {\n            child.y(_chart.rightY());\n            child.yAxis(_chart.rightYAxis());\n          } else {\n            child.y(_chart.y());\n            child.yAxis(_chart.yAxis());\n          }\n\n          child.plotData();\n\n          child._activateRenderlets();\n        }\n      };\n      /**\n       * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n       * default behavior. This option is only respected when subcharts with both left and right y-axes\n       * are present.\n       * @method useRightAxisGridLines\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Boolean} [useRightAxisGridLines=false]\n       * @returns {Boolean|dc.compositeChart}\n       */\n\n\n      _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n          return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n      };\n      /**\n       * Get or set chart-specific options for all child charts. This is equivalent to calling\n       * {@link dc.baseMixin#options .options} on each child chart.\n       * @method childOptions\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Object} [childOptions]\n       * @returns {Object|dc.compositeChart}\n       */\n\n\n      _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n          return _childOptions;\n        }\n\n        _childOptions = childOptions;\n\n        _children.forEach(function (child) {\n          child.options(_childOptions);\n        });\n\n        return _chart;\n      };\n\n      _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n          var child = _children[i];\n          child.brush(_chart.brush());\n          child.fadeDeselectedArea();\n        }\n      };\n      /**\n       * Set or get the right y axis label.\n       * @method rightYAxisLabel\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {String} [rightYAxisLabel]\n       * @param {Number} [padding]\n       * @returns {String|dc.compositeChart}\n       */\n\n\n      _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n          return _rightYAxisLabel;\n        }\n\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = padding === undefined ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n      };\n      /**\n       * Combine the given charts into one single composite coordinate grid chart.\n       * @method compose\n       * @memberof dc.compositeChart\n       * @instance\n       * @example\n       * moveChart.compose([\n       *     // when creating sub-chart you need to pass in the parent chart\n       *     dc.lineChart(moveChart)\n       *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n       *         .valueAccessor(function (d){return d.value.avg;})\n       *         // most of the normal functions will continue to work in a composed chart\n       *         .renderArea(true)\n       *         .stack(monthlyMoveGroup, function (d){return d.value;})\n       *         .title(function (d){\n       *             var value = d.value.avg?d.value.avg:d.value;\n       *             if(isNaN(value)) value = 0;\n       *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n       *         }),\n       *     dc.barChart(moveChart)\n       *         .group(volumeByMonthGroup)\n       *         .centerBar(true)\n       * ]);\n       * @param {Array<Chart>} [subChartArray]\n       * @returns {dc.compositeChart}\n       */\n\n\n      _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n\n        _children.forEach(function (child) {\n          child.height(_chart.height());\n          child.width(_chart.width());\n          child.margins(_chart.margins());\n\n          if (_shareTitle) {\n            child.title(_chart.title());\n          }\n\n          child.options(_childOptions);\n        });\n\n        return _chart;\n      };\n      /**\n       * Returns the child charts which are composed into the composite chart.\n       * @method children\n       * @memberof dc.compositeChart\n       * @instance\n       * @returns {Array<dc.baseMixin>}\n       */\n\n\n      _chart.children = function () {\n        return _children;\n      };\n      /**\n       * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n       * will be shared with composed children. Additionally if the child chart implements\n       * Stackable and has not set a custom .colorAccessor, then it will generate a color\n       * specific to its order in the composition.\n       * @method shareColors\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Boolean} [shareColors=false]\n       * @returns {Boolean|dc.compositeChart}\n       */\n\n\n      _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n          return _shareColors;\n        }\n\n        _shareColors = shareColors;\n        return _chart;\n      };\n      /**\n       * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n       * this chart will be shared with composed children.\n       * @method shareTitle\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Boolean} [shareTitle=true]\n       * @returns {Boolean|dc.compositeChart}\n       */\n\n\n      _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n          return _shareTitle;\n        }\n\n        _shareTitle = shareTitle;\n        return _chart;\n      };\n      /**\n       * Get or set the y scale for the right axis. The right y scale is typically automatically\n       * generated by the chart implementation.\n       * @method rightY\n       * @memberof dc.compositeChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @param {d3.scale} [yScale]\n       * @returns {d3.scale|dc.compositeChart}\n       */\n\n\n      _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n          return _rightY;\n        }\n\n        _rightY = yScale;\n\n        _chart.rescale();\n\n        return _chart;\n      };\n      /**\n       * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n       * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n       * @method alignYAxes\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Boolean} [alignYAxes=false]\n       * @returns {Chart}\n       */\n\n\n      _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n          return _alignYAxes;\n        }\n\n        _alignYAxes = alignYAxes;\n\n        _chart.rescale();\n\n        return _chart;\n      };\n\n      function leftYAxisChildren() {\n        return _children.filter(function (child) {\n          return !child.useRightYAxis();\n        });\n      }\n\n      function rightYAxisChildren() {\n        return _children.filter(function (child) {\n          return child.useRightYAxis();\n        });\n      }\n\n      function getYAxisMin(charts) {\n        return charts.map(function (c) {\n          return c.yAxisMin();\n        });\n      }\n\n      delete _chart.yAxisMin;\n\n      function yAxisMin() {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n      }\n\n      function rightYAxisMin() {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n      }\n\n      function getYAxisMax(charts) {\n        return charts.map(function (c) {\n          return c.yAxisMax();\n        });\n      }\n\n      delete _chart.yAxisMax;\n\n      function yAxisMax() {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n      }\n\n      function rightYAxisMax() {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n      }\n\n      function getAllXAxisMinFromChildCharts() {\n        return _children.map(function (c) {\n          return c.xAxisMin();\n        });\n      }\n\n      dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n      });\n\n      function getAllXAxisMaxFromChildCharts() {\n        return _children.map(function (c) {\n          return c.xAxisMax();\n        });\n      }\n\n      dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n      });\n\n      _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n          if (_shareColors) {\n            child.colors(_chart.colors());\n          }\n\n          items.push.apply(items, child.legendables());\n          return items;\n        }, []);\n      };\n\n      _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n          var child = _children[j];\n          child.legendHighlight(d);\n        }\n      };\n\n      _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n          var child = _children[j];\n          child.legendReset(d);\n        }\n      };\n\n      _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n      };\n      /**\n       * Set or get the right y axis used by the composite chart. This function is most useful when y\n       * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n       * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n       * d3 axis manipulation.\n       *\n       * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n       * unexpected results.\n       * @method rightYAxis\n       * @memberof dc.compositeChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n       * @example\n       * // customize y axis tick format\n       * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n       * // customize y axis tick values\n       * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n       * @param {d3.svg.axis} [rightYAxis]\n       * @returns {d3.svg.axis|dc.compositeChart}\n       */\n\n\n      _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n          return _rightYAxis;\n        }\n\n        _rightYAxis = rightYAxis;\n        return _chart;\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n     * series is specified in the data. It is a specialization of Composite Chart and inherits all\n     * composite features other than recomposing the chart.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n     * @class seriesChart\n     * @memberof dc\n     * @mixes dc.compositeChart\n     * @example\n     * // create a series chart under #chart-container1 element using the default global chart group\n     * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n     * // create a series chart under #chart-container2 element using chart group A\n     * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.seriesChart}\n     */\n\n\n    dc.seriesChart = function (parent, chartGroup) {\n      var _chart = dc.compositeChart(parent, chartGroup);\n\n      function keySort(a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n      }\n\n      var _charts = {};\n      var _chartFunction = dc.lineChart;\n\n      var _seriesAccessor;\n\n      var _seriesSort = d3.ascending;\n      var _valueSort = keySort;\n\n      _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n\n      _chart.shareColors(true);\n\n      _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n\n        if (_seriesSort) {\n          nester.sortKeys(_seriesSort);\n        }\n\n        if (_valueSort) {\n          nester.sortValues(_valueSort);\n        }\n\n        var nesting = nester.entries(_chart.data());\n        var children = nesting.map(function (sub, i) {\n          var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n\n          if (!_charts[sub.key]) {\n            childrenChanged = true;\n          }\n\n          _charts[sub.key] = subChart;\n          keep.push(sub.key);\n          return subChart.dimension(_chart.dimension()).group({\n            all: d3.functor(sub.values)\n          }, sub.key).keyAccessor(_chart.keyAccessor()).valueAccessor(_chart.valueAccessor()).brushOn(_chart.brushOn());\n        }); // this works around the fact compositeChart doesn't really\n        // have a removal interface\n\n        Object.keys(_charts).filter(function (c) {\n          return keep.indexOf(c) === -1;\n        }).forEach(function (c) {\n          clearChart(c);\n          childrenChanged = true;\n        });\n\n        _chart._compose(children);\n\n        if (childrenChanged && _chart.legend()) {\n          _chart.legend().render();\n        }\n      };\n\n      function clearChart(c) {\n        if (_charts[c].g()) {\n          _charts[c].g().remove();\n        }\n\n        delete _charts[c];\n      }\n\n      function resetChildren() {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n      }\n      /**\n       * Get or set the chart function, which generates the child charts.\n       * @method chart\n       * @memberof dc.seriesChart\n       * @instance\n       * @example\n       * // put interpolation on the line charts used for the series\n       * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n       * // do a scatter series chart\n       * chart.chart(dc.scatterPlot)\n       * @param {Function} [chartFunction=dc.lineChart]\n       * @returns {Function|dc.seriesChart}\n       */\n\n\n      _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n          return _chartFunction;\n        }\n\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n      };\n      /**\n       * **mandatory**\n       *\n       * Get or set accessor function for the displayed series. Given a datum, this function\n       * should return the series that datum belongs to.\n       * @method seriesAccessor\n       * @memberof dc.seriesChart\n       * @instance\n       * @example\n       * // simple series accessor\n       * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n       * @param {Function} [accessor]\n       * @returns {Function|dc.seriesChart}\n       */\n\n\n      _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n          return _seriesAccessor;\n        }\n\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n      };\n      /**\n       * Get or set a function to sort the list of series by, given series values.\n       * @method seriesSort\n       * @memberof dc.seriesChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n       * @example\n       * chart.seriesSort(d3.descending);\n       * @param {Function} [sortFunction=d3.ascending]\n       * @returns {Function|dc.seriesChart}\n       */\n\n\n      _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n          return _seriesSort;\n        }\n\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n      };\n      /**\n       * Get or set a function to sort each series values by. By default this is the key accessor which,\n       * for example, will ensure a lineChart series connects its points in increasing key/x order,\n       * rather than haphazardly.\n       * @method valueSort\n       * @memberof dc.seriesChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n       * @example\n       * // Default value sort\n       * _chart.valueSort(function keySort (a, b) {\n       *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n       * });\n       * @param {Function} [sortFunction]\n       * @returns {Function|dc.seriesChart}\n       */\n\n\n      _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n          return _valueSort;\n        }\n\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n      }; // make compose private\n\n\n      _chart._compose = _chart.compose;\n      delete _chart.compose;\n      return _chart;\n    };\n    /**\n     * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n     * from GeoJson data. This chart implementation was inspired by\n     * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n     * @class geoChoroplethChart\n     * @memberof dc\n     * @mixes dc.colorMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a choropleth chart under '#us-chart' element using the default global chart group\n     * var chart1 = dc.geoChoroplethChart('#us-chart');\n     * // create a choropleth chart under '#us-chart2' element using chart group A\n     * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.geoChoroplethChart}\n     */\n\n\n    dc.geoChoroplethChart = function (parent, chartGroup) {\n      var _chart = dc.colorMixin(dc.baseMixin({}));\n\n      _chart.colorAccessor(function (d) {\n        return d || 0;\n      });\n\n      var _geoPath = d3.geo.path();\n\n      var _projectionFlag;\n\n      var _geoJsons = [];\n\n      _chart._doRender = function () {\n        _chart.resetSvg();\n\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n          var states = _chart.svg().append('g').attr('class', 'layer' + layerIndex);\n\n          var regionG = states.selectAll('g.' + geoJson(layerIndex).name).data(geoJson(layerIndex).data).enter().append('g').attr('class', geoJson(layerIndex).name);\n          regionG.append('path').attr('fill', 'white').attr('d', _geoPath);\n          regionG.append('title');\n          plotData(layerIndex);\n        }\n\n        _projectionFlag = false;\n      };\n\n      function plotData(layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n          var regionG = renderRegionG(layerIndex);\n          renderPaths(regionG, layerIndex, data);\n          renderTitle(regionG, layerIndex, data);\n        }\n      }\n\n      function generateLayeredData() {\n        var data = {};\n\n        var groupAll = _chart.data();\n\n        for (var i = 0; i < groupAll.length; ++i) {\n          data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n\n        return data;\n      }\n\n      function isDataLayer(layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n      }\n\n      function renderRegionG(layerIndex) {\n        var regionG = _chart.svg().selectAll(layerSelector(layerIndex)).classed('selected', function (d) {\n          return isSelected(layerIndex, d);\n        }).classed('deselected', function (d) {\n          return isDeselected(layerIndex, d);\n        }).attr('class', function (d) {\n          var layerNameClass = geoJson(layerIndex).name;\n          var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n          var baseClasses = layerNameClass + ' ' + regionClass;\n\n          if (isSelected(layerIndex, d)) {\n            baseClasses += ' selected';\n          }\n\n          if (isDeselected(layerIndex, d)) {\n            baseClasses += ' deselected';\n          }\n\n          return baseClasses;\n        });\n\n        return regionG;\n      }\n\n      function layerSelector(layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n      }\n\n      function isSelected(layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n      }\n\n      function isDeselected(layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n      }\n\n      function getKey(layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n      }\n\n      function geoJson(index) {\n        return _geoJsons[index];\n      }\n\n      function renderPaths(regionG, layerIndex, data) {\n        var paths = regionG.select('path').attr('fill', function () {\n          var currentFill = d3.select(this).attr('fill');\n\n          if (currentFill) {\n            return currentFill;\n          }\n\n          return 'none';\n        }).on('click', function (d) {\n          return _chart.onClick(d, layerIndex);\n        });\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n          return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n      }\n\n      _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n          _chart.filter(selectedRegion);\n\n          _chart.redrawGroup();\n        });\n      };\n\n      function renderTitle(regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n          regionG.selectAll('title').text(function (d) {\n            var key = getKey(layerIndex, d);\n            var value = data[key];\n            return _chart.title()({\n              key: key,\n              value: value\n            });\n          });\n        }\n      }\n\n      _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n          plotData(layerIndex);\n\n          if (_projectionFlag) {\n            _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n          }\n        }\n\n        _projectionFlag = false;\n      };\n      /**\n       * **mandatory**\n       *\n       * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n       * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n       * layers with the same name the new overlay will override the existing one.\n       * @method overlayGeoJson\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @see {@link http://geojson.org/ GeoJSON}\n       * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n       * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n       * @example\n       * // insert a layer for rendering US states\n       * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n       *      return d.properties.name;\n       * });\n       * @param {geoJson} json - a geojson feed\n       * @param {String} name - name of the layer\n       * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n       * this function should match the keys returned by the crossfilter groups.\n       * @returns {dc.geoChoroplethChart}\n       */\n\n\n      _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n          if (_geoJsons[i].name === name) {\n            _geoJsons[i].data = json;\n            _geoJsons[i].keyAccessor = keyAccessor;\n            return _chart;\n          }\n        }\n\n        _geoJsons.push({\n          name: name,\n          data: json,\n          keyAccessor: keyAccessor\n        });\n\n        return _chart;\n      };\n      /**\n       * Set custom geo projection function. See the available\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n       * @method projection\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n       * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n       * @param {d3.projection} [projection=d3.geo.albersUsa()]\n       * @returns {dc.geoChoroplethChart}\n       */\n\n\n      _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n\n        _projectionFlag = true;\n        return _chart;\n      };\n      /**\n       * Returns all GeoJson layers currently registered with this chart. The returned array is a\n       * reference to this chart's internal data structure, so any modification to this array will also\n       * modify this chart's internal registration.\n       * @method geoJsons\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @returns {Array<{name:String, data: Object, accessor: Function}>}\n       */\n\n\n      _chart.geoJsons = function () {\n        return _geoJsons;\n      };\n      /**\n       * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n       * render the projection and features.  Can be useful for figuring out the bounding box of the\n       * feature set and thus a way to calculate scale and translation for the projection.\n       * @method geoPath\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n       * @returns {d3.geo.path}\n       */\n\n\n      _chart.geoPath = function () {\n        return _geoPath;\n      };\n      /**\n       * Remove a GeoJson layer from this chart by name\n       * @method removeGeoJson\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @param {String} name\n       * @returns {dc.geoChoroplethChart}\n       */\n\n\n      _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n          var layer = _geoJsons[i];\n\n          if (layer.name !== name) {\n            geoJsons.push(layer);\n          }\n        }\n\n        _geoJsons = geoJsons;\n        return _chart;\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n     * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n     * typical x and y positioning while retaining the capability to visualize data using bubble radius\n     * and coloring.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n     * @class bubbleOverlay\n     * @memberof dc\n     * @mixes dc.bubbleMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n     * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n     * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n     * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.bubbleOverlay}\n     */\n\n\n    dc.bubbleOverlay = function (parent, chartGroup) {\n      var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n      var BUBBLE_NODE_CLASS = 'node';\n      var BUBBLE_CLASS = 'bubble';\n      /**\n       * **mandatory**\n       *\n       * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n       * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n       * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n       * @method svg\n       * @memberof dc.bubbleOverlay\n       * @instance\n       * @example\n       * // set up underlying svg element\n       * chart.svg(d3.select('#chart svg'));\n       * @param {SVGElement|d3.selection} [imageElement]\n       * @returns {dc.bubbleOverlay}\n       */\n\n      var _chart = dc.bubbleMixin(dc.baseMixin({}));\n\n      var _g;\n\n      var _points = [];\n\n      _chart.transitionDuration(750);\n\n      _chart.transitionDelay(0);\n\n      _chart.radiusValueAccessor(function (d) {\n        return d.value;\n      });\n      /**\n       * **mandatory**\n       *\n       * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n       * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n       * then a bubble will be generated at the position specified by the function. x and y\n       * value specified here are relative to the underlying svg.\n       * @method point\n       * @memberof dc.bubbleOverlay\n       * @instance\n       * @param {String} name\n       * @param {Number} x\n       * @param {Number} y\n       * @returns {dc.bubbleOverlay}\n       */\n\n\n      _chart.point = function (name, x, y) {\n        _points.push({\n          name: name,\n          x: x,\n          y: y\n        });\n\n        return _chart;\n      };\n\n      _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n      };\n\n      function initOverlayG() {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n\n        if (_g.empty()) {\n          _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n\n        return _g;\n      }\n\n      function initializeBubbles() {\n        var data = mapData();\n\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n          var nodeG = getNodeG(point, data);\n          var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n          if (circle.empty()) {\n            circle = nodeG.append('circle').attr('class', BUBBLE_CLASS).attr('r', 0).attr('fill', _chart.getColor).on('click', _chart.onClick);\n          }\n\n          dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay()).attr('r', function (d) {\n            return _chart.bubbleR(d);\n          });\n\n          _chart._doRenderLabel(nodeG);\n\n          _chart._doRenderTitles(nodeG);\n        });\n      }\n\n      function mapData() {\n        var data = {};\n\n        _chart.data().forEach(function (datum) {\n          data[_chart.keyAccessor()(datum)] = datum;\n        });\n\n        return data;\n      }\n\n      function getNodeG(point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n          nodeG = _g.append('g').attr('class', bubbleNodeClass).attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n        return nodeG;\n      }\n\n      _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n      };\n\n      function updateBubbles() {\n        var data = mapData();\n\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n          var nodeG = getNodeG(point, data);\n          var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n          dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay()).attr('r', function (d) {\n            return _chart.bubbleR(d);\n          }).attr('fill', _chart.getColor);\n\n          _chart.doUpdateLabels(nodeG);\n\n          _chart.doUpdateTitles(nodeG);\n        });\n      }\n\n      _chart.debug = function (flag) {\n        if (flag) {\n          var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n          if (debugG.empty()) {\n            debugG = _chart.svg().append('g').attr('class', dc.constants.DEBUG_GROUP_CLASS);\n          }\n\n          var debugText = debugG.append('text').attr('x', 10).attr('y', 20);\n          debugG.append('rect').attr('width', _chart.width()).attr('height', _chart.height()).on('mousemove', function () {\n            var position = d3.mouse(debugG.node());\n            var msg = position[0] + ', ' + position[1];\n            debugText.text(msg);\n          });\n        } else {\n          _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n      };\n\n      _chart.anchor(parent, chartGroup);\n\n      return _chart;\n    };\n    /**\n     * Concrete row chart implementation.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * @class rowChart\n     * @memberof dc\n     * @mixes dc.capMixin\n     * @mixes dc.marginMixin\n     * @mixes dc.colorMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a row chart under #chart-container1 element using the default global chart group\n     * var chart1 = dc.rowChart('#chart-container1');\n     * // create a row chart under #chart-container2 element using chart group A\n     * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.rowChart}\n     */\n\n\n    dc.rowChart = function (parent, chartGroup) {\n      var _g;\n\n      var _labelOffsetX = 10;\n      var _labelOffsetY = 15;\n      var _hasLabelOffsetY = false;\n      var _dyOffset = '0.35em'; // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n\n      var _titleLabelOffsetX = 2;\n      var _gap = 5;\n      var _fixedBarHeight = false;\n      var _rowCssClass = 'row';\n      var _titleRowCssClass = 'titlerow';\n      var _renderTitleLabel = false;\n\n      var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n      var _x;\n\n      var _elasticX;\n\n      var _xAxis = d3.svg.axis().orient('bottom');\n\n      var _rowData;\n\n      _chart.rowsCap = _chart.cap;\n\n      function calculateAxisScale() {\n        if (!_x || _elasticX) {\n          var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n\n          if (extent[0] > 0) {\n            extent[0] = 0;\n          }\n\n          if (extent[1] < 0) {\n            extent[1] = 0;\n          }\n\n          _x = d3.scale.linear().domain(extent).range([0, _chart.effectiveWidth()]);\n        }\n\n        _xAxis.scale(_x);\n      }\n\n      function drawAxis() {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n          axisG = _g.append('g').attr('class', 'axis');\n        }\n\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay()).call(_xAxis);\n      }\n\n      _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg().append('g').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n        drawChart();\n        return _chart;\n      };\n\n      _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n      });\n\n      _chart.label(_chart.cappedKeyAccessor);\n      /**\n       * Gets or sets the x scale. The x scale can be any d3\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n       * @method x\n       * @memberof dc.rowChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n       * @param {d3.scale} [scale]\n       * @returns {d3.scale|dc.rowChart}\n       */\n\n\n      _chart.x = function (scale) {\n        if (!arguments.length) {\n          return _x;\n        }\n\n        _x = scale;\n        return _chart;\n      };\n\n      function drawGridLines() {\n        _g.selectAll('g.tick').select('line.grid-line').remove();\n\n        _g.selectAll('g.tick').append('line').attr('class', 'grid-line').attr('x1', 0).attr('y1', 0).attr('x2', 0).attr('y2', function () {\n          return -_chart.effectiveHeight();\n        });\n      }\n\n      function drawChart() {\n        _rowData = _chart.data();\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass).data(_rowData);\n\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n      }\n\n      function createElements(rows) {\n        var rowEnter = rows.enter().append('g').attr('class', function (d, i) {\n          return _rowCssClass + ' _' + i;\n        });\n        rowEnter.append('rect').attr('width', 0);\n        createLabels(rowEnter);\n      }\n\n      function removeElements(rows) {\n        rows.exit().remove();\n      }\n\n      function rootValue() {\n        var root = _x(0);\n\n        return root === -Infinity || root !== root ? _x(1) : root;\n      }\n\n      function updateElements(rows) {\n        var n = _rowData.length;\n        var height;\n\n        if (!_fixedBarHeight) {\n          height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n          height = _fixedBarHeight;\n        } // vertically align label in center unless they override the value via property setter\n\n\n        if (!_hasLabelOffsetY) {\n          _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n          return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n        }).select('rect').attr('height', height).attr('fill', _chart.getColor).on('click', onClick).classed('deselected', function (d) {\n          return _chart.hasFilter() ? !isSelectedRow(d) : false;\n        }).classed('selected', function (d) {\n          return _chart.hasFilter() ? isSelectedRow(d) : false;\n        });\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay()).attr('width', function (d) {\n          return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n        }).attr('transform', translateX);\n        createTitles(rows);\n        updateLabels(rows);\n      }\n\n      function createTitles(rows) {\n        if (_chart.renderTitle()) {\n          rows.select('title').remove();\n          rows.append('title').text(_chart.title());\n        }\n      }\n\n      function createLabels(rowEnter) {\n        if (_chart.renderLabel()) {\n          rowEnter.append('text').on('click', onClick);\n        }\n\n        if (_chart.renderTitleLabel()) {\n          rowEnter.append('text').attr('class', _titleRowCssClass).on('click', onClick);\n        }\n      }\n\n      function updateLabels(rows) {\n        if (_chart.renderLabel()) {\n          var lab = rows.select('text').attr('x', _labelOffsetX).attr('y', _labelOffsetY).attr('dy', _dyOffset).on('click', onClick).attr('class', function (d, i) {\n            return _rowCssClass + ' _' + i;\n          }).text(function (d) {\n            return _chart.label()(d);\n          });\n          dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', translateX);\n        }\n\n        if (_chart.renderTitleLabel()) {\n          var titlelab = rows.select('.' + _titleRowCssClass).attr('x', _chart.effectiveWidth() - _titleLabelOffsetX).attr('y', _labelOffsetY).attr('dy', _dyOffset).attr('text-anchor', 'end').on('click', onClick).attr('class', function (d, i) {\n            return _titleRowCssClass + ' _' + i;\n          }).text(function (d) {\n            return _chart.title()(d);\n          });\n          dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', translateX);\n        }\n      }\n      /**\n       * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n       * @method renderTitleLabel\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Boolean} [renderTitleLabel=false]\n       * @returns {Boolean|dc.rowChart}\n       */\n\n\n      _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n          return _renderTitleLabel;\n        }\n\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n      };\n\n      function onClick(d) {\n        _chart.onClick(d);\n      }\n\n      function translateX(d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n\n        return 'translate(' + s + ',0)';\n      }\n\n      _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n      };\n      /**\n       * Get the x axis for the row chart instance.  Note: not settable for row charts.\n       * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n       * documention for more information.\n       * @method xAxis\n       * @memberof dc.rowChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n       * @example\n       * // customize x axis tick format\n       * chart.xAxis().tickFormat(function (v) {return v + '%';});\n       * // customize x axis tick values\n       * chart.xAxis().tickValues([0, 100, 200, 300]);\n       * @returns {d3.svg.axis}\n       */\n\n\n      _chart.xAxis = function () {\n        return _xAxis;\n      };\n      /**\n       * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n       * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n       * you could fix height as follows (where count = total number of bars in your TopN and gap is\n       * your vertical gap space).\n       * @method fixedBarHeight\n       * @memberof dc.rowChart\n       * @instance\n       * @example\n       * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n       * @param {Boolean|Number} [fixedBarHeight=false]\n       * @returns {Boolean|Number|dc.rowChart}\n       */\n\n\n      _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n          return _fixedBarHeight;\n        }\n\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n      };\n      /**\n       * Get or set the vertical gap space between rows on a particular row chart instance.\n       * @method gap\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Number} [gap=5]\n       * @returns {Number|dc.rowChart}\n       */\n\n\n      _chart.gap = function (gap) {\n        if (!arguments.length) {\n          return _gap;\n        }\n\n        _gap = gap;\n        return _chart;\n      };\n      /**\n       * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n       * data range when filtered.\n       * @method elasticX\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Boolean} [elasticX]\n       * @returns {Boolean|dc.rowChart}\n       */\n\n\n      _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n          return _elasticX;\n        }\n\n        _elasticX = elasticX;\n        return _chart;\n      };\n      /**\n       * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n       * @method labelOffsetX\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Number} [labelOffsetX=10]\n       * @returns {Number|dc.rowChart}\n       */\n\n\n      _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n          return _labelOffsetX;\n        }\n\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n      };\n      /**\n       * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n       * @method labelOffsetY\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Number} [labelOffsety=15]\n       * @returns {Number|dc.rowChart}\n       */\n\n\n      _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n          return _labelOffsetY;\n        }\n\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n      };\n      /**\n       * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n       * @method titleLabelOffsetX\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Number} [titleLabelOffsetX=2]\n       * @returns {Number|dc.rowChart}\n       */\n\n\n      _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n          return _titleLabelOffsetX;\n        }\n\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n      };\n\n      function isSelectedRow(d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n      }\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n     * labels.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n     * @class legend\n     * @memberof dc\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @returns {dc.legend}\n     */\n\n\n    dc.legend = function () {\n      var LABEL_GAP = 2;\n\n      var _legend = {},\n          _parent,\n          _x = 0,\n          _y = 0,\n          _itemHeight = 12,\n          _gap = 5,\n          _horizontal = false,\n          _legendWidth = 560,\n          _itemWidth = 70,\n          _autoItemWidth = false,\n          _legendText = dc.pluck('name'),\n          _maxItems;\n\n      var _g;\n\n      _legend.parent = function (p) {\n        if (!arguments.length) {\n          return _parent;\n        }\n\n        _parent = p;\n        return _legend;\n      };\n\n      _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n\n        _g = _parent.svg().append('g').attr('class', 'dc-legend').attr('transform', 'translate(' + _x + ',' + _y + ')');\n\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n          legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item').data(legendables).enter().append('g').attr('class', 'dc-legend-item').on('mouseover', function (d) {\n          _parent.legendHighlight(d);\n        }).on('mouseout', function (d) {\n          _parent.legendReset(d);\n        }).on('click', function (d) {\n          d.chart.legendToggle(d);\n        });\n\n        _g.selectAll('g.dc-legend-item').classed('fadeout', function (d) {\n          return d.chart.isLegendableHidden(d);\n        });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n          itemEnter.append('line').attr('x1', 0).attr('y1', _itemHeight / 2).attr('x2', _itemHeight).attr('y2', _itemHeight / 2).attr('stroke-width', 2).attr('stroke-dasharray', dc.pluck('dashstyle')).attr('stroke', dc.pluck('color'));\n        } else {\n          itemEnter.append('rect').attr('width', _itemHeight).attr('height', _itemHeight).attr('fill', function (d) {\n            return d ? d.color : 'blue';\n          });\n        }\n\n        itemEnter.append('text').text(_legendText).attr('x', _itemHeight + LABEL_GAP).attr('y', function () {\n          return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n        });\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n          if (_horizontal) {\n            var itemWidth = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n\n            if (_cumulativeLegendTextWidth + itemWidth > _legendWidth && _cumulativeLegendTextWidth > 0) {\n              ++row;\n              _cumulativeLegendTextWidth = 0;\n            }\n\n            var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n            _cumulativeLegendTextWidth += itemWidth;\n            return translateBy;\n          } else {\n            return 'translate(0,' + i * legendItemHeight() + ')';\n          }\n        });\n      };\n\n      function legendItemHeight() {\n        return _gap + _itemHeight;\n      }\n      /**\n       * Set or get x coordinate for legend widget.\n       * @method x\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [x=0]\n       * @returns {Number|dc.legend}\n       */\n\n\n      _legend.x = function (x) {\n        if (!arguments.length) {\n          return _x;\n        }\n\n        _x = x;\n        return _legend;\n      };\n      /**\n       * Set or get y coordinate for legend widget.\n       * @method y\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [y=0]\n       * @returns {Number|dc.legend}\n       */\n\n\n      _legend.y = function (y) {\n        if (!arguments.length) {\n          return _y;\n        }\n\n        _y = y;\n        return _legend;\n      };\n      /**\n       * Set or get gap between legend items.\n       * @method gap\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [gap=5]\n       * @returns {Number|dc.legend}\n       */\n\n\n      _legend.gap = function (gap) {\n        if (!arguments.length) {\n          return _gap;\n        }\n\n        _gap = gap;\n        return _legend;\n      };\n      /**\n       * Set or get legend item height.\n       * @method itemHeight\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [itemHeight=12]\n       * @returns {Number|dc.legend}\n       */\n\n\n      _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n          return _itemHeight;\n        }\n\n        _itemHeight = itemHeight;\n        return _legend;\n      };\n      /**\n       * Position legend horizontally instead of vertically.\n       * @method horizontal\n       * @memberof dc.legend\n       * @instance\n       * @param  {Boolean} [horizontal=false]\n       * @returns {Boolean|dc.legend}\n       */\n\n\n      _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n          return _horizontal;\n        }\n\n        _horizontal = horizontal;\n        return _legend;\n      };\n      /**\n       * Maximum width for horizontal legend.\n       * @method legendWidth\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [legendWidth=500]\n       * @returns {Number|dc.legend}\n       */\n\n\n      _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n          return _legendWidth;\n        }\n\n        _legendWidth = legendWidth;\n        return _legend;\n      };\n      /**\n       * Legend item width for horizontal legend.\n       * @method itemWidth\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [itemWidth=70]\n       * @returns {Number|dc.legend}\n       */\n\n\n      _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n          return _itemWidth;\n        }\n\n        _itemWidth = itemWidth;\n        return _legend;\n      };\n      /**\n       * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n       * This setting takes into account the {@link dc.legend#gap gap}.\n       * @method autoItemWidth\n       * @memberof dc.legend\n       * @instance\n       * @param  {Boolean} [autoItemWidth=false]\n       * @returns {Boolean|dc.legend}\n       */\n\n\n      _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n          return _autoItemWidth;\n        }\n\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n      };\n      /**\n       * Set or get the legend text function. The legend widget uses this function to render the legend\n       * text for each item. If no function is specified the legend widget will display the names\n       * associated with each group.\n       * @method legendText\n       * @memberof dc.legend\n       * @instance\n       * @param  {Function} [legendText]\n       * @returns {Function|dc.legend}\n       * @example\n       * // default legendText\n       * legend.legendText(dc.pluck('name'))\n       *\n       * // create numbered legend items\n       * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n       *\n       * // create legend displaying group counts\n       * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n       **/\n\n\n      _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n          return _legendText;\n        }\n\n        _legendText = legendText;\n        return _legend;\n      };\n      /**\n       * Maximum number of legend items to display\n       * @method maxItems\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [maxItems]\n       * @return {dc.legend}\n       */\n\n\n      _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n          return _maxItems;\n        }\n\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n      };\n\n      return _legend;\n    };\n    /**\n     * A scatter plot chart\n     *\n     * Examples:\n     * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n     * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n     * @class scatterPlot\n     * @memberof dc\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a scatter plot under #chart-container1 element using the default global chart group\n     * var chart1 = dc.scatterPlot('#chart-container1');\n     * // create a scatter plot under #chart-container2 element using chart group A\n     * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = dc.scatterPlot(compositeChart);\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.scatterPlot}\n     */\n\n\n    dc.scatterPlot = function (parent, chartGroup) {\n      var _chart = dc.coordinateGridMixin({});\n\n      var _symbol = d3.svg.symbol();\n\n      var _existenceAccessor = function _existenceAccessor(d) {\n        return d.value;\n      };\n\n      var originalKeyAccessor = _chart.keyAccessor();\n\n      _chart.keyAccessor(function (d) {\n        return originalKeyAccessor(d)[0];\n      });\n\n      _chart.valueAccessor(function (d) {\n        return originalKeyAccessor(d)[1];\n      });\n\n      _chart.colorAccessor(function () {\n        return _chart._groupName;\n      });\n\n      _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' + _chart.existenceAccessor()(d);\n      });\n\n      var _locator = function _locator(d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' + _chart.y()(_chart.valueAccessor()(d)) + ')';\n      };\n\n      var _highlightedSize = 7;\n      var _symbolSize = 5;\n      var _excludedSize = 3;\n      var _excludedColor = null;\n      var _excludedOpacity = 1.0;\n      var _emptySize = 0;\n      var _emptyOpacity = 0;\n      var _nonemptyOpacity = 1;\n      var _emptyColor = null;\n      var _filtered = [];\n\n      function elementSize(d, i) {\n        if (!_existenceAccessor(d)) {\n          return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n          return Math.pow(_symbolSize, 2);\n        } else {\n          return Math.pow(_excludedSize, 2);\n        }\n      }\n\n      _symbol.size(elementSize);\n\n      dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n          return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n      });\n\n      _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol').data(_chart.data());\n\n        symbols.enter().append('path').attr('class', 'symbol').attr('opacity', 0).attr('fill', _chart.getColor).attr('transform', _locator);\n        symbols.call(renderTitles, _chart.data());\n        symbols.each(function (d, i) {\n          _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', function (d, i) {\n          if (!_existenceAccessor(d)) {\n            return _emptyOpacity;\n          } else if (_filtered[i]) {\n            return _nonemptyOpacity;\n          } else {\n            return _chart.excludedOpacity();\n          }\n        }).attr('fill', function (d, i) {\n          if (_emptyColor && !_existenceAccessor(d)) {\n            return _emptyColor;\n          } else if (_chart.excludedColor() && !_filtered[i]) {\n            return _chart.excludedColor();\n          } else {\n            return _chart.getColor(d);\n          }\n        }).attr('transform', _locator).attr('d', _symbol);\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 0).remove();\n      };\n\n      function renderTitles(symbol, d) {\n        if (_chart.renderTitle()) {\n          symbol.selectAll('title').remove();\n          symbol.append('title').text(function (d) {\n            return _chart.title()(d);\n          });\n        }\n      }\n      /**\n       * Get or set the existence accessor.  If a point exists, it is drawn with\n       * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n       * opacity 1; if it does not exist, it is drawn with\n       * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n       * the existence accessor checks if the reduced value is truthy.\n       * @method existenceAccessor\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link dc.scatterPlot#symbolSize symbolSize}\n       * @see {@link dc.scatterPlot#emptySize emptySize}\n       * @example\n       * // default accessor\n       * chart.existenceAccessor(function (d) { return d.value; });\n       * @param {Function} [accessor]\n       * @returns {Function|dc.scatterPlot}\n       */\n\n\n      _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n          return _existenceAccessor;\n        }\n\n        _existenceAccessor = accessor;\n        return this;\n      };\n      /**\n       * Get or set the symbol type used for each point. By default the symbol is a circle.\n       * Type can be a constant or an accessor.\n       * @method symbol\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n       * @example\n       * // Circle type\n       * chart.symbol('circle');\n       * // Square type\n       * chart.symbol('square');\n       * @param {String|Function} [type='circle']\n       * @returns {String|Function|dc.scatterPlot}\n       */\n\n\n      _chart.symbol = function (type) {\n        if (!arguments.length) {\n          return _symbol.type();\n        }\n\n        _symbol.type(type);\n\n        return _chart;\n      };\n      /**\n       * Get or set the symbol generator. By default `dc.scatterPlot` will use\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n       * to generate symbols. `dc.scatterPlot` will set the\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n       * on the symbol generator.\n       * @method customSymbol\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n       * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n       * @param {String|Function} [customSymbol=d3.svg.symbol()]\n       * @returns {String|Function|dc.scatterPlot}\n       */\n\n\n      _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n          return _symbol;\n        }\n\n        _symbol = customSymbol;\n\n        _symbol.size(elementSize);\n\n        return _chart;\n      };\n      /**\n       * Set or get radius for symbols.\n       * @method symbolSize\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n       * @param {Number} [symbolSize=3]\n       * @returns {Number|dc.scatterPlot}\n       */\n\n\n      _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n          return _symbolSize;\n        }\n\n        _symbolSize = symbolSize;\n        return _chart;\n      };\n      /**\n       * Set or get radius for highlighted symbols.\n       * @method highlightedSize\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n       * @param {Number} [highlightedSize=5]\n       * @returns {Number|dc.scatterPlot}\n       */\n\n\n      _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n          return _highlightedSize;\n        }\n\n        _highlightedSize = highlightedSize;\n        return _chart;\n      };\n      /**\n       * Set or get size for symbols excluded from this chart's filter. If null, no\n       * special size is applied for symbols based on their filter status.\n       * @method excludedSize\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n       * @param {Number} [excludedSize=null]\n       * @returns {Number|dc.scatterPlot}\n       */\n\n\n      _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n          return _excludedSize;\n        }\n\n        _excludedSize = excludedSize;\n        return _chart;\n      };\n      /**\n       * Set or get color for symbols excluded from this chart's filter. If null, no\n       * special color is applied for symbols based on their filter status.\n       * @method excludedColor\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {Number} [excludedColor=null]\n       * @returns {Number|dc.scatterPlot}\n       */\n\n\n      _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n          return _excludedColor;\n        }\n\n        _excludedColor = excludedColor;\n        return _chart;\n      };\n      /**\n       * Set or get opacity for symbols excluded from this chart's filter.\n       * @method excludedOpacity\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {Number} [excludedOpacity=1.0]\n       * @returns {Number|dc.scatterPlot}\n       */\n\n\n      _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n          return _excludedOpacity;\n        }\n\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n      };\n      /**\n       * Set or get radius for symbols when the group is empty.\n       * @method emptySize\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n       * @param {Number} [emptySize=0]\n       * @returns {Number|dc.scatterPlot}\n       */\n\n\n      _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n          return _emptySize;\n        }\n\n        _emptySize = emptySize;\n        return _chart;\n      };\n      /**\n       * Set or get color for symbols when the group is empty. If null, just use the\n       * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n       * @name emptyColor\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {String} [emptyColor=null]\n       * @return {String}\n       * @return {dc.scatterPlot}/\n       */\n\n\n      _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n          return _emptyColor;\n        }\n\n        _emptyColor = emptyColor;\n        return _chart;\n      };\n      /**\n       * Set or get opacity for symbols when the group is empty.\n       * @name emptyOpacity\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {Number} [emptyOpacity=0]\n       * @return {Number}\n       * @return {dc.scatterPlot}\n       */\n\n\n      _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n          return _emptyOpacity;\n        }\n\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n      };\n      /**\n       * Set or get opacity for symbols when the group is not empty.\n       * @name nonemptyOpacity\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {Number} [nonemptyOpacity=1]\n       * @return {Number}\n       * @return {dc.scatterPlot}\n       */\n\n\n      _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n          return _emptyOpacity;\n        }\n\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n      };\n\n      _chart.legendables = function () {\n        return [{\n          chart: _chart,\n          name: _chart._groupName,\n          color: _chart.getColor()\n        }];\n      };\n\n      _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n          return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n          return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n      };\n\n      _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n          return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n          return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n      };\n\n      function resizeSymbolsWhere(condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n          return condition(d3.select(this));\n        });\n\n        var oldSize = _symbol.size();\n\n        _symbol.size(Math.pow(size, 2));\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n\n        _symbol.size(oldSize);\n      }\n\n      _chart.setHandlePaths = function () {// no handle paths for poly-brushes\n      };\n\n      _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n\n        if (_chart.round()) {\n          extent[0] = extent[0].map(_chart.round());\n          extent[1] = extent[1].map(_chart.round());\n\n          _chart.g().select('.brush').call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n      };\n\n      _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n      };\n\n      _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_chart.g());\n\n        if (_chart.brushIsEmpty(extent)) {\n          dc.events.trigger(function () {\n            _chart.filter(null);\n\n            _chart.redrawGroup();\n          });\n        } else {\n          var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n          dc.events.trigger(function () {\n            _chart.filter(null);\n\n            _chart.filter(ranged2DFilter);\n\n            _chart.redrawGroup();\n          }, dc.constants.EVENT_DELAY);\n        }\n      };\n\n      _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * A display of a single numeric value.\n     * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n     * a valueAccessor that returns a single value.\n     * @class numberDisplay\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @example\n     * // create a number display under #chart-container1 element using the default global chart group\n     * var display1 = dc.numberDisplay('#chart-container1');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.numberDisplay}\n     */\n\n\n    dc.numberDisplay = function (parent, chartGroup) {\n      var SPAN_CLASS = 'number-display';\n\n      var _formatNumber = d3.format('.2s');\n\n      var _chart = dc.baseMixin({});\n\n      var _html = {\n        one: '',\n        some: '',\n        none: ''\n      };\n\n      var _lastValue; // dimension not required\n\n\n      _chart._mandatoryAttributes(['group']); // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n\n\n      _chart.ordering(function (kv) {\n        return kv.value;\n      });\n      /**\n       * Gets or sets an optional object specifying HTML templates to use depending on the number\n       * displayed.  The text `%number` will be replaced with the current value.\n       * - one: HTML template to use if the number is 1\n       * - zero: HTML template to use if the number is 0\n       * - some: HTML template to use otherwise\n       * @method html\n       * @memberof dc.numberDisplay\n       * @instance\n       * @example\n       * numberWidget.html({\n       *      one:'%number record',\n       *      some:'%number records',\n       *      none:'no records'})\n       * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n       * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n       */\n\n\n      _chart.html = function (html) {\n        if (!arguments.length) {\n          return _html;\n        }\n\n        if (html.none) {\n          _html.none = html.none; //if none available\n        } else if (html.one) {\n          _html.none = html.one; //if none not available use one\n        } else if (html.some) {\n          _html.none = html.some; //if none and one not available use some\n        }\n\n        if (html.one) {\n          _html.one = html.one; //if one available\n        } else if (html.some) {\n          _html.one = html.some; //if one not available use some\n        }\n\n        if (html.some) {\n          _html.some = html.some; //if some available\n        } else if (html.one) {\n          _html.some = html.one; //if some not available use one\n        }\n\n        return _chart;\n      };\n      /**\n       * Calculate and return the underlying value of the display.\n       * @method value\n       * @memberof dc.numberDisplay\n       * @instance\n       * @returns {Number}\n       */\n\n\n      _chart.value = function () {\n        return _chart.data();\n      };\n\n      function maxBin(all) {\n        if (!all.length) {\n          return null;\n        }\n\n        var sorted = _chart._computeOrderedGroups(all);\n\n        return sorted[sorted.length - 1];\n      }\n\n      _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n      });\n\n      _chart.transitionDuration(250); // good default\n\n\n      _chart.transitionDelay(0);\n\n      _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n          span = span.data([0]).enter().append('span').attr('class', SPAN_CLASS);\n        }\n\n        span.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay()).ease('quad-out-in').tween('text', function () {\n          // [XA] don't try and interpolate from Infinity, else this breaks.\n          var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n          var interp = d3.interpolateNumber(interpStart || 0, newValue);\n          _lastValue = newValue;\n          return function (t) {\n            var html = null,\n                num = _chart.formatNumber()(interp(t));\n\n            if (newValue === 0 && _html.none !== '') {\n              html = _html.none;\n            } else if (newValue === 1 && _html.one !== '') {\n              html = _html.one;\n            } else if (_html.some !== '') {\n              html = _html.some;\n            }\n\n            this.innerHTML = html ? html.replace('%number', num) : num;\n          };\n        });\n      };\n\n      _chart._doRedraw = function () {\n        return _chart._doRender();\n      };\n      /**\n       * Get or set a function to format the value for the display.\n       * @method formatNumber\n       * @memberof dc.numberDisplay\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n       * @param {Function} [formatter=d3.format('.2s')]\n       * @returns {Function|dc.numberDisplay}\n       */\n\n\n      _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n          return _formatNumber;\n        }\n\n        _formatNumber = formatter;\n        return _chart;\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * A heat map is matrix that represents the values of two dimensions of data using colors.\n     * @class heatMap\n     * @memberof dc\n     * @mixes dc.colorMixin\n     * @mixes dc.marginMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a heat map under #chart-container1 element using the default global chart group\n     * var heatMap1 = dc.heatMap('#chart-container1');\n     * // create a heat map under #chart-container2 element using chart group A\n     * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.heatMap}\n     */\n\n\n    dc.heatMap = function (parent, chartGroup) {\n      var DEFAULT_BORDER_RADIUS = 6.75;\n\n      var _chartBody;\n\n      var _cols;\n\n      var _rows;\n\n      var _colOrdering = d3.ascending;\n      var _rowOrdering = d3.ascending;\n\n      var _colScale = d3.scale.ordinal();\n\n      var _rowScale = d3.scale.ordinal();\n\n      var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n      var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n      var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n\n      _chart._mandatoryAttributes(['group']);\n\n      _chart.title(_chart.colorAccessor());\n\n      var _colsLabel = function _colsLabel(d) {\n        return d;\n      };\n\n      var _rowsLabel = function _rowsLabel(d) {\n        return d;\n      };\n      /**\n       * Set or get the column label function. The chart class uses this function to render\n       * column labels on the X axis. It is passed the column name.\n       * @method colsLabel\n       * @memberof dc.heatMap\n       * @instance\n       * @example\n       * // the default label function just returns the name\n       * chart.colsLabel(function(d) { return d; });\n       * @param  {Function} [labelFunction=function(d) { return d; }]\n       * @returns {Function|dc.heatMap}\n       */\n\n\n      _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n          return _colsLabel;\n        }\n\n        _colsLabel = labelFunction;\n        return _chart;\n      };\n      /**\n       * Set or get the row label function. The chart class uses this function to render\n       * row labels on the Y axis. It is passed the row name.\n       * @method rowsLabel\n       * @memberof dc.heatMap\n       * @instance\n       * @example\n       * // the default label function just returns the name\n       * chart.rowsLabel(function(d) { return d; });\n       * @param  {Function} [labelFunction=function(d) { return d; }]\n       * @returns {Function|dc.heatMap}\n       */\n\n\n      _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n          return _rowsLabel;\n        }\n\n        _rowsLabel = labelFunction;\n        return _chart;\n      };\n\n      var _xAxisOnClick = function _xAxisOnClick(d) {\n        filterAxis(0, d);\n      };\n\n      var _yAxisOnClick = function _yAxisOnClick(d) {\n        filterAxis(1, d);\n      };\n\n      var _boxOnClick = function _boxOnClick(d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n          _chart.filter(filter);\n\n          _chart.redrawGroup();\n        });\n      };\n\n      function filterAxis(axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n          return d.key[axis] === value;\n        });\n\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n          return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n          var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n          var filters = selection.data().map(function (kv) {\n            return dc.filters.TwoDimensionalFilter(kv.key);\n          });\n\n          _chart._filter([filters]);\n\n          _chart.redrawGroup();\n        });\n      }\n\n      dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n          return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n      });\n      /**\n       * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n       * the values will be fetched from the data using the value accessor.\n       * @method rows\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Array<String|Number>} [rows]\n       * @returns {Array<String|Number>|dc.heatMap}\n       */\n\n      _chart.rows = function (rows) {\n        if (!arguments.length) {\n          return _rows;\n        }\n\n        _rows = rows;\n        return _chart;\n      };\n      /**\n       #### .rowOrdering([orderFunction])\n       Get or set an accessor to order the rows.  Default is d3.ascending.\n       */\n\n\n      _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n          return _rowOrdering;\n        }\n\n        _rowOrdering = _;\n        return _chart;\n      };\n      /**\n       * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n       * the values will be fetched from the data using the key accessor.\n       * @method cols\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Array<String|Number>} [cols]\n       * @returns {Array<String|Number>|dc.heatMap}\n       */\n\n\n      _chart.cols = function (cols) {\n        if (!arguments.length) {\n          return _cols;\n        }\n\n        _cols = cols;\n        return _chart;\n      };\n      /**\n       #### .colOrdering([orderFunction])\n       Get or set an accessor to order the cols.  Default is ascending.\n       */\n\n\n      _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n          return _colOrdering;\n        }\n\n        _colOrdering = _;\n        return _chart;\n      };\n\n      _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg().append('g').attr('class', 'heatmap').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n        return _chart._doRedraw();\n      };\n\n      _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n\n        if (_rowOrdering) {\n          rows = rows.sort(_rowOrdering);\n        }\n\n        if (_colOrdering) {\n          cols = cols.sort(_colOrdering);\n        }\n\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n          return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n\n        var gEnter = boxes.enter().append('g').attr('class', 'box-group');\n        gEnter.append('rect').attr('class', 'heat-box').attr('fill', 'white').on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n          gEnter.append('title');\n          boxes.select('title').text(_chart.title());\n        }\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d, i) {\n          return cols(_chart.keyAccessor()(d, i));\n        }).attr('y', function (d, i) {\n          return rows(_chart.valueAccessor()(d, i));\n        }).attr('rx', _xBorderRadius).attr('ry', _yBorderRadius).attr('fill', _chart.getColor).attr('width', boxWidth).attr('height', boxHeight);\n        boxes.exit().remove();\n\n        var gCols = _chartBody.select('g.cols');\n\n        if (gCols.empty()) {\n          gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text').attr('x', function (d) {\n          return cols(d) + boxWidth / 2;\n        }).style('text-anchor', 'middle').attr('y', _chart.effectiveHeight()).attr('dy', 12).on('click', _chart.xAxisOnClick()).text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay()).text(_chart.colsLabel()).attr('x', function (d) {\n          return cols(d) + boxWidth / 2;\n        }).attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n\n        var gRows = _chartBody.select('g.rows');\n\n        if (gRows.empty()) {\n          gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text').attr('dy', 6).style('text-anchor', 'end').attr('x', 0).attr('dx', -2).on('click', _chart.yAxisOnClick()).text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay()).text(_chart.rowsLabel()).attr('y', function (d) {\n          return rows(d) + boxHeight / 2;\n        });\n        gRowsText.exit().remove();\n\n        if (_chart.hasFilter()) {\n          _chart.selectAll('g.box-group').each(function (d) {\n            if (_chart.isSelectedNode(d)) {\n              _chart.highlightSelected(this);\n            } else {\n              _chart.fadeDeselected(this);\n            }\n          });\n        } else {\n          _chart.selectAll('g.box-group').each(function () {\n            _chart.resetHighlight(this);\n          });\n        }\n\n        return _chart;\n      };\n      /**\n       * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n       * By default, filtering of the cell will be toggled.\n       * @method boxOnClick\n       * @memberof dc.heatMap\n       * @instance\n       * @example\n       * // default box on click handler\n       * chart.boxOnClick(function (d) {\n       *     var filter = d.key;\n       *     dc.events.trigger(function () {\n       *         _chart.filter(filter);\n       *         _chart.redrawGroup();\n       *     });\n       * });\n       * @param  {Function} [handler]\n       * @returns {Function|dc.heatMap}\n       */\n\n\n      _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n          return _boxOnClick;\n        }\n\n        _boxOnClick = handler;\n        return _chart;\n      };\n      /**\n       * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n       * By default, if any cells in the column are unselected, the whole column will be selected,\n       * otherwise the whole column will be unselected.\n       * @method xAxisOnClick\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Function} [handler]\n       * @returns {Function|dc.heatMap}\n       */\n\n\n      _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n          return _xAxisOnClick;\n        }\n\n        _xAxisOnClick = handler;\n        return _chart;\n      };\n      /**\n       * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n       * By default, if any cells in the row are unselected, the whole row will be selected,\n       * otherwise the whole row will be unselected.\n       * @method yAxisOnClick\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Function} [handler]\n       * @returns {Function|dc.heatMap}\n       */\n\n\n      _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n          return _yAxisOnClick;\n        }\n\n        _yAxisOnClick = handler;\n        return _chart;\n      };\n      /**\n       * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n       * @method xBorderRadius\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Number} [xBorderRadius=6.75]\n       * @returns {Number|dc.heatMap}\n       */\n\n\n      _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n          return _xBorderRadius;\n        }\n\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n      };\n      /**\n       * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n       * @method yBorderRadius\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Number} [yBorderRadius=6.75]\n       * @returns {Number|dc.heatMap}\n       */\n\n\n      _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n          return _yBorderRadius;\n        }\n\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n      };\n\n      _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    }; // https://github.com/d3/d3-plugins/blob/master/box/box.js\n    // * Original source March 22, 2013\n    // * Enhancements integrated on May 13, 2018 for dc.js library only\n    // https://github.com/d3/d3-plugins/blob/master/LICENSE\n    // Copyright (c) 2012-2015, Michael Bostock\n    // All rights reserved.\n    // Redistribution and use in source and binary forms, with or without\n    // modification, are permitted provided that the following conditions are met:\n    //\n    // * Redistributions of source code must retain the above copyright notice, this\n    //   list of conditions and the following disclaimer.\n    //\n    // * Redistributions in binary form must reproduce the above copyright notice,\n    //   this list of conditions and the following disclaimer in the documentation\n    //   and/or other materials provided with the distribution.\n    //\n    // * The name Michael Bostock may not be used to endorse or promote products\n    //   derived from this software without specific prior written permission.\n    //\n    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n    // DISCLAIMED. IN NO EVENT SHALL MICHAEL BOSTOCK BE LIABLE FOR ANY DIRECT,\n    // INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n    // BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n    // OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n    // NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n    // EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n    (function () {\n      // Inspired by http://informationandvisualization.de/blog/box-plot\n      d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null,\n            // Enhanced attributes\n        renderDataPoints = false,\n            dataRadius = 3,\n            dataOpacity = 0.3,\n            dataWidthPortion = 0.8,\n            renderTitle = false,\n            showOutliers = true,\n            boldOutlier = false; // For each small multiple…\n\n        function box(g) {\n          /* jshint -W074 */\n          g.each(function (d, i) {\n            d = d.map(value).sort(d3.ascending);\n            var g = d3.select(this),\n                n = d.length,\n                min,\n                max; // Leave if there are no items.\n\n            if (n === 0) {\n              return;\n            } // Compute quartiles. Must return exactly 3 elements.\n\n\n            var quartileData = d.quartiles = quartiles(d); // Compute whiskers. Must return exactly 2 elements, or null.\n\n            var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                whiskerData = whiskerIndices && whiskerIndices.map(function (i) {\n              return d[i];\n            }); // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n            // We compute the outliers as indices, so that we can join across transitions!\n\n            var outlierIndices = whiskerIndices ? d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n); // Determine the maximum value based on if outliers are shown\n\n            if (showOutliers) {\n              min = d[0];\n              max = d[n - 1];\n            } else {\n              min = d[whiskerIndices[0]];\n              max = d[whiskerIndices[1]];\n            }\n\n            var pointIndices = d3.range(whiskerIndices[0], whiskerIndices[1] + 1); // Compute the new x-scale.\n\n            var x1 = d3.scale.linear().domain(domain && domain.call(this, d, i) || [min, max]).range([height, 0]); // Retrieve the old x-scale, if this is an update.\n\n            var x0 = this.__chart__ || d3.scale.linear().domain([0, Infinity]).range(x1.range()); // Stash the new scale.\n\n            this.__chart__ = x1; // Note: the box, median, and box tick elements are fixed in number,\n            // so we only have to handle enter and update. In contrast, the outliers\n            // and other elements are variable, so we need to exit them! Variable\n            // elements also fade in and out.\n            // Update center line: the vertical line spanning the whiskers.\n\n            var center = g.selectAll('line.center').data(whiskerData ? [whiskerData] : []);\n            center.enter().insert('line', 'rect').attr('class', 'center').attr('x1', width / 2).attr('y1', function (d) {\n              return x0(d[0]);\n            }).attr('x2', width / 2).attr('y2', function (d) {\n              return x0(d[1]);\n            }).style('opacity', 1e-6).transition().duration(duration).delay(delay).style('opacity', 1).attr('y1', function (d) {\n              return x1(d[0]);\n            }).attr('y2', function (d) {\n              return x1(d[1]);\n            });\n            center.transition().duration(duration).delay(delay).style('opacity', 1).attr('x1', width / 2).attr('x2', width / 2).attr('y1', function (d) {\n              return x1(d[0]);\n            }).attr('y2', function (d) {\n              return x1(d[1]);\n            });\n            center.exit().transition().duration(duration).delay(delay).style('opacity', 1e-6).attr('y1', function (d) {\n              return x1(d[0]);\n            }).attr('y2', function (d) {\n              return x1(d[1]);\n            }).remove(); // Update innerquartile box.\n\n            var box = g.selectAll('rect.box').data([quartileData]);\n            box.enter().append('rect').attr('class', 'box').attr('x', 0).attr('y', function (d) {\n              return x0(d[2]);\n            }).attr('width', width).attr('height', function (d) {\n              return x0(d[0]) - x0(d[2]);\n            }).style('fill-opacity', renderDataPoints ? 0.1 : 1).transition().duration(duration).delay(delay).attr('y', function (d) {\n              return x1(d[2]);\n            }).attr('height', function (d) {\n              return x1(d[0]) - x1(d[2]);\n            });\n            box.transition().duration(duration).delay(delay).attr('width', width).attr('y', function (d) {\n              return x1(d[2]);\n            }).attr('height', function (d) {\n              return x1(d[0]) - x1(d[2]);\n            }); // Update median line.\n\n            var medianLine = g.selectAll('line.median').data([quartileData[1]]);\n            medianLine.enter().append('line').attr('class', 'median').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1);\n            medianLine.transition().duration(duration).delay(delay).attr('x1', 0).attr('x2', width).attr('y1', x1).attr('y2', x1); // Update whiskers.\n\n            var whisker = g.selectAll('line.whisker').data(whiskerData || []);\n            whisker.enter().insert('line', 'circle, text').attr('class', 'whisker').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1).style('opacity', 1);\n            whisker.transition().duration(duration).delay(delay).attr('x1', 0).attr('x2', width).attr('y1', x1).attr('y2', x1).style('opacity', 1);\n            whisker.exit().transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1).style('opacity', 1e-6).remove(); // Update outliers.\n\n            if (showOutliers) {\n              var outlierClass = boldOutlier ? 'outlierBold' : 'outlier';\n              var outlierSize = boldOutlier ? 3 : 5;\n              var outlierX = boldOutlier ? function () {\n                return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n              } : function () {\n                return width / 2;\n              };\n              var outlier = g.selectAll('circle.' + outlierClass).data(outlierIndices, Number);\n              outlier.enter().insert('circle', 'text').attr('class', outlierClass).attr('r', outlierSize).attr('cx', outlierX).attr('cy', function (i) {\n                return x0(d[i]);\n              }).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('cy', function (i) {\n                return x1(d[i]);\n              }).style('opacity', 0.6);\n\n              if (renderTitle) {\n                outlier.selectAll('title').remove();\n                outlier.append('title').text(function (i) {\n                  return d[i];\n                });\n              }\n\n              outlier.transition().duration(duration).delay(delay).attr('cx', outlierX).attr('cy', function (i) {\n                return x1(d[i]);\n              }).style('opacity', 0.6);\n              outlier.exit().transition().duration(duration).delay(delay).attr('cy', 0) //function (i) { return x1(d[i]); })\n              .style('opacity', 1e-6).remove();\n            } // Update Values\n\n\n            if (renderDataPoints) {\n              var point = g.selectAll('circle.data').data(pointIndices);\n              point.enter().insert('circle', 'text').attr('class', 'data').attr('r', dataRadius).attr('cx', function () {\n                return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n              }).attr('cy', function (i) {\n                return x0(d[i]);\n              }).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('cy', function (i) {\n                return x1(d[i]);\n              }).style('opacity', dataOpacity);\n\n              if (renderTitle) {\n                point.selectAll('title').remove();\n                point.append('title').text(function (i) {\n                  return d[i];\n                });\n              }\n\n              point.transition().duration(duration).delay(delay).attr('cx', function () {\n                return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n              }).attr('cy', function (i) {\n                return x1(d[i]);\n              }).style('opacity', dataOpacity);\n              point.exit().transition().duration(duration).delay(delay).attr('cy', 0).style('opacity', 1e-6).remove();\n            } // Compute the tick format.\n\n\n            var format = tickFormat || x1.tickFormat(8); // Update box ticks.\n\n            var boxTick = g.selectAll('text.box').data(quartileData);\n            boxTick.enter().append('text').attr('class', 'box').attr('dy', '.3em').attr('dx', function (d, i) {\n              return i & 1 ? 6 : -6;\n            }).attr('x', function (d, i) {\n              return i & 1 ? width : 0;\n            }).attr('y', x0).attr('text-anchor', function (d, i) {\n              return i & 1 ? 'start' : 'end';\n            }).text(format).transition().duration(duration).delay(delay).attr('y', x1);\n            boxTick.transition().duration(duration).delay(delay).text(format).attr('x', function (d, i) {\n              return i & 1 ? width : 0;\n            }).attr('y', x1); // Update whisker ticks. These are handled separately from the box\n            // ticks because they may or may not exist, and we want don't want\n            // to join box ticks pre-transition with whisker ticks post-.\n\n            var whiskerTick = g.selectAll('text.whisker').data(whiskerData || []);\n            whiskerTick.enter().append('text').attr('class', 'whisker').attr('dy', '.3em').attr('dx', 6).attr('x', width).attr('y', x0).text(format).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('y', x1).style('opacity', 1);\n            whiskerTick.transition().duration(duration).delay(delay).text(format).attr('x', width).attr('y', x1).style('opacity', 1);\n            whiskerTick.exit().transition().duration(duration).delay(delay).attr('y', x1).style('opacity', 1e-6).remove(); // Remove temporary quartiles element from within data array.\n\n            delete d.quartiles;\n          });\n          /* jshint +W074 */\n\n          d3.timer.flush();\n        }\n\n        box.width = function (x) {\n          if (!arguments.length) {\n            return width;\n          }\n\n          width = x;\n          return box;\n        };\n\n        box.height = function (x) {\n          if (!arguments.length) {\n            return height;\n          }\n\n          height = x;\n          return box;\n        };\n\n        box.tickFormat = function (x) {\n          if (!arguments.length) {\n            return tickFormat;\n          }\n\n          tickFormat = x;\n          return box;\n        };\n\n        box.showOutliers = function (x) {\n          if (!arguments.length) {\n            return showOutliers;\n          }\n\n          showOutliers = x;\n          return box;\n        };\n\n        box.boldOutlier = function (x) {\n          if (!arguments.length) {\n            return boldOutlier;\n          }\n\n          boldOutlier = x;\n          return box;\n        };\n\n        box.renderDataPoints = function (x) {\n          if (!arguments.length) {\n            return renderDataPoints;\n          }\n\n          renderDataPoints = x;\n          return box;\n        };\n\n        box.renderTitle = function (x) {\n          if (!arguments.length) {\n            return renderTitle;\n          }\n\n          renderTitle = x;\n          return box;\n        };\n\n        box.dataOpacity = function (x) {\n          if (!arguments.length) {\n            return dataOpacity;\n          }\n\n          dataOpacity = x;\n          return box;\n        };\n\n        box.dataWidthPortion = function (x) {\n          if (!arguments.length) {\n            return dataWidthPortion;\n          }\n\n          dataWidthPortion = x;\n          return box;\n        };\n\n        box.duration = function (x) {\n          if (!arguments.length) {\n            return duration;\n          }\n\n          duration = x;\n          return box;\n        };\n\n        box.domain = function (x) {\n          if (!arguments.length) {\n            return domain;\n          }\n\n          domain = x === null ? x : d3.functor(x);\n          return box;\n        };\n\n        box.value = function (x) {\n          if (!arguments.length) {\n            return value;\n          }\n\n          value = x;\n          return box;\n        };\n\n        box.whiskers = function (x) {\n          if (!arguments.length) {\n            return whiskers;\n          }\n\n          whiskers = x;\n          return box;\n        };\n\n        box.quartiles = function (x) {\n          if (!arguments.length) {\n            return quartiles;\n          }\n\n          quartiles = x;\n          return box;\n        };\n\n        return box;\n      };\n\n      function boxWhiskers(d) {\n        return [0, d.length - 1];\n      }\n\n      function boxQuartiles(d) {\n        return [d3.quantile(d, 0.25), d3.quantile(d, 0.5), d3.quantile(d, 0.75)];\n      }\n    })();\n    /**\n     * A box plot is a chart that depicts numerical data via their quartile ranges.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n     * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n     * @class boxPlot\n     * @memberof dc\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a box plot under #chart-container1 element using the default global chart group\n     * var boxPlot1 = dc.boxPlot('#chart-container1');\n     * // create a box plot under #chart-container2 element using chart group A\n     * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.boxPlot}\n     */\n\n\n    dc.boxPlot = function (parent, chartGroup) {\n      var _chart = dc.coordinateGridMixin({}); // Returns a function to compute the interquartile range.\n\n\n      function DEFAULT_WHISKERS_IQR(k) {\n        return function (d) {\n          var q1 = d.quartiles[0],\n              q3 = d.quartiles[2],\n              iqr = (q3 - q1) * k,\n              i = -1,\n              j = d.length;\n\n          do {\n            ++i;\n          } while (d[i] < q1 - iqr);\n\n          do {\n            --j;\n          } while (d[j] > q3 + iqr);\n\n          return [i, j];\n        };\n      }\n\n      var _whiskerIqrFactor = 1.5;\n      var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n\n      var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n      var _box = d3.box();\n\n      var _tickFormat = null;\n      var _renderDataPoints = false;\n      var _dataOpacity = 0.3;\n      var _dataWidthPortion = 0.8;\n      var _showOutliers = true;\n      var _boldOutlier = false; // Used in yAxisMin and yAxisMax to add padding in pixel coordinates\n      // so the min and max data points/whiskers are within the chart\n\n      var _yRangePadding = 8;\n\n      var _boxWidth = function _boxWidth(innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n          return _chart.x().rangeBand();\n        } else {\n          return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n      }; // default to ordinal\n\n\n      _chart.x(d3.scale.ordinal());\n\n      _chart.xUnits(dc.units.ordinal); // valueAccessor should return an array of values that can be coerced into numbers\n      // or if data is overloaded for a static array of arrays, it should be `Number`.\n      // Empty arrays are not included.\n\n\n      _chart.data(function (group) {\n        return group.all().map(function (d) {\n          d.map = function (accessor) {\n            return accessor.call(d, d);\n          };\n\n          return d;\n        }).filter(function (d) {\n          var values = _chart.valueAccessor()(d);\n\n          return values.length !== 0;\n        });\n      });\n      /**\n       * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n       * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n       * for a visual description of how the padding is applied.\n       * @method boxPadding\n       * @memberof dc.boxPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n       * @param {Number} [padding=0.8]\n       * @returns {Number|dc.boxPlot}\n       */\n\n\n      _chart.boxPadding = _chart._rangeBandPadding;\n\n      _chart.boxPadding(0.8);\n      /**\n       * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n       * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n       * `padding * barWidth` on each side of the chart.\n       * @method outerPadding\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Number} [padding=0.5]\n       * @returns {Number|dc.boxPlot}\n       */\n\n\n      _chart.outerPadding = _chart._outerRangeBandPadding;\n\n      _chart.outerPadding(0.5);\n      /**\n       * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n       * parameters the chart width excluding the right and left margins, as well as the number of x\n       * units.\n       * @example\n       * // Using numerical parameter\n       * chart.boxWidth(10);\n       * // Using function\n       * chart.boxWidth((innerChartWidth, xUnits) { ... });\n       * @method boxWidth\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Number|Function} [boxWidth=0.5]\n       * @returns {Number|Function|dc.boxPlot}\n       */\n\n\n      _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n          return _boxWidth;\n        }\n\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n      };\n\n      var boxTransform = function boxTransform(d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n\n        return 'translate(' + xOffset + ', 0)';\n      };\n\n      _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n          _chart.x().domain([]);\n        }\n      };\n\n      _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers).width(_calculatedBoxWidth).height(_chart.effectiveHeight()).value(_chart.valueAccessor()).domain(_chart.y().domain()).duration(_chart.transitionDuration()).tickFormat(_tickFormat).renderDataPoints(_renderDataPoints).dataOpacity(_dataOpacity).dataWidthPortion(_dataWidthPortion).renderTitle(_chart.renderTitle()).showOutliers(_showOutliers).boldOutlier(_boldOutlier);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea();\n      };\n\n      function renderBoxes(boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n        boxesGEnter.attr('class', 'box').attr('transform', boxTransform).call(_box).on('click', function (d) {\n          _chart.filter(_chart.keyAccessor()(d));\n\n          _chart.redrawGroup();\n        });\n      }\n\n      function updateBoxes(boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', boxTransform).call(_box).each(function (d) {\n          var color = _chart.getColor(d, 0);\n\n          d3.select(this).select('rect.box').attr('fill', color);\n          d3.select(this).selectAll('circle.data').attr('fill', color);\n        });\n      }\n\n      function removeBoxes(boxesG) {\n        boxesG.exit().remove().call(_box);\n      }\n\n      function minDataValue() {\n        return d3.min(_chart.data(), function (e) {\n          return d3.min(_chart.valueAccessor()(e));\n        });\n      }\n\n      function maxDataValue() {\n        return d3.max(_chart.data(), function (e) {\n          return d3.max(_chart.valueAccessor()(e));\n        });\n      }\n\n      function yAxisRangeRatio() {\n        return (maxDataValue() - minDataValue()) / _chart.effectiveHeight();\n      }\n\n      _chart.fadeDeselectedArea = function (brushSelection) {\n        if (_chart.hasFilter()) {\n          if (_chart.isOrdinal()) {\n            _chart.g().selectAll('g.box').each(function (d) {\n              if (_chart.isSelectedNode(d)) {\n                _chart.highlightSelected(this);\n              } else {\n                _chart.fadeDeselected(this);\n              }\n            });\n          } else {\n            if (!(_chart.brushOn() || _chart.parentBrushOn())) {\n              return;\n            }\n\n            var start = brushSelection[0];\n            var end = brushSelection[1];\n\n            var keyAccessor = _chart.keyAccessor();\n\n            _chart.g().selectAll('g.box').each(function (d) {\n              var key = keyAccessor(d);\n\n              if (key < start || key >= end) {\n                _chart.fadeDeselected(this);\n              } else {\n                _chart.highlightSelected(this);\n              }\n            });\n          }\n        } else {\n          _chart.g().selectAll('g.box').each(function () {\n            _chart.resetHighlight(this);\n          });\n        }\n      };\n\n      _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n      };\n\n      _chart.yAxisMin = function () {\n        var padding = _yRangePadding * yAxisRangeRatio();\n\n        return dc.utils.subtract(minDataValue() - padding, _chart.yAxisPadding());\n      };\n\n      _chart.yAxisMax = function () {\n        var padding = _yRangePadding * yAxisRangeRatio();\n\n        return dc.utils.add(maxDataValue() + padding, _chart.yAxisPadding());\n      };\n      /**\n       * Get or set the numerical format of the boxplot median, whiskers and quartile labels. Defaults\n       * to integer formatting.\n       * @example\n       * // format ticks to 2 decimal places\n       * chart.tickFormat(d3.format('.2f'));\n       * @method tickFormat\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Function} [tickFormat]\n       * @returns {Number|Function|dc.boxPlot}\n       */\n\n\n      _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n          return _tickFormat;\n        }\n\n        _tickFormat = tickFormat;\n        return _chart;\n      };\n      /**\n       * Get or set the amount of padding to add, in pixel coordinates, to the top and\n       * bottom of the chart to accommodate box/whisker labels.\n       * @example\n       * // allow more space for a bigger whisker font\n       * chart.yRangePadding(12);\n       * @method yRangePadding\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Function} [yRangePadding = 8]\n       * @returns {Number|Function|dc.boxPlot}\n       */\n\n\n      _chart.yRangePadding = function (yRangePadding) {\n        if (!arguments.length) {\n          return _yRangePadding;\n        }\n\n        _yRangePadding = yRangePadding;\n        return _chart;\n      };\n      /**\n       * Get or set whether individual data points will be rendered.\n       * @example\n       * // Enable rendering of individual data points\n       * chart.renderDataPoints(true);\n       * @method renderDataPoints\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Boolean} [show=false]\n       * @returns {Boolean|dc.boxPlot}\n       */\n\n\n      _chart.renderDataPoints = function (show) {\n        if (!arguments.length) {\n          return _renderDataPoints;\n        }\n\n        _renderDataPoints = show;\n        return _chart;\n      };\n      /**\n       * Get or set the opacity when rendering data.\n       * @example\n       * // If individual data points are rendered increase the opacity.\n       * chart.dataOpacity(0.7);\n       * @method dataOpacity\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Number} [opacity=0.3]\n       * @returns {Number|dc.boxPlot}\n       */\n\n\n      _chart.dataOpacity = function (opacity) {\n        if (!arguments.length) {\n          return _dataOpacity;\n        }\n\n        _dataOpacity = opacity;\n        return _chart;\n      };\n      /**\n       * Get or set the portion of the width of the box to show data points.\n       * @example\n       * // If individual data points are rendered increase the data box.\n       * chart.dataWidthPortion(0.9);\n       * @method dataWidthPortion\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Number} [percentage=0.8]\n       * @returns {Number|dc.boxPlot}\n       */\n\n\n      _chart.dataWidthPortion = function (percentage) {\n        if (!arguments.length) {\n          return _dataWidthPortion;\n        }\n\n        _dataWidthPortion = percentage;\n        return _chart;\n      };\n      /**\n       * Get or set whether outliers will be rendered.\n       * @example\n       * // Disable rendering of outliers\n       * chart.showOutliers(false);\n       * @method showOutliers\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Boolean} [show=true]\n       * @returns {Boolean|dc.boxPlot}\n       */\n\n\n      _chart.showOutliers = function (show) {\n        if (!arguments.length) {\n          return _showOutliers;\n        }\n\n        _showOutliers = show;\n        return _chart;\n      };\n      /**\n       * Get or set whether outliers will be drawn bold.\n       * @example\n       * // If outliers are rendered display as bold\n       * chart.boldOutlier(true);\n       * @method boldOutlier\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Boolean} [show=false]\n       * @returns {Boolean|dc.boxPlot}\n       */\n\n\n      _chart.boldOutlier = function (show) {\n        if (!arguments.length) {\n          return _boldOutlier;\n        }\n\n        _boldOutlier = show;\n        return _chart;\n      };\n\n      return _chart.anchor(parent, chartGroup);\n    };\n    /**\n     * The select menu is a simple widget designed to filter a dimension by selecting an option from\n     * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n     * @class selectMenu\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @example\n     * // create a select menu under #select-container using the default global chart group\n     * var select = dc.selectMenu('#select-container')\n     *                .dimension(states)\n     *                .group(stateGroup);\n     * // the option text can be set via the title() function\n     * // by default the option text is '`key`: `value`'\n     * select.title(function (d){\n     *     return 'STATE: ' + d.key;\n     * })\n     * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n     * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n     * Interaction with the widget will only trigger events and redraws within its group.\n     * @returns {selectMenu}\n     **/\n\n\n    dc.selectMenu = function (parent, chartGroup) {\n      var SELECT_CSS_CLASS = 'dc-select-menu';\n      var OPTION_CSS_CLASS = 'dc-select-option';\n\n      var _chart = dc.baseMixin({});\n\n      var _select;\n\n      var _promptText = 'Select all';\n      var _multiple = false;\n      var _promptValue = null;\n      var _numberVisible = null;\n\n      var _order = function _order(a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ? 1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ? -1 : 0;\n      };\n\n      var _filterDisplayed = function _filterDisplayed(d) {\n        return _chart.valueAccessor()(d) > 0;\n      };\n\n      _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n      });\n\n      _chart._doRender = function () {\n        _chart.select('select').remove();\n\n        _select = _chart.root().append('select').classed(SELECT_CSS_CLASS, true);\n\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n\n        return _chart;\n      }; // Fixing IE 11 crash when redrawing the chart\n      // see here for list of IE user Agents :\n      // http://www.useragentstring.com/pages/useragentstring.php?name=Internet+Explorer\n\n\n      var ua = window.navigator.userAgent; // test for IE 11 but not a lower version (which contains MSIE in UA)\n\n      if (ua.indexOf('Trident/') > 0 && ua.indexOf('MSIE') === -1) {\n        _chart.redraw = _chart.render;\n      }\n\n      _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions(); // select the option(s) corresponding to current filter(s)\n\n        if (_chart.hasFilter() && _multiple) {\n          _select.selectAll('option').property('selected', function (d) {\n            return typeof d !== 'undefined' && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n          });\n        } else if (_chart.hasFilter()) {\n          _select.property('value', _chart.filter());\n        } else {\n          _select.property('value', '');\n        }\n\n        return _chart;\n      };\n\n      function renderOptions() {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS).data(_chart.data(), function (d) {\n          return _chart.keyAccessor()(d);\n        });\n\n        options.enter().append('option').classed(OPTION_CSS_CLASS, true).attr('value', function (d) {\n          return _chart.keyAccessor()(d);\n        });\n        options.text(_chart.title());\n        options.exit().remove();\n\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n\n        return options;\n      }\n\n      function onChange(d, i) {\n        var values;\n        var target = d3.event.target;\n\n        if (target.selectedOptions) {\n          var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n          values = selectedOptions.map(function (d) {\n            return d.value;\n          });\n        } else {\n          // IE and other browsers do not support selectedOptions\n          // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n          var options = [].slice.call(d3.event.target.options);\n          values = options.filter(function (option) {\n            return option.selected;\n          }).map(function (option) {\n            return option.value;\n          });\n        } // console.log(values);\n        // check if only prompt option is selected\n\n\n        if (values.length === 1 && values[0] === '') {\n          values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n          values = values[0];\n        }\n\n        _chart.onChange(values);\n      }\n\n      _chart.onChange = function (val) {\n        if (val && _multiple) {\n          _chart.replaceFilter([val]);\n        } else if (val) {\n          _chart.replaceFilter(val);\n        } else {\n          _chart.filterAll();\n        }\n\n        dc.events.trigger(function () {\n          _chart.redrawGroup();\n        });\n      };\n\n      function setAttributes() {\n        if (_multiple) {\n          _select.attr('multiple', true);\n        } else {\n          _select.attr('multiple', null);\n        }\n\n        if (_numberVisible !== null) {\n          _select.attr('size', _numberVisible);\n        } else {\n          _select.attr('size', null);\n        }\n      }\n      /**\n       * Get or set the function that controls the ordering of option tags in the\n       * select menu. By default options are ordered by the group key in ascending\n       * order.\n       * @name order\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {Function} [order]\n       * @example\n       * // order by the group's value\n       * chart.order(function (a,b) {\n       *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n       * });\n       **/\n\n\n      _chart.order = function (order) {\n        if (!arguments.length) {\n          return _order;\n        }\n\n        _order = order;\n        return _chart;\n      };\n      /**\n       * Get or set the text displayed in the options used to prompt selection.\n       * @name promptText\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {String} [promptText='Select all']\n       * @example\n       * chart.promptText('All states');\n       **/\n\n\n      _chart.promptText = function (_) {\n        if (!arguments.length) {\n          return _promptText;\n        }\n\n        _promptText = _;\n        return _chart;\n      };\n      /**\n       * Get or set the function that filters option tags prior to display. By default options\n       * with a value of < 1 are not displayed.\n       * @name filterDisplayed\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {function} [filterDisplayed]\n       * @example\n       * // display all options override the `filterDisplayed` function:\n       * chart.filterDisplayed(function () {\n       *     return true;\n       * });\n       **/\n\n\n      _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n          return _filterDisplayed;\n        }\n\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n      };\n      /**\n       * Controls the type of select menu. Setting it to true converts the underlying\n       * HTML tag into a multiple select.\n       * @name multiple\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {boolean} [multiple=false]\n       * @example\n       * chart.multiple(true);\n       **/\n\n\n      _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n          return _multiple;\n        }\n\n        _multiple = multiple;\n        return _chart;\n      };\n      /**\n       * Controls the default value to be used for\n       * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n       * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n       * just the prompt is selected.\n       * @name promptValue\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {?*} [promptValue=null]\n       **/\n\n\n      _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n          return _promptValue;\n        }\n\n        _promptValue = promptValue;\n        return _chart;\n      };\n      /**\n       * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n       * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n       * the `select` element. If `null` (the default), uses the browser's default height.\n       * @name numberItems\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {?number} [numberVisible=null]\n       * @example\n       * chart.numberVisible(10);\n       **/\n\n\n      _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n          return _numberVisible;\n        }\n\n        _numberVisible = numberVisible;\n        return _chart;\n      };\n\n      _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n      return _chart.anchor(parent, chartGroup);\n    }; // Renamed functions\n\n\n    dc.abstractBubbleChart = dc.bubbleMixin;\n    dc.baseChart = dc.baseMixin;\n    dc.capped = dc.capMixin;\n    dc.colorChart = dc.colorMixin;\n    dc.coordinateGridChart = dc.coordinateGridMixin;\n    dc.marginable = dc.marginMixin;\n    dc.stackableChart = dc.stackMixin; // Expose d3 and crossfilter, so that clients in browserify\n    // case can obtain them if they need them.\n\n    dc.d3 = d3;\n    dc.crossfilter = crossfilter;\n    return dc;\n  }\n\n  if (typeof define === \"function\" && define.amd) {\n    define([\"d3\", \"crossfilter2\"], _dc);\n  } else if (typeof module === \"object\" && module.exports) {\n    var _d3 = require('d3');\n\n    var _crossfilter = require('crossfilter2'); // When using npm + browserify, 'crossfilter' is a function,\n    // since package.json specifies index.js as main function, and it\n    // does special handling. When using bower + browserify,\n    // there's no main in bower.json (in fact, there's no bower.json),\n    // so we need to fix it.\n\n\n    if (typeof _crossfilter !== \"function\") {\n      _crossfilter = _crossfilter.crossfilter;\n    }\n\n    module.exports = _dc(_d3, _crossfilter);\n  } else {\n    this.dc = _dc(d3, crossfilter);\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}
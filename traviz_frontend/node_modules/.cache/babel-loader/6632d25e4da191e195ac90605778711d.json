{"ast":null,"code":"import deep from \"@ranfdev/deepobj\"; // Note(cg): result was previsouly using lodash.result, not ESM compatible.\n\nvar get = function get(obj, prop) {\n  var value = obj[prop];\n  return typeof value === 'function' ? value.call(obj) : value;\n};\n/**\n * get value of object at a deep path.\n * if the resolved value is a function,\n * it's invoked with the `this` binding of \n * its parent object and its result is returned. \n *  \n * @param  {Object} obj  the object (e.g. { 'a': [{ 'b': { 'c1': 3, 'c2': 4} }], 'd': {e:1} }; )\n * @param  {String} path deep path (e.g. `d.e`` or `a[0].b.c1`. Dot notation (a.0.b)is also supported)\n * @return {Any}      the resolved value\n */\n\n\nvar reg = /\\[([\\w\\d]+)\\]/g;\nexport default (function (obj, path) {\n  return deep(get, obj, path.replace(reg, '.$1'));\n});","map":null,"metadata":{},"sourceType":"module"}
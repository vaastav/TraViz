{"ast":null,"code":"import * as XtraceUtils from \"../xtrace_utils\";\n\nvar PrototypeBuilder = function PrototypeBuilder() {\n  var getter = null;\n  var accessors = [];\n  var mappers = [];\n  var id = true;\n  var times = true;\n\n  var build = function build(cls) {\n    // First, add the ID and getID methods if requested\n    if (id) {\n      cls.prototype.ID = function () {\n        return this.fqid;\n      };\n\n      cls.prototype.globalID = function () {\n        return this.id;\n      };\n\n      cls.getID = function (obj) {\n        return obj.ID();\n      };\n\n      cls.getGlobalID = function (obj) {\n        return obj.globalID();\n      };\n    } // The getter is just an accessor\n\n\n    if (getter != null) {\n      cls.prototype.getter = getter;\n      accessors.push(getter);\n    } // Accessors access data fields\n\n\n    for (var i = 0; i < accessors.length; i++) {\n      var accessor = accessors[i];\n      var accessor_data_field = accessor.toLowerCase();\n\n      cls.prototype[accessor] = function (field) {\n        return function () {\n          return this[field];\n        };\n      }(accessor_data_field);\n    } // At this point, remaining methods need a getter.  If no getter, return\n\n\n    if (getter == null) return; // Mappers simply call the mapper method on each of the elements returned by the getter\n\n    for (var i = 0; i < mappers.length; i++) {\n      cls.prototype[mappers[i]] = function (mapper) {\n        return function (\n        /*optional*/\n        dontcache) {\n          if (this[mapper.toLowerCase()]) return this[mapper.toLowerCase()];\n          var ret = [].concat.apply([], this[this.getter]().map(function (elem) {\n            return elem[mapper](true);\n          }));\n          if (!dontcache) this[mapper.toLowerCase()] = ret;\n          return ret;\n        };\n      }(mappers[i]);\n    }\n\n    ; // Times call the max/min of the times of the getter\n\n    if (times) {\n      cls.prototype.Start = function () {\n        if (this.start == null) this.start = Math.min.apply(this, this[this.getter]().map(function (elem) {\n          return elem.Start();\n        }));\n        return this.start;\n      };\n\n      cls.prototype.End = function () {\n        if (this.end == null) this.end = Math.max.apply(this, this[this.getter]().map(function (elem) {\n          return elem.End();\n        }));\n        return this.end;\n      };\n\n      cls.prototype.Duration = function () {\n        return this.End() - this.Start();\n      };\n    }\n  };\n\n  build.getter = function (_) {\n    if (!arguments.length) return getter;\n    getter = _;\n    return build;\n  };\n\n  build.accessors = function (_) {\n    if (!arguments.length) return accessors;\n    accessors = _;\n    return build;\n  };\n\n  build.mappers = function (_) {\n    if (!arguments.length) return mappers;\n    mappers = _;\n    return build;\n  };\n\n  build.id = function (_) {\n    if (!arguments.length) return id;\n    id = _;\n    return build;\n  };\n\n  build.times = function (_) {\n    if (!arguments.length) return times;\n    times = _;\n    return build;\n  };\n\n  return build;\n};\n\nexport var XEvent = function XEvent(span, report) {\n  this.report = report;\n  this.span = span;\n  this.id = report.id;\n  this.fqid = this.id;\n  this.timestamp = report.Timestamp;\n  this.type = \"event\";\n  if (report[\"Operation\"]) this.type = \"operation \" + report.Operation;\n  this.start = this.timestamp;\n  this.end = this.timestamp;\n  this.duration = 0;\n\n  if (report[\"Duration\"]) {\n    this.duration = Number(report[\"Duration\"]) / 1000000.0;\n    this.start = this.timestamp - this.duration;\n    this.end = this.timestamp;\n  }\n\n  if (report[\"Operation\"] && report.Operation.substr(0, 4) == \"file\" && report.Agent.indexOf(\"ScheduledFileIO\") != -1) {\n    var keys = [\"PreWait\", \"PreDuration\", \"IOWait\", \"IODuration\", \"PostWait\", \"PostDuration\"];\n    this.duration = 0;\n\n    for (var i = 0; i < keys.length; i++) {\n      if (this.report[keys[i]]) this.duration += Number(this.report[keys[i]]);\n    }\n\n    this.duration = this.duration / 1000000.0;\n    this.start = this.timestamp - this.duration;\n    this.end = this.timestamp;\n  }\n\n  this.span.thread.process.machine.task.reports_by_id[this.id] = this;\n};\n\nXEvent.prototype.Edges = function () {\n  if (this.edges == null) {\n    this.edges = [];\n    var parents = this.report.ParentEventID;\n\n    for (var i = 0; parents != null && i < parents.length; i++) {\n      var edge = {\n        id: this.id + parents[i],\n        parent: this.span.thread.process.machine.task.reports_by_id[parents[i]],\n        child: this\n      };\n      if (edge.parent && edge.child) this.edges.push(edge);\n    }\n  }\n\n  return this.edges;\n};\n\nPrototypeBuilder().accessors([\"Timestamp\"])(XEvent);\nexport var XSpan = function XSpan(thread, id, reports) {\n  this.thread = thread;\n  this.id = this.thread.fqid + \"_Span-\" + id;\n  this.fqid = this.id;\n  this.events = [];\n  this.waiting = false; // is this a span where a thread is waiting?\n\n  for (var i = 0; i < reports.length; i++) {\n    if (reports[i].Operation && reports[i].Operation.substring(0, 4) == \"file\") {\n      this.events.push(new XEvent(this, reports[i]));\n    } else {\n      this.events.push(new XEvent(this, reports[i]));\n    }\n  }\n\n  this.events.sort(function (a, b) {\n    return a.timestamp - b.timestamp;\n  });\n  this.start = this.events[0].Timestamp();\n  this.end = this.events[this.events.length - 1].Timestamp();\n  this.hddevents = this.Events().filter(function (event) {\n    return event.report.Operation && event.report.Operation.substring(0, 4) == \"file\";\n  });\n  this.networkevents = this.Events().filter(function (event) {\n    return event.report.Operation && (event.report.Operation.startsWith(\"net\") || event.report.Operation.startsWith(\"loopback\"));\n  });\n};\nPrototypeBuilder().getter(\"Events\").accessors([\"HDDEvents\", \"NetworkEvents\"]).mappers([\"Edges\"])(XSpan);\nexport var XThread = function XThread(process, id, reports) {\n  reports.sort(function (a, b) {\n    return a.Timestamp - b.Timestamp;\n  });\n  this.process = process;\n  this.id = this.process.id + \"_Thread-\" + id;\n  this.fqid = this.process.fqid + \"_Thread-\" + id;\n  this.spans = [];\n  var span = [];\n\n  for (var i = 0; i < reports.length; i++) {\n    if (reports[i].Operation && reports[i].Operation == \"waited\") {\n      /* Special case: a 'wait' report.  A 'wait' report translates into two events; a start and end.\n       * A 'wait' report is generated at the end of the wait, and contains a field specifying the duration\n       * of the wait.  So we must manually reconstruct the begin event of the wait */\n      // The duration of the wait event\n      var duration = Number(reports[i].Duration) / 1000000.0; // Add an event to the end of the prior span and modify the timestamp\n\n      span.push(reports[i]);\n      var preWait = new XSpan(this, this.spans.length, span);\n      var preWaitEndEvent = preWait.events[preWait.events.length - 1];\n      this.spans.push(preWait); // Create a span just for the event\n\n      var Wait = new XSpan(this, this.spans.length, [reports[i], reports[i]]);\n      Wait.waiting = true;\n      Wait.events[0].timestamp = Wait.events[0].timestamp - duration;\n      preWaitEndEvent.timestamp = Wait.events[0].timestamp; // modify the timestamp of the end event of the prior span\n\n      this.spans.push(Wait); // Fix start/end ts (a hack, whatever)\n\n      preWait.end = preWaitEndEvent.timestamp;\n      Wait.start = Wait.events[0].timestamp; // Create the start of the next span;\n\n      span = [reports[i]];\n    } else if (reports[i].Operation && reports[i].Operation == \"unset\") {\n      span.push(reports[i]);\n      this.spans.push(new XSpan(this, this.spans.length, span));\n      span = [];\n    } else {\n      span.push(reports[i]);\n    }\n  }\n\n  if (span.length > 0) this.spans.push(new XSpan(this, this.spans.length, span));\n  this.spans.sort(function (a, b) {\n    return a.Start() - b.Start();\n  }); // Now set the short name of this thread\n\n  this.shortname = \"Thread-\" + this.id;\n  var names = {};\n  names[this.shortname] = true;\n  var events = this.Events();\n\n  for (var i = 0; i < events.length; i++) {\n    if (events[i].report.ThreadName) names[events[i].report.ThreadName] = true;\n  }\n\n  delete names[this.shortname];\n  var othernames = Object.keys(names);\n\n  if (othernames.length > 0) {\n    var selected = othernames[0];\n    if (selected.length > 20) this.shortname = selected.substring(0, 20) + \"...\";else this.shortname = selected;\n  }\n};\nPrototypeBuilder().getter(\"Spans\").accessors([\"ShortName\"]).mappers([\"Events\", \"Edges\", \"HDDEvents\", \"NetworkEvents\"])(XThread);\nexport var XProcess = function XProcess(machine, id, reports) {\n  this.machine = machine;\n  this.processid = id;\n  this.id = this.machine.id + \"_Process-\" + id.replace(\"@\", \"\");\n  this.fqid = this.machine.fqid + \"_Process-\" + id.replace(\"@\", \"\");\n  this.gcevents = []; // We want high resolution timestamps, so perform some averaging\n\n  if (reports[0][\"HRT\"]) {\n    var totalTS = 0.0;\n    var totalHRT = 0.0;\n    var count = 0.0;\n\n    for (var i = 0; i < reports.length; i++) {\n      totalTS += Number(reports[i].Timestamp);\n      totalHRT += Number(reports[i].HRT);\n      count += 1.0;\n    }\n\n    var avgHRT = totalHRT / count;\n    var avgTS = totalTS / count;\n\n    for (var i = 0; i < reports.length; i++) {\n      var reportHRT = Number(reports[i].HRT);\n      var reportTS = avgTS + (reportHRT - avgHRT) / 1000000.0;\n      reports[i].Timestamp = reportTS;\n    }\n  }\n\n  var reports_by_thread = XtraceUtils.group_reports_by_field(reports, \"ThreadID\");\n  this.threads = [];\n\n  for (var thread_id in reports_by_thread) {\n    this.threads.push(new XThread(this, thread_id, reports_by_thread[thread_id]));\n  }\n\n  this.threads.sort(function (a, b) {\n    return a.Start() - b.Start();\n  });\n};\n\nXProcess.prototype.addGCData = function (gcdata) {\n  var gcreports = gcdata[this.processid];\n\n  if (gcreports) {\n    var process = this;\n    this.gcevents = gcreports.map(function (report) {\n      return new GCEvent(process, report);\n    });\n    this.gcevents = this.gcevents.filter(function (gcevent) {\n      return gcevent.start <= process.End() && gcevent.end >= process.Start() && gcevent.duration > 0;\n    });\n  }\n\n  ;\n};\n\nPrototypeBuilder().getter(\"Threads\").accessors([\"GCEvents\"]).mappers([\"Spans\", \"Events\", \"Edges\", \"HDDEvents\", \"NetworkEvents\"])(XProcess);\nexport var XMachine = function XMachine(task, id, reports) {\n  this.task = task;\n  this.id = \"Machine-\" + id;\n  this.fqid = this.task.ID() + \"_\" + this.id;\n  this.llid = \"Machine-\" + this.id;\n  var reports_by_process = XtraceUtils.group_reports_by_field(reports, \"ProcessID\");\n  this.processes = [];\n\n  for (var process_id in reports_by_process) {\n    this.processes.push(new XProcess(this, process_id, reports_by_process[process_id]));\n  }\n\n  this.processes.sort(function (a, b) {\n    return a.Start() - b.Start();\n  });\n};\nPrototypeBuilder().getter(\"Processes\").mappers([\"Threads\", \"Spans\", \"Events\", \"Edges\", \"HDDEvents\", \"NetworkEvents\", \"GCEvents\"])(XMachine);\nexport var XTask = function XTask(data) {\n  // Copy the params\n  this.id = data.id;\n  this.fqid = \"Task-\" + this.id;\n  this.reports = data.reports;\n  this.reports_by_id = {};\n\n  for (var i = 0; i < this.reports.length; i++) {\n    var report = this.reports[i];\n    if (report.EventID == null) report.id = \"\" + (Math.floor(Math.random() * (9999999 - 1000000 + 1)) + 1000000);else report.id = report.EventID;\n    this.reports_by_id[report.id] = report;\n  } // Create the data structures\n\n\n  this.machines = [];\n  var reports_by_machine = XtraceUtils.group_reports_by_field(data.reports, \"Host\");\n\n  for (var machine_id in reports_by_machine) {\n    this.machines.push(new XMachine(this, machine_id, reports_by_machine[machine_id]));\n  }\n\n  this.machines.sort(function (a, b) {\n    return a.Start() - b.Start();\n  }); // Extract the tags\n\n  var tags = {};\n\n  for (var i = 0; i < this.reports.length; i++) {\n    if (this.reports[i][\"Tag\"]) for (var j = 0; j < this.reports[i][\"Tag\"].length; j++) {\n      tags[this.reports[i][\"Tag\"][j]] = true;\n    }\n  }\n\n  this.tags = Object.keys(tags);\n};\nPrototypeBuilder().getter(\"Machines\").accessors([\"Tags\"]).mappers([\"Processes\", \"Threads\", \"Spans\", \"Events\", \"Edges\", \"GCEvents\", \"HDDEvents\", \"NetworkEvents\"])(XTask);\n\nvar Workload = function Workload(data, gcdata) {\n  window.workload = this;\n  this.data = [];\n  this.gcdata = gcdata;\n  this.id = XtraceUtils.unique_id();\n  this.fqid = this.id; // Create the data structures\n\n  this.tasks = [];\n\n  for (var i = 0; i < data.length; i++) {\n    this.addTask(data[i]);\n  }\n};\n\nWorkload.prototype.addTask = function (data) {\n  this.data.push(data);\n  var task = new XTask(data);\n  this.tasks.push(task);\n  this.tasks.sort(function (a, b) {\n    return a.Start() - b.Start();\n  });\n  this.start = null;\n  this.end = null;\n  this.min = this.Start();\n  this.max = this.End();\n  var gcdata = this.gcdata;\n  if (gcdata) task.Processes().forEach(function (process) {\n    process.addGCData(gcdata);\n  });\n};\n\nWorkload.prototype.addGC = function (gcdata) {\n  this.gcdata = gcdata;\n  if (this.gcdata) this.Processes().forEach(function (process) {\n    process.addGCData(gcdata);\n  });\n};\n\nPrototypeBuilder().getter(\"Tasks\").mappers([\"Machines\", \"Processes\", \"Threads\", \"Spans\", \"Events\", \"Edges\", \"GCEvents\", \"HDDEvents\", \"NetworkEvents\"])(Workload);\nexport var GCEvent = function GCEvent(process, report) {\n  this.report = report;\n  this.process = process;\n  if (report.EventID == null) report.id = \"\" + (Math.floor(Math.random() * (9999999 - 1000000 + 1)) + 1000000);else report.id = report.EventID;\n  this.xtraceid = report.id;\n  this.id = this.process.fqid + \"_GC-\" + this.xtraceid;\n  this.fqid = this.id;\n  this.start = Number(this.report[\"GcStart\"]) + 1;\n  this.duration = Number(this.report[\"GcDuration\"]) - 1;\n  this.end = this.start + this.duration;\n  this.name = this.report[\"GcName\"];\n};\nPrototypeBuilder().accessors([\"Start\", \"Duration\", \"Name\"])(GCEvent);","map":{"version":3,"sources":["/home/stolet/TraViz/traviz_frontend/src/components/Swimlane/data/Workload.js"],"names":["XtraceUtils","PrototypeBuilder","getter","accessors","mappers","id","times","build","cls","prototype","ID","fqid","globalID","getID","obj","getGlobalID","push","i","length","accessor","accessor_data_field","toLowerCase","field","mapper","dontcache","ret","concat","apply","map","elem","Start","start","Math","min","End","end","max","Duration","_","arguments","XEvent","span","report","timestamp","Timestamp","type","Operation","duration","Number","substr","Agent","indexOf","keys","thread","process","machine","task","reports_by_id","Edges","edges","parents","ParentEventID","edge","parent","child","XSpan","reports","events","waiting","substring","sort","a","b","hddevents","Events","filter","event","networkevents","startsWith","XThread","spans","preWait","preWaitEndEvent","Wait","shortname","names","ThreadName","othernames","Object","selected","XProcess","processid","replace","gcevents","totalTS","totalHRT","count","HRT","avgHRT","avgTS","reportHRT","reportTS","reports_by_thread","group_reports_by_field","threads","thread_id","addGCData","gcdata","gcreports","GCEvent","gcevent","XMachine","llid","reports_by_process","processes","process_id","XTask","data","EventID","floor","random","machines","reports_by_machine","machine_id","tags","j","Workload","window","workload","unique_id","tasks","addTask","Processes","forEach","addGC","xtraceid","name"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,iBAA7B;;AAEA,IAAIC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAY;AACjC,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,EAAE,GAAG,IAAT;AACA,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAIC,KAAK,GAAG,SAARA,KAAQ,CAAUC,GAAV,EAAe;AACzB;AACA,QAAIH,EAAJ,EAAQ;AACNG,MAAAA,GAAG,CAACC,SAAJ,CAAcC,EAAd,GAAmB,YAAY;AAAE,eAAO,KAAKC,IAAZ;AAAmB,OAApD;;AACAH,MAAAA,GAAG,CAACC,SAAJ,CAAcG,QAAd,GAAyB,YAAY;AAAE,eAAO,KAAKP,EAAZ;AAAiB,OAAxD;;AACAG,MAAAA,GAAG,CAACK,KAAJ,GAAY,UAAUC,GAAV,EAAe;AAAE,eAAOA,GAAG,CAACJ,EAAJ,EAAP;AAAkB,OAA/C;;AACAF,MAAAA,GAAG,CAACO,WAAJ,GAAkB,UAAUD,GAAV,EAAe;AAAE,eAAOA,GAAG,CAACF,QAAJ,EAAP;AAAwB,OAA3D;AACD,KAPwB,CASzB;;;AACA,QAAIV,MAAM,IAAI,IAAd,EAAoB;AAClBM,MAAAA,GAAG,CAACC,SAAJ,CAAcP,MAAd,GAAuBA,MAAvB;AACAC,MAAAA,SAAS,CAACa,IAAV,CAAed,MAAf;AACD,KAbwB,CAezB;;;AACA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,SAAS,CAACe,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAIE,QAAQ,GAAGhB,SAAS,CAACc,CAAD,CAAxB;AACA,UAAIG,mBAAmB,GAAGD,QAAQ,CAACE,WAAT,EAA1B;;AACAb,MAAAA,GAAG,CAACC,SAAJ,CAAcU,QAAd,IAA0B,UAAUG,KAAV,EAAiB;AAAE,eAAO,YAAY;AAAE,iBAAO,KAAKA,KAAL,CAAP;AAAqB,SAA1C;AAA6C,OAAhE,CAAiEF,mBAAjE,CAA1B;AACD,KApBwB,CAsBzB;;;AACA,QAAIlB,MAAM,IAAI,IAAd,EACE,OAxBuB,CA0BzB;;AACA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACc,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCT,MAAAA,GAAG,CAACC,SAAJ,CAAcL,OAAO,CAACa,CAAD,CAArB,IAA4B,UAAUM,MAAV,EAAkB;AAC5C,eAAO;AAAU;AAAYC,QAAAA,SAAtB,EAAiC;AACtC,cAAI,KAAKD,MAAM,CAACF,WAAP,EAAL,CAAJ,EACE,OAAO,KAAKE,MAAM,CAACF,WAAP,EAAL,CAAP;AACF,cAAII,GAAG,GAAG,GAAGC,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoB,KAAK,KAAKzB,MAAV,IAAoB0B,GAApB,CAAwB,UAAUC,IAAV,EAAgB;AAAE,mBAAOA,IAAI,CAACN,MAAD,CAAJ,CAAa,IAAb,CAAP;AAA4B,WAAtE,CAApB,CAAV;AACA,cAAI,CAACC,SAAL,EACE,KAAKD,MAAM,CAACF,WAAP,EAAL,IAA6BI,GAA7B;AACF,iBAAOA,GAAP;AACD,SAPD;AAQD,OAT2B,CAS1BrB,OAAO,CAACa,CAAD,CATmB,CAA5B;AAUD;;AAAA,KAtCwB,CAwCzB;;AACA,QAAIX,KAAJ,EAAW;AACTE,MAAAA,GAAG,CAACC,SAAJ,CAAcqB,KAAd,GAAsB,YAAY;AAChC,YAAI,KAAKC,KAAL,IAAc,IAAlB,EACE,KAAKA,KAAL,GAAaC,IAAI,CAACC,GAAL,CAASN,KAAT,CAAe,IAAf,EAAqB,KAAK,KAAKzB,MAAV,IAAoB0B,GAApB,CAAwB,UAAUC,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACC,KAAL,EAAP;AAAsB,SAAhE,CAArB,CAAb;AACF,eAAO,KAAKC,KAAZ;AACD,OAJD;;AAKAvB,MAAAA,GAAG,CAACC,SAAJ,CAAcyB,GAAd,GAAoB,YAAY;AAC9B,YAAI,KAAKC,GAAL,IAAY,IAAhB,EACE,KAAKA,GAAL,GAAWH,IAAI,CAACI,GAAL,CAAST,KAAT,CAAe,IAAf,EAAqB,KAAK,KAAKzB,MAAV,IAAoB0B,GAApB,CAAwB,UAAUC,IAAV,EAAgB;AAAE,iBAAOA,IAAI,CAACK,GAAL,EAAP;AAAoB,SAA9D,CAArB,CAAX;AACF,eAAO,KAAKC,GAAZ;AACD,OAJD;;AAKA3B,MAAAA,GAAG,CAACC,SAAJ,CAAc4B,QAAd,GAAyB,YAAY;AACnC,eAAO,KAAKH,GAAL,KAAa,KAAKJ,KAAL,EAApB;AACD,OAFD;AAGD;AACF,GAxDD;;AA0DAvB,EAAAA,KAAK,CAACL,MAAN,GAAe,UAAUoC,CAAV,EAAa;AAAE,QAAI,CAACC,SAAS,CAACrB,MAAf,EAAuB,OAAOhB,MAAP;AAAeA,IAAAA,MAAM,GAAGoC,CAAT;AAAY,WAAO/B,KAAP;AAAe,GAA/F;;AACAA,EAAAA,KAAK,CAACJ,SAAN,GAAkB,UAAUmC,CAAV,EAAa;AAAE,QAAI,CAACC,SAAS,CAACrB,MAAf,EAAuB,OAAOf,SAAP;AAAkBA,IAAAA,SAAS,GAAGmC,CAAZ;AAAe,WAAO/B,KAAP;AAAe,GAAxG;;AACAA,EAAAA,KAAK,CAACH,OAAN,GAAgB,UAAUkC,CAAV,EAAa;AAAE,QAAI,CAACC,SAAS,CAACrB,MAAf,EAAuB,OAAOd,OAAP;AAAgBA,IAAAA,OAAO,GAAGkC,CAAV;AAAa,WAAO/B,KAAP;AAAe,GAAlG;;AACAA,EAAAA,KAAK,CAACF,EAAN,GAAW,UAAUiC,CAAV,EAAa;AAAE,QAAI,CAACC,SAAS,CAACrB,MAAf,EAAuB,OAAOb,EAAP;AAAWA,IAAAA,EAAE,GAAGiC,CAAL;AAAQ,WAAO/B,KAAP;AAAe,GAAnF;;AACAA,EAAAA,KAAK,CAACD,KAAN,GAAc,UAAUgC,CAAV,EAAa;AAAE,QAAI,CAACC,SAAS,CAACrB,MAAf,EAAuB,OAAOZ,KAAP;AAAcA,IAAAA,KAAK,GAAGgC,CAAR;AAAW,WAAO/B,KAAP;AAAe,GAA5F;;AAEA,SAAOA,KAAP;AACD,CAxED;;AA4EA,OAAO,IAAIiC,MAAM,GAAG,SAATA,MAAS,CAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AAC1C,OAAKA,MAAL,GAAcA,MAAd;AACA,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKpC,EAAL,GAAUqC,MAAM,CAACrC,EAAjB;AACA,OAAKM,IAAL,GAAY,KAAKN,EAAjB;AACA,OAAKsC,SAAL,GAAiBD,MAAM,CAACE,SAAxB;AACA,OAAKC,IAAL,GAAY,OAAZ;AACA,MAAIH,MAAM,CAAC,WAAD,CAAV,EACE,KAAKG,IAAL,GAAY,eAAeH,MAAM,CAACI,SAAlC;AACF,OAAKf,KAAL,GAAa,KAAKY,SAAlB;AACA,OAAKR,GAAL,GAAW,KAAKQ,SAAhB;AACA,OAAKI,QAAL,GAAgB,CAAhB;;AACA,MAAIL,MAAM,CAAC,UAAD,CAAV,EAAwB;AACtB,SAAKK,QAAL,GAAgBC,MAAM,CAACN,MAAM,CAAC,UAAD,CAAP,CAAN,GAA6B,SAA7C;AACA,SAAKX,KAAL,GAAa,KAAKY,SAAL,GAAiB,KAAKI,QAAnC;AACA,SAAKZ,GAAL,GAAW,KAAKQ,SAAhB;AACD;;AACD,MAAID,MAAM,CAAC,WAAD,CAAN,IAAuBA,MAAM,CAACI,SAAP,CAAiBG,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B,KAAiC,MAAxD,IAAkEP,MAAM,CAACQ,KAAP,CAAaC,OAAb,CAAqB,iBAArB,KAA2C,CAAC,CAAlH,EAAqH;AACnH,QAAIC,IAAI,GAAG,CAAC,SAAD,EAAY,aAAZ,EAA2B,QAA3B,EAAqC,YAArC,EAAmD,UAAnD,EAA+D,cAA/D,CAAX;AACA,SAAKL,QAAL,GAAgB,CAAhB;;AACA,SAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,IAAI,CAAClC,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAI,KAAKyB,MAAL,CAAYU,IAAI,CAACnC,CAAD,CAAhB,CAAJ,EACE,KAAK8B,QAAL,IAAiBC,MAAM,CAAC,KAAKN,MAAL,CAAYU,IAAI,CAACnC,CAAD,CAAhB,CAAD,CAAvB;AACH;;AACD,SAAK8B,QAAL,GAAgB,KAAKA,QAAL,GAAgB,SAAhC;AACA,SAAKhB,KAAL,GAAa,KAAKY,SAAL,GAAiB,KAAKI,QAAnC;AACA,SAAKZ,GAAL,GAAW,KAAKQ,SAAhB;AACD;;AAED,OAAKF,IAAL,CAAUY,MAAV,CAAiBC,OAAjB,CAAyBC,OAAzB,CAAiCC,IAAjC,CAAsCC,aAAtC,CAAoD,KAAKpD,EAAzD,IAA+D,IAA/D;AACD,CA9BM;;AAgCPmC,MAAM,CAAC/B,SAAP,CAAiBiD,KAAjB,GAAyB,YAAY;AACnC,MAAI,KAAKC,KAAL,IAAc,IAAlB,EAAwB;AACtB,SAAKA,KAAL,GAAa,EAAb;AACA,QAAIC,OAAO,GAAG,KAAKlB,MAAL,CAAYmB,aAA1B;;AACA,SAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgB2C,OAAO,IAAI,IAAX,IAAmB3C,CAAC,GAAG2C,OAAO,CAAC1C,MAA/C,EAAuDD,CAAC,EAAxD,EAA4D;AAC1D,UAAI6C,IAAI,GAAG;AACTzD,QAAAA,EAAE,EAAE,KAAKA,EAAL,GAAUuD,OAAO,CAAC3C,CAAD,CADZ;AAET8C,QAAAA,MAAM,EAAE,KAAKtB,IAAL,CAAUY,MAAV,CAAiBC,OAAjB,CAAyBC,OAAzB,CAAiCC,IAAjC,CAAsCC,aAAtC,CAAoDG,OAAO,CAAC3C,CAAD,CAA3D,CAFC;AAGT+C,QAAAA,KAAK,EAAE;AAHE,OAAX;AAKA,UAAIF,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACE,KAAxB,EACE,KAAKL,KAAL,CAAW3C,IAAX,CAAgB8C,IAAhB;AACH;AACF;;AACD,SAAO,KAAKH,KAAZ;AACD,CAfD;;AAgBA1D,gBAAgB,GAAGE,SAAnB,CAA6B,CAAC,WAAD,CAA7B,EAA4CqC,MAA5C;AAIA,OAAO,IAAIyB,KAAK,GAAG,SAARA,KAAQ,CAAUZ,MAAV,EAAkBhD,EAAlB,EAAsB6D,OAAtB,EAA+B;AAChD,OAAKb,MAAL,GAAcA,MAAd;AACA,OAAKhD,EAAL,GAAU,KAAKgD,MAAL,CAAY1C,IAAZ,GAAmB,QAAnB,GAA8BN,EAAxC;AACA,OAAKM,IAAL,GAAY,KAAKN,EAAjB;AACA,OAAK8D,MAAL,GAAc,EAAd;AACA,OAAKC,OAAL,GAAe,KAAf,CALgD,CAK1B;;AACtB,OAAK,IAAInD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiD,OAAO,CAAChD,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIiD,OAAO,CAACjD,CAAD,CAAP,CAAW6B,SAAX,IAAwBoB,OAAO,CAACjD,CAAD,CAAP,CAAW6B,SAAX,CAAqBuB,SAArB,CAA+B,CAA/B,EAAkC,CAAlC,KAAwC,MAApE,EAA4E;AAC1E,WAAKF,MAAL,CAAYnD,IAAZ,CAAiB,IAAIwB,MAAJ,CAAW,IAAX,EAAiB0B,OAAO,CAACjD,CAAD,CAAxB,CAAjB;AACD,KAFD,MAEO;AACL,WAAKkD,MAAL,CAAYnD,IAAZ,CAAiB,IAAIwB,MAAJ,CAAW,IAAX,EAAiB0B,OAAO,CAACjD,CAAD,CAAxB,CAAjB;AACD;AACF;;AACD,OAAKkD,MAAL,CAAYG,IAAZ,CAAiB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOD,CAAC,CAAC5B,SAAF,GAAc6B,CAAC,CAAC7B,SAAvB;AAAmC,GAAtE;AACA,OAAKZ,KAAL,GAAa,KAAKoC,MAAL,CAAY,CAAZ,EAAevB,SAAf,EAAb;AACA,OAAKT,GAAL,GAAW,KAAKgC,MAAL,CAAY,KAAKA,MAAL,CAAYjD,MAAZ,GAAqB,CAAjC,EAAoC0B,SAApC,EAAX;AACA,OAAK6B,SAAL,GAAiB,KAAKC,MAAL,GAAcC,MAAd,CAAqB,UAAUC,KAAV,EAAiB;AAAE,WAAOA,KAAK,CAAClC,MAAN,CAAaI,SAAb,IAA0B8B,KAAK,CAAClC,MAAN,CAAaI,SAAb,CAAuBuB,SAAvB,CAAiC,CAAjC,EAAoC,CAApC,KAA0C,MAA3E;AAAoF,GAA5H,CAAjB;AACA,OAAKQ,aAAL,GAAqB,KAAKH,MAAL,GAAcC,MAAd,CAAqB,UAAUC,KAAV,EAAiB;AAAE,WAAOA,KAAK,CAAClC,MAAN,CAAaI,SAAb,KAA2B8B,KAAK,CAAClC,MAAN,CAAaI,SAAb,CAAuBgC,UAAvB,CAAkC,KAAlC,KAA4CF,KAAK,CAAClC,MAAN,CAAaI,SAAb,CAAuBgC,UAAvB,CAAkC,UAAlC,CAAvE,CAAP;AAA+H,GAAvK,CAArB;AACD,CAlBM;AAmBP7E,gBAAgB,GAAGC,MAAnB,CAA0B,QAA1B,EAAoCC,SAApC,CAA8C,CAAC,WAAD,EAAc,eAAd,CAA9C,EAA8EC,OAA9E,CAAsF,CAAC,OAAD,CAAtF,EAAiG6D,KAAjG;AAIA,OAAO,IAAIc,OAAO,GAAG,SAAVA,OAAU,CAAUzB,OAAV,EAAmBjD,EAAnB,EAAuB6D,OAAvB,EAAgC;AACnDA,EAAAA,OAAO,CAACI,IAAR,CAAa,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOD,CAAC,CAAC3B,SAAF,GAAc4B,CAAC,CAAC5B,SAAvB;AAAmC,GAAlE;AACA,OAAKU,OAAL,GAAeA,OAAf;AACA,OAAKjD,EAAL,GAAU,KAAKiD,OAAL,CAAajD,EAAb,GAAkB,UAAlB,GAA+BA,EAAzC;AACA,OAAKM,IAAL,GAAY,KAAK2C,OAAL,CAAa3C,IAAb,GAAoB,UAApB,GAAiCN,EAA7C;AAEA,OAAK2E,KAAL,GAAa,EAAb;AACA,MAAIvC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiD,OAAO,CAAChD,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIiD,OAAO,CAACjD,CAAD,CAAP,CAAW6B,SAAX,IAAwBoB,OAAO,CAACjD,CAAD,CAAP,CAAW6B,SAAX,IAAwB,QAApD,EAA8D;AAC/D;;;AAIG;AACA,UAAIC,QAAQ,GAAGC,MAAM,CAACkB,OAAO,CAACjD,CAAD,CAAP,CAAWoB,QAAZ,CAAN,GAA8B,SAA7C,CAN4D,CAQ5D;;AACAI,MAAAA,IAAI,CAACzB,IAAL,CAAUkD,OAAO,CAACjD,CAAD,CAAjB;AACA,UAAIgE,OAAO,GAAG,IAAIhB,KAAJ,CAAU,IAAV,EAAgB,KAAKe,KAAL,CAAW9D,MAA3B,EAAmCuB,IAAnC,CAAd;AACA,UAAIyC,eAAe,GAAGD,OAAO,CAACd,MAAR,CAAec,OAAO,CAACd,MAAR,CAAejD,MAAf,GAAwB,CAAvC,CAAtB;AACA,WAAK8D,KAAL,CAAWhE,IAAX,CAAgBiE,OAAhB,EAZ4D,CAc5D;;AACA,UAAIE,IAAI,GAAG,IAAIlB,KAAJ,CAAU,IAAV,EAAgB,KAAKe,KAAL,CAAW9D,MAA3B,EAAmC,CAACgD,OAAO,CAACjD,CAAD,CAAR,EAAaiD,OAAO,CAACjD,CAAD,CAApB,CAAnC,CAAX;AACAkE,MAAAA,IAAI,CAACf,OAAL,GAAe,IAAf;AACAe,MAAAA,IAAI,CAAChB,MAAL,CAAY,CAAZ,EAAexB,SAAf,GAA2BwC,IAAI,CAAChB,MAAL,CAAY,CAAZ,EAAexB,SAAf,GAA2BI,QAAtD;AACAmC,MAAAA,eAAe,CAACvC,SAAhB,GAA4BwC,IAAI,CAAChB,MAAL,CAAY,CAAZ,EAAexB,SAA3C,CAlB4D,CAkBN;;AACtD,WAAKqC,KAAL,CAAWhE,IAAX,CAAgBmE,IAAhB,EAnB4D,CAqB5D;;AACAF,MAAAA,OAAO,CAAC9C,GAAR,GAAc+C,eAAe,CAACvC,SAA9B;AACAwC,MAAAA,IAAI,CAACpD,KAAL,GAAaoD,IAAI,CAAChB,MAAL,CAAY,CAAZ,EAAexB,SAA5B,CAvB4D,CAyB5D;;AACAF,MAAAA,IAAI,GAAG,CAACyB,OAAO,CAACjD,CAAD,CAAR,CAAP;AACD,KA3BD,MA2BO,IAAIiD,OAAO,CAACjD,CAAD,CAAP,CAAW6B,SAAX,IAAwBoB,OAAO,CAACjD,CAAD,CAAP,CAAW6B,SAAX,IAAwB,OAApD,EAA6D;AAClEL,MAAAA,IAAI,CAACzB,IAAL,CAAUkD,OAAO,CAACjD,CAAD,CAAjB;AACA,WAAK+D,KAAL,CAAWhE,IAAX,CAAgB,IAAIiD,KAAJ,CAAU,IAAV,EAAgB,KAAKe,KAAL,CAAW9D,MAA3B,EAAmCuB,IAAnC,CAAhB;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJM,MAIA;AACLA,MAAAA,IAAI,CAACzB,IAAL,CAAUkD,OAAO,CAACjD,CAAD,CAAjB;AACD;AACF;;AACD,MAAIwB,IAAI,CAACvB,MAAL,GAAc,CAAlB,EACE,KAAK8D,KAAL,CAAWhE,IAAX,CAAgB,IAAIiD,KAAJ,CAAU,IAAV,EAAgB,KAAKe,KAAL,CAAW9D,MAA3B,EAAmCuB,IAAnC,CAAhB;AACF,OAAKuC,KAAL,CAAWV,IAAX,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOD,CAAC,CAACzC,KAAF,KAAY0C,CAAC,CAAC1C,KAAF,EAAnB;AAA+B,GAAjE,EA9CmD,CAgDnD;;AACA,OAAKsD,SAAL,GAAiB,YAAY,KAAK/E,EAAlC;AACA,MAAIgF,KAAK,GAAG,EAAZ;AACAA,EAAAA,KAAK,CAAC,KAAKD,SAAN,CAAL,GAAwB,IAAxB;AACA,MAAIjB,MAAM,GAAG,KAAKO,MAAL,EAAb;;AACA,OAAK,IAAIzD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,MAAM,CAACjD,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAIkD,MAAM,CAAClD,CAAD,CAAN,CAAUyB,MAAV,CAAiB4C,UAArB,EACED,KAAK,CAAClB,MAAM,CAAClD,CAAD,CAAN,CAAUyB,MAAV,CAAiB4C,UAAlB,CAAL,GAAqC,IAArC;AACH;;AACD,SAAOD,KAAK,CAAC,KAAKD,SAAN,CAAZ;AACA,MAAIG,UAAU,GAAGC,MAAM,CAACpC,IAAP,CAAYiC,KAAZ,CAAjB;;AACA,MAAIE,UAAU,CAACrE,MAAX,GAAoB,CAAxB,EAA2B;AACzB,QAAIuE,QAAQ,GAAGF,UAAU,CAAC,CAAD,CAAzB;AACA,QAAIE,QAAQ,CAACvE,MAAT,GAAkB,EAAtB,EACE,KAAKkE,SAAL,GAAiBK,QAAQ,CAACpB,SAAT,CAAmB,CAAnB,EAAsB,EAAtB,IAA4B,KAA7C,CADF,KAGE,KAAKe,SAAL,GAAiBK,QAAjB;AACH;AACF,CAlEM;AAmEPxF,gBAAgB,GAAGC,MAAnB,CAA0B,OAA1B,EAAmCC,SAAnC,CAA6C,CAAC,WAAD,CAA7C,EAA4DC,OAA5D,CAAoE,CAAC,QAAD,EAAW,OAAX,EAAoB,WAApB,EAAiC,eAAjC,CAApE,EAAuH2E,OAAvH;AAIA,OAAO,IAAIW,QAAQ,GAAG,SAAXA,QAAW,CAAUnC,OAAV,EAAmBlD,EAAnB,EAAuB6D,OAAvB,EAAgC;AACpD,OAAKX,OAAL,GAAeA,OAAf;AACA,OAAKoC,SAAL,GAAiBtF,EAAjB;AACA,OAAKA,EAAL,GAAU,KAAKkD,OAAL,CAAalD,EAAb,GAAkB,WAAlB,GAAgCA,EAAE,CAACuF,OAAH,CAAW,GAAX,EAAgB,EAAhB,CAA1C;AACA,OAAKjF,IAAL,GAAY,KAAK4C,OAAL,CAAa5C,IAAb,GAAoB,WAApB,GAAkCN,EAAE,CAACuF,OAAH,CAAW,GAAX,EAAgB,EAAhB,CAA9C;AACA,OAAKC,QAAL,GAAgB,EAAhB,CALoD,CAOpD;;AACA,MAAI3B,OAAO,CAAC,CAAD,CAAP,CAAW,KAAX,CAAJ,EAAuB;AACrB,QAAI4B,OAAO,GAAG,GAAd;AACA,QAAIC,QAAQ,GAAG,GAAf;AACA,QAAIC,KAAK,GAAG,GAAZ;;AACA,SAAK,IAAI/E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiD,OAAO,CAAChD,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC6E,MAAAA,OAAO,IAAI9C,MAAM,CAACkB,OAAO,CAACjD,CAAD,CAAP,CAAW2B,SAAZ,CAAjB;AACAmD,MAAAA,QAAQ,IAAI/C,MAAM,CAACkB,OAAO,CAACjD,CAAD,CAAP,CAAWgF,GAAZ,CAAlB;AACAD,MAAAA,KAAK,IAAI,GAAT;AACD;;AAED,QAAIE,MAAM,GAAGH,QAAQ,GAAGC,KAAxB;AACA,QAAIG,KAAK,GAAGL,OAAO,GAAGE,KAAtB;;AACA,SAAK,IAAI/E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiD,OAAO,CAAChD,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAImF,SAAS,GAAGpD,MAAM,CAACkB,OAAO,CAACjD,CAAD,CAAP,CAAWgF,GAAZ,CAAtB;AACA,UAAII,QAAQ,GAAGF,KAAK,GAAG,CAACC,SAAS,GAAGF,MAAb,IAAuB,SAA9C;AACAhC,MAAAA,OAAO,CAACjD,CAAD,CAAP,CAAW2B,SAAX,GAAuByD,QAAvB;AACD;AACF;;AAED,MAAIC,iBAAiB,GAAGtG,WAAW,CAACuG,sBAAZ,CAAmCrC,OAAnC,EAA4C,UAA5C,CAAxB;AAEA,OAAKsC,OAAL,GAAe,EAAf;;AACA,OAAK,IAAIC,SAAT,IAAsBH,iBAAtB;AACE,SAAKE,OAAL,CAAaxF,IAAb,CAAkB,IAAI+D,OAAJ,CAAY,IAAZ,EAAkB0B,SAAlB,EAA6BH,iBAAiB,CAACG,SAAD,CAA9C,CAAlB;AADF;;AAEA,OAAKD,OAAL,CAAalC,IAAb,CAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOD,CAAC,CAACzC,KAAF,KAAY0C,CAAC,CAAC1C,KAAF,EAAnB;AAA+B,GAAnE;AACD,CAjCM;;AAkCP4D,QAAQ,CAACjF,SAAT,CAAmBiG,SAAnB,GAA+B,UAAUC,MAAV,EAAkB;AAC/C,MAAIC,SAAS,GAAGD,MAAM,CAAC,KAAKhB,SAAN,CAAtB;;AACA,MAAIiB,SAAJ,EAAe;AACb,QAAItD,OAAO,GAAG,IAAd;AACA,SAAKuC,QAAL,GAAgBe,SAAS,CAAChF,GAAV,CAAc,UAAUc,MAAV,EAAkB;AAAE,aAAO,IAAImE,OAAJ,CAAYvD,OAAZ,EAAqBZ,MAArB,CAAP;AAAsC,KAAxE,CAAhB;AACA,SAAKmD,QAAL,GAAgB,KAAKA,QAAL,CAAclB,MAAd,CAAqB,UAAUmC,OAAV,EAAmB;AACtD,aAAOA,OAAO,CAAC/E,KAAR,IAAiBuB,OAAO,CAACpB,GAAR,EAAjB,IAAkC4E,OAAO,CAAC3E,GAAR,IAAemB,OAAO,CAACxB,KAAR,EAAjD,IAAoEgF,OAAO,CAAC/D,QAAR,GAAmB,CAA9F;AACD,KAFe,CAAhB;AAGD;;AAAA;AACF,CATD;;AAUA9C,gBAAgB,GAAGC,MAAnB,CAA0B,SAA1B,EAAqCC,SAArC,CAA+C,CAAC,UAAD,CAA/C,EAA6DC,OAA7D,CAAqE,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,WAA7B,EAA0C,eAA1C,CAArE,EAAiIsF,QAAjI;AAEA,OAAO,IAAIqB,QAAQ,GAAG,SAAXA,QAAW,CAAUvD,IAAV,EAAgBnD,EAAhB,EAAoB6D,OAApB,EAA6B;AACjD,OAAKV,IAAL,GAAYA,IAAZ;AACA,OAAKnD,EAAL,GAAU,aAAaA,EAAvB;AACA,OAAKM,IAAL,GAAY,KAAK6C,IAAL,CAAU9C,EAAV,KAAiB,GAAjB,GAAuB,KAAKL,EAAxC;AACA,OAAK2G,IAAL,GAAY,aAAa,KAAK3G,EAA9B;AAEA,MAAI4G,kBAAkB,GAAGjH,WAAW,CAACuG,sBAAZ,CAAmCrC,OAAnC,EAA4C,WAA5C,CAAzB;AAEA,OAAKgD,SAAL,GAAiB,EAAjB;;AACA,OAAK,IAAIC,UAAT,IAAuBF,kBAAvB,EAA2C;AACzC,SAAKC,SAAL,CAAelG,IAAf,CAAoB,IAAI0E,QAAJ,CAAa,IAAb,EAAmByB,UAAnB,EAA+BF,kBAAkB,CAACE,UAAD,CAAjD,CAApB;AACD;;AACD,OAAKD,SAAL,CAAe5C,IAAf,CAAoB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOD,CAAC,CAACzC,KAAF,KAAY0C,CAAC,CAAC1C,KAAF,EAAnB;AAA+B,GAArE;AACD,CAbM;AAcP7B,gBAAgB,GAAGC,MAAnB,CAA0B,WAA1B,EAAuCE,OAAvC,CAA+C,CAAC,SAAD,EAAY,OAAZ,EAAqB,QAArB,EAA+B,OAA/B,EAAwC,WAAxC,EAAqD,eAArD,EAAsE,UAAtE,CAA/C,EAAkI2G,QAAlI;AAIA,OAAO,IAAIK,KAAK,GAAG,SAARA,KAAQ,CAAUC,IAAV,EAAgB;AACjC;AACA,OAAKhH,EAAL,GAAUgH,IAAI,CAAChH,EAAf;AACA,OAAKM,IAAL,GAAY,UAAU,KAAKN,EAA3B;AACA,OAAK6D,OAAL,GAAemD,IAAI,CAACnD,OAApB;AACA,OAAKT,aAAL,GAAqB,EAArB;;AAEA,OAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKiD,OAAL,CAAahD,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,QAAIyB,MAAM,GAAG,KAAKwB,OAAL,CAAajD,CAAb,CAAb;AACA,QAAIyB,MAAM,CAAC4E,OAAP,IAAkB,IAAtB,EACE5E,MAAM,CAACrC,EAAP,GAAY,MAAM2B,IAAI,CAACuF,KAAL,CAAWvF,IAAI,CAACwF,MAAL,MAAiB,UAAU,OAAV,GAAoB,CAArC,CAAX,IAAsD,OAA5D,CAAZ,CADF,KAGE9E,MAAM,CAACrC,EAAP,GAAYqC,MAAM,CAAC4E,OAAnB;AACF,SAAK7D,aAAL,CAAmBf,MAAM,CAACrC,EAA1B,IAAgCqC,MAAhC;AACD,GAdgC,CAgBjC;;;AACA,OAAK+E,QAAL,GAAgB,EAAhB;AACA,MAAIC,kBAAkB,GAAG1H,WAAW,CAACuG,sBAAZ,CAAmCc,IAAI,CAACnD,OAAxC,EAAiD,MAAjD,CAAzB;;AACA,OAAK,IAAIyD,UAAT,IAAuBD,kBAAvB;AACE,SAAKD,QAAL,CAAczG,IAAd,CAAmB,IAAI+F,QAAJ,CAAa,IAAb,EAAmBY,UAAnB,EAA+BD,kBAAkB,CAACC,UAAD,CAAjD,CAAnB;AADF;;AAEA,OAAKF,QAAL,CAAcnD,IAAd,CAAmB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOD,CAAC,CAACzC,KAAF,KAAY0C,CAAC,CAAC1C,KAAF,EAAnB;AAA+B,GAApE,EArBiC,CAuBjC;;AACA,MAAI8F,IAAI,GAAG,EAAX;;AACA,OAAK,IAAI3G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKiD,OAAL,CAAahD,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,QAAI,KAAKiD,OAAL,CAAajD,CAAb,EAAgB,KAAhB,CAAJ,EACE,KAAK,IAAI4G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3D,OAAL,CAAajD,CAAb,EAAgB,KAAhB,EAAuBC,MAA3C,EAAmD2G,CAAC,EAApD;AACED,MAAAA,IAAI,CAAC,KAAK1D,OAAL,CAAajD,CAAb,EAAgB,KAAhB,EAAuB4G,CAAvB,CAAD,CAAJ,GAAkC,IAAlC;AADF;AAEH;;AACD,OAAKD,IAAL,GAAYpC,MAAM,CAACpC,IAAP,CAAYwE,IAAZ,CAAZ;AACD,CA/BM;AAgCP3H,gBAAgB,GAAGC,MAAnB,CAA0B,UAA1B,EAAsCC,SAAtC,CAAgD,CAAC,MAAD,CAAhD,EAA0DC,OAA1D,CAAkE,CAAC,WAAD,EAAc,SAAd,EAAyB,OAAzB,EAAkC,QAAlC,EAA4C,OAA5C,EAAqD,UAArD,EAAiE,WAAjE,EAA8E,eAA9E,CAAlE,EAAkKgH,KAAlK;;AAIA,IAAIU,QAAQ,GAAG,SAAXA,QAAW,CAAUT,IAAV,EAAgBV,MAAhB,EAAwB;AACrCoB,EAAAA,MAAM,CAACC,QAAP,GAAkB,IAAlB;AACA,OAAKX,IAAL,GAAY,EAAZ;AACA,OAAKV,MAAL,GAAcA,MAAd;AACA,OAAKtG,EAAL,GAAUL,WAAW,CAACiI,SAAZ,EAAV;AACA,OAAKtH,IAAL,GAAY,KAAKN,EAAjB,CALqC,CAOrC;;AACA,OAAK6H,KAAL,GAAa,EAAb;;AACA,OAAK,IAAIjH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoG,IAAI,CAACnG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,SAAKkH,OAAL,CAAad,IAAI,CAACpG,CAAD,CAAjB;AACD;AACF,CAZD;;AAaA6G,QAAQ,CAACrH,SAAT,CAAmB0H,OAAnB,GAA6B,UAAUd,IAAV,EAAgB;AAC3C,OAAKA,IAAL,CAAUrG,IAAV,CAAeqG,IAAf;AACA,MAAI7D,IAAI,GAAG,IAAI4D,KAAJ,CAAUC,IAAV,CAAX;AACA,OAAKa,KAAL,CAAWlH,IAAX,CAAgBwC,IAAhB;AACA,OAAK0E,KAAL,CAAW5D,IAAX,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOD,CAAC,CAACzC,KAAF,KAAY0C,CAAC,CAAC1C,KAAF,EAAnB;AAA+B,GAAjE;AACA,OAAKC,KAAL,GAAa,IAAb;AAAmB,OAAKI,GAAL,GAAW,IAAX;AACnB,OAAKF,GAAL,GAAW,KAAKH,KAAL,EAAX;AACA,OAAKM,GAAL,GAAW,KAAKF,GAAL,EAAX;AACA,MAAIyE,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAIA,MAAJ,EACEnD,IAAI,CAAC4E,SAAL,GAAiBC,OAAjB,CAAyB,UAAU/E,OAAV,EAAmB;AAAEA,IAAAA,OAAO,CAACoD,SAAR,CAAkBC,MAAlB;AAA4B,GAA1E;AACH,CAXD;;AAYAmB,QAAQ,CAACrH,SAAT,CAAmB6H,KAAnB,GAA2B,UAAU3B,MAAV,EAAkB;AAC3C,OAAKA,MAAL,GAAcA,MAAd;AACA,MAAI,KAAKA,MAAT,EACE,KAAKyB,SAAL,GAAiBC,OAAjB,CAAyB,UAAU/E,OAAV,EAAmB;AAAEA,IAAAA,OAAO,CAACoD,SAAR,CAAkBC,MAAlB;AAA4B,GAA1E;AACH,CAJD;;AAKA1G,gBAAgB,GAAGC,MAAnB,CAA0B,OAA1B,EAAmCE,OAAnC,CAA2C,CAAC,UAAD,EAAa,WAAb,EAA0B,SAA1B,EAAqC,OAArC,EAA8C,QAA9C,EAAwD,OAAxD,EAAiE,UAAjE,EAA6E,WAA7E,EAA0F,eAA1F,CAA3C,EAAuJ0H,QAAvJ;AAEA,OAAO,IAAIjB,OAAO,GAAG,SAAVA,OAAU,CAAUvD,OAAV,EAAmBZ,MAAnB,EAA2B;AAC9C,OAAKA,MAAL,GAAcA,MAAd;AACA,OAAKY,OAAL,GAAeA,OAAf;AACA,MAAIZ,MAAM,CAAC4E,OAAP,IAAkB,IAAtB,EACE5E,MAAM,CAACrC,EAAP,GAAY,MAAM2B,IAAI,CAACuF,KAAL,CAAWvF,IAAI,CAACwF,MAAL,MAAiB,UAAU,OAAV,GAAoB,CAArC,CAAX,IAAsD,OAA5D,CAAZ,CADF,KAGE9E,MAAM,CAACrC,EAAP,GAAYqC,MAAM,CAAC4E,OAAnB;AACF,OAAKiB,QAAL,GAAgB7F,MAAM,CAACrC,EAAvB;AACA,OAAKA,EAAL,GAAU,KAAKiD,OAAL,CAAa3C,IAAb,GAAoB,MAApB,GAA6B,KAAK4H,QAA5C;AACA,OAAK5H,IAAL,GAAY,KAAKN,EAAjB;AAEA,OAAK0B,KAAL,GAAaiB,MAAM,CAAC,KAAKN,MAAL,CAAY,SAAZ,CAAD,CAAN,GAAiC,CAA9C;AACA,OAAKK,QAAL,GAAgBC,MAAM,CAAC,KAAKN,MAAL,CAAY,YAAZ,CAAD,CAAN,GAAoC,CAApD;AACA,OAAKP,GAAL,GAAW,KAAKJ,KAAL,GAAa,KAAKgB,QAA7B;AACA,OAAKyF,IAAL,GAAY,KAAK9F,MAAL,CAAY,QAAZ,CAAZ;AACD,CAfM;AAiBPzC,gBAAgB,GAAGE,SAAnB,CAA6B,CAAC,OAAD,EAAU,UAAV,EAAsB,MAAtB,CAA7B,EAA4D0G,OAA5D","sourcesContent":["import * as XtraceUtils from \"../xtrace_utils\"\n\nvar PrototypeBuilder = function () {\n  var getter = null;\n  var accessors = [];\n  var mappers = [];\n  var id = true;\n  var times = true;\n\n  var build = function (cls) {\n    // First, add the ID and getID methods if requested\n    if (id) {\n      cls.prototype.ID = function () { return this.fqid; };\n      cls.prototype.globalID = function () { return this.id; };\n      cls.getID = function (obj) { return obj.ID(); };\n      cls.getGlobalID = function (obj) { return obj.globalID(); };\n    }\n\n    // The getter is just an accessor\n    if (getter != null) {\n      cls.prototype.getter = getter;\n      accessors.push(getter);\n    }\n\n    // Accessors access data fields\n    for (var i = 0; i < accessors.length; i++) {\n      var accessor = accessors[i];\n      var accessor_data_field = accessor.toLowerCase();\n      cls.prototype[accessor] = function (field) { return function () { return this[field]; }; }(accessor_data_field);\n    }\n\n    // At this point, remaining methods need a getter.  If no getter, return\n    if (getter == null)\n      return;\n\n    // Mappers simply call the mapper method on each of the elements returned by the getter\n    for (var i = 0; i < mappers.length; i++) {\n      cls.prototype[mappers[i]] = function (mapper) {\n        return function (/*optional*/dontcache) {\n          if (this[mapper.toLowerCase()])\n            return this[mapper.toLowerCase()];\n          var ret = [].concat.apply([], this[this.getter]().map(function (elem) { return elem[mapper](true); }));\n          if (!dontcache)\n            this[mapper.toLowerCase()] = ret;\n          return ret;\n        };\n      }(mappers[i]);\n    };\n\n    // Times call the max/min of the times of the getter\n    if (times) {\n      cls.prototype.Start = function () {\n        if (this.start == null)\n          this.start = Math.min.apply(this, this[this.getter]().map(function (elem) { return elem.Start(); }));\n        return this.start;\n      };\n      cls.prototype.End = function () {\n        if (this.end == null)\n          this.end = Math.max.apply(this, this[this.getter]().map(function (elem) { return elem.End(); }));\n        return this.end;\n      };\n      cls.prototype.Duration = function () {\n        return this.End() - this.Start();\n      };\n    }\n  };\n\n  build.getter = function (_) { if (!arguments.length) return getter; getter = _; return build; };\n  build.accessors = function (_) { if (!arguments.length) return accessors; accessors = _; return build; };\n  build.mappers = function (_) { if (!arguments.length) return mappers; mappers = _; return build; };\n  build.id = function (_) { if (!arguments.length) return id; id = _; return build; };\n  build.times = function (_) { if (!arguments.length) return times; times = _; return build; };\n\n  return build;\n};\n\n\n\nexport var XEvent = function (span, report) {\n  this.report = report;\n  this.span = span;\n  this.id = report.id;\n  this.fqid = this.id;\n  this.timestamp = report.Timestamp\n  this.type = \"event\";\n  if (report[\"Operation\"])\n    this.type = \"operation \" + report.Operation;\n  this.start = this.timestamp;\n  this.end = this.timestamp;\n  this.duration = 0;\n  if (report[\"Duration\"]) {\n    this.duration = Number(report[\"Duration\"]) / 1000000.0;\n    this.start = this.timestamp - this.duration;\n    this.end = this.timestamp;\n  }\n  if (report[\"Operation\"] && report.Operation.substr(0, 4) == \"file\" && report.Agent.indexOf(\"ScheduledFileIO\") != -1) {\n    var keys = [\"PreWait\", \"PreDuration\", \"IOWait\", \"IODuration\", \"PostWait\", \"PostDuration\"];\n    this.duration = 0;\n    for (var i = 0; i < keys.length; i++) {\n      if (this.report[keys[i]])\n        this.duration += Number(this.report[keys[i]]);\n    }\n    this.duration = this.duration / 1000000.0;\n    this.start = this.timestamp - this.duration;\n    this.end = this.timestamp;\n  }\n\n  this.span.thread.process.machine.task.reports_by_id[this.id] = this;\n};\n\nXEvent.prototype.Edges = function () {\n  if (this.edges == null) {\n    this.edges = [];\n    var parents = this.report.ParentEventID;\n    for (var i = 0; parents != null && i < parents.length; i++) {\n      var edge = {\n        id: this.id + parents[i],\n        parent: this.span.thread.process.machine.task.reports_by_id[parents[i]],\n        child: this\n      };\n      if (edge.parent && edge.child)\n        this.edges.push(edge);\n    }\n  }\n  return this.edges;\n};\nPrototypeBuilder().accessors([\"Timestamp\"])(XEvent);\n\n\n\nexport var XSpan = function (thread, id, reports) {\n  this.thread = thread;\n  this.id = this.thread.fqid + \"_Span-\" + id;\n  this.fqid = this.id;\n  this.events = [];\n  this.waiting = false; // is this a span where a thread is waiting?\n  for (var i = 0; i < reports.length; i++) {\n    if (reports[i].Operation && reports[i].Operation.substring(0, 4) == \"file\") {\n      this.events.push(new XEvent(this, reports[i]));\n    } else {\n      this.events.push(new XEvent(this, reports[i]));\n    }\n  }\n  this.events.sort(function (a, b) { return a.timestamp - b.timestamp; });\n  this.start = this.events[0].Timestamp();\n  this.end = this.events[this.events.length - 1].Timestamp();\n  this.hddevents = this.Events().filter(function (event) { return event.report.Operation && event.report.Operation.substring(0, 4) == \"file\"; });\n  this.networkevents = this.Events().filter(function (event) { return event.report.Operation && (event.report.Operation.startsWith(\"net\") || event.report.Operation.startsWith(\"loopback\")); });\n};\nPrototypeBuilder().getter(\"Events\").accessors([\"HDDEvents\", \"NetworkEvents\"]).mappers([\"Edges\"])(XSpan);\n\n\n\nexport var XThread = function (process, id, reports) {\n  reports.sort(function (a, b) { return a.Timestamp - b.Timestamp; });\n  this.process = process;\n  this.id = this.process.id + \"_Thread-\" + id;\n  this.fqid = this.process.fqid + \"_Thread-\" + id;\n\n  this.spans = [];\n  var span = [];\n  for (var i = 0; i < reports.length; i++) {\n    if (reports[i].Operation && reports[i].Operation == \"waited\") {\n\t\t\t/* Special case: a 'wait' report.  A 'wait' report translates into two events; a start and end.\n\t\t\t * A 'wait' report is generated at the end of the wait, and contains a field specifying the duration\n\t\t\t * of the wait.  So we must manually reconstruct the begin event of the wait */\n\n      // The duration of the wait event\n      var duration = Number(reports[i].Duration) / 1000000.0;\n\n      // Add an event to the end of the prior span and modify the timestamp\n      span.push(reports[i]);\n      var preWait = new XSpan(this, this.spans.length, span);\n      var preWaitEndEvent = preWait.events[preWait.events.length - 1];\n      this.spans.push(preWait);\n\n      // Create a span just for the event\n      var Wait = new XSpan(this, this.spans.length, [reports[i], reports[i]]);\n      Wait.waiting = true;\n      Wait.events[0].timestamp = Wait.events[0].timestamp - duration;\n      preWaitEndEvent.timestamp = Wait.events[0].timestamp; // modify the timestamp of the end event of the prior span\n      this.spans.push(Wait);\n\n      // Fix start/end ts (a hack, whatever)\n      preWait.end = preWaitEndEvent.timestamp;\n      Wait.start = Wait.events[0].timestamp;\n\n      // Create the start of the next span;\n      span = [reports[i]];\n    } else if (reports[i].Operation && reports[i].Operation == \"unset\") {\n      span.push(reports[i]);\n      this.spans.push(new XSpan(this, this.spans.length, span));\n      span = [];\n    } else {\n      span.push(reports[i]);\n    }\n  }\n  if (span.length > 0)\n    this.spans.push(new XSpan(this, this.spans.length, span));\n  this.spans.sort(function (a, b) { return a.Start() - b.Start(); });\n\n  // Now set the short name of this thread\n  this.shortname = \"Thread-\" + this.id;\n  var names = {};\n  names[this.shortname] = true;\n  var events = this.Events();\n  for (var i = 0; i < events.length; i++) {\n    if (events[i].report.ThreadName)\n      names[events[i].report.ThreadName] = true;\n  }\n  delete names[this.shortname];\n  var othernames = Object.keys(names);\n  if (othernames.length > 0) {\n    var selected = othernames[0];\n    if (selected.length > 20)\n      this.shortname = selected.substring(0, 20) + \"...\";\n    else\n      this.shortname = selected;\n  }\n};\nPrototypeBuilder().getter(\"Spans\").accessors([\"ShortName\"]).mappers([\"Events\", \"Edges\", \"HDDEvents\", \"NetworkEvents\"])(XThread);\n\n\n\nexport var XProcess = function (machine, id, reports) {\n  this.machine = machine;\n  this.processid = id;\n  this.id = this.machine.id + \"_Process-\" + id.replace(\"@\", \"\");\n  this.fqid = this.machine.fqid + \"_Process-\" + id.replace(\"@\", \"\");\n  this.gcevents = [];\n\n  // We want high resolution timestamps, so perform some averaging\n  if (reports[0][\"HRT\"]) {\n    var totalTS = 0.0;\n    var totalHRT = 0.0;\n    var count = 0.0;\n    for (var i = 0; i < reports.length; i++) {\n      totalTS += Number(reports[i].Timestamp);\n      totalHRT += Number(reports[i].HRT);\n      count += 1.0;\n    }\n\n    var avgHRT = totalHRT / count;\n    var avgTS = totalTS / count;\n    for (var i = 0; i < reports.length; i++) {\n      var reportHRT = Number(reports[i].HRT);\n      var reportTS = avgTS + (reportHRT - avgHRT) / 1000000.0;\n      reports[i].Timestamp = reportTS;\n    }\n  }\n\n  var reports_by_thread = XtraceUtils.group_reports_by_field(reports, \"ThreadID\");\n\n  this.threads = [];\n  for (var thread_id in reports_by_thread)\n    this.threads.push(new XThread(this, thread_id, reports_by_thread[thread_id]));\n  this.threads.sort(function (a, b) { return a.Start() - b.Start(); });\n};\nXProcess.prototype.addGCData = function (gcdata) {\n  var gcreports = gcdata[this.processid];\n  if (gcreports) {\n    var process = this;\n    this.gcevents = gcreports.map(function (report) { return new GCEvent(process, report); });\n    this.gcevents = this.gcevents.filter(function (gcevent) {\n      return gcevent.start <= process.End() && gcevent.end >= process.Start() && gcevent.duration > 0;\n    });\n  };\n}\nPrototypeBuilder().getter(\"Threads\").accessors([\"GCEvents\"]).mappers([\"Spans\", \"Events\", \"Edges\", \"HDDEvents\", \"NetworkEvents\"])(XProcess);\n\nexport var XMachine = function (task, id, reports) {\n  this.task = task;\n  this.id = \"Machine-\" + id;\n  this.fqid = this.task.ID() + \"_\" + this.id;\n  this.llid = \"Machine-\" + this.id;\n\n  var reports_by_process = XtraceUtils.group_reports_by_field(reports, \"ProcessID\");\n\n  this.processes = [];\n  for (var process_id in reports_by_process) {\n    this.processes.push(new XProcess(this, process_id, reports_by_process[process_id]));\n  }\n  this.processes.sort(function (a, b) { return a.Start() - b.Start(); });\n};\nPrototypeBuilder().getter(\"Processes\").mappers([\"Threads\", \"Spans\", \"Events\", \"Edges\", \"HDDEvents\", \"NetworkEvents\", \"GCEvents\"])(XMachine);\n\n\n\nexport var XTask = function (data) {\n  // Copy the params\n  this.id = data.id;\n  this.fqid = \"Task-\" + this.id;\n  this.reports = data.reports;\n  this.reports_by_id = {};\n\n  for (var i = 0; i < this.reports.length; i++) {\n    var report = this.reports[i];\n    if (report.EventID == null)\n      report.id = \"\" + (Math.floor(Math.random() * (9999999 - 1000000 + 1)) + 1000000);\n    else\n      report.id = report.EventID;\n    this.reports_by_id[report.id] = report;\n  }\n\n  // Create the data structures\n  this.machines = [];\n  var reports_by_machine = XtraceUtils.group_reports_by_field(data.reports, \"Host\");\n  for (var machine_id in reports_by_machine)\n    this.machines.push(new XMachine(this, machine_id, reports_by_machine[machine_id]));\n  this.machines.sort(function (a, b) { return a.Start() - b.Start(); });\n\n  // Extract the tags\n  var tags = {};\n  for (var i = 0; i < this.reports.length; i++) {\n    if (this.reports[i][\"Tag\"])\n      for (var j = 0; j < this.reports[i][\"Tag\"].length; j++)\n        tags[this.reports[i][\"Tag\"][j]] = true;\n  }\n  this.tags = Object.keys(tags);\n};\nPrototypeBuilder().getter(\"Machines\").accessors([\"Tags\"]).mappers([\"Processes\", \"Threads\", \"Spans\", \"Events\", \"Edges\", \"GCEvents\", \"HDDEvents\", \"NetworkEvents\"])(XTask);\n\n\n\nvar Workload = function (data, gcdata) {\n  window.workload = this;\n  this.data = [];\n  this.gcdata = gcdata;\n  this.id = XtraceUtils.unique_id();\n  this.fqid = this.id;\n\n  // Create the data structures\n  this.tasks = [];\n  for (var i = 0; i < data.length; i++) {\n    this.addTask(data[i]);\n  }\n};\nWorkload.prototype.addTask = function (data) {\n  this.data.push(data);\n  var task = new XTask(data);\n  this.tasks.push(task);\n  this.tasks.sort(function (a, b) { return a.Start() - b.Start(); });\n  this.start = null; this.end = null;\n  this.min = this.Start();\n  this.max = this.End();\n  var gcdata = this.gcdata;\n  if (gcdata)\n    task.Processes().forEach(function (process) { process.addGCData(gcdata); });\n};\nWorkload.prototype.addGC = function (gcdata) {\n  this.gcdata = gcdata;\n  if (this.gcdata)\n    this.Processes().forEach(function (process) { process.addGCData(gcdata); });\n};\nPrototypeBuilder().getter(\"Tasks\").mappers([\"Machines\", \"Processes\", \"Threads\", \"Spans\", \"Events\", \"Edges\", \"GCEvents\", \"HDDEvents\", \"NetworkEvents\"])(Workload);\n\nexport var GCEvent = function (process, report) {\n  this.report = report;\n  this.process = process;\n  if (report.EventID == null)\n    report.id = \"\" + (Math.floor(Math.random() * (9999999 - 1000000 + 1)) + 1000000);\n  else\n    report.id = report.EventID;\n  this.xtraceid = report.id;\n  this.id = this.process.fqid + \"_GC-\" + this.xtraceid;\n  this.fqid = this.id;\n\n  this.start = Number(this.report[\"GcStart\"]) + 1;\n  this.duration = Number(this.report[\"GcDuration\"]) - 1;\n  this.end = this.start + this.duration;\n  this.name = this.report[\"GcName\"];\n};\n\nPrototypeBuilder().accessors([\"Start\", \"Duration\", \"Name\"])(GCEvent);"]},"metadata":{},"sourceType":"module"}